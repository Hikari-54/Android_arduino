package com.example.bluetooth_andr11.map

import android.content.Context
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Path
import android.graphics.Point
import android.location.Location
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import com.example.bluetooth_andr11.log.LogModule
import com.google.android.gms.location.LocationAvailability
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import org.osmdroid.config.Configuration
import org.osmdroid.util.GeoPoint
import org.osmdroid.views.MapView
import org.osmdroid.views.Projection
import org.osmdroid.views.overlay.Marker
import org.osmdroid.views.overlay.mylocation.GpsMyLocationProvider
import org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay
import java.io.File
import java.util.concurrent.ConcurrentHashMap

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ OpenStreetMap —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
 * - –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ GPS –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å –∫—Ä—É–≥–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–Ω—å—é
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Lifecycle
 * - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LogModule –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Lifecycle-aware –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
 * - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConcurrentHashMap
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–æ–º –∏ —Ç–µ–Ω—è–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
object MapModule : DefaultLifecycleObserver {
    private const val TAG = "MapModule"

    // === –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–†–¢–´ ===

    /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
    private const val MAX_MARKERS = 50

    /** –£—Ä–æ–≤–µ–Ω—å –∑—É–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
    private const val DEFAULT_ZOOM = 14.0

    /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç—ã */
    private const val MOSCOW_LAT = 55.751244
    private const val MOSCOW_LON = 37.618423

    // === –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–†–ò–°–û–í–ö–ò ===

    /** –†–∞–∑–º–µ—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */
    private const val LOCATION_INDICATOR_SIZE = 40f

    /** –†–∞–∑–º–µ—Ä –æ—Ñ—Ñ—Å–µ—Ç–∞ –¥–ª—è –±–æ–∫–æ–≤—ã—Ö —É–≥–ª–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ */
    private const val DIRECTION_INDICATOR_OFFSET = 30f

    /** –¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */
    private const val LOCATION_INDICATOR_COLOR = "#4CAF50"

    /** –†–∞–¥–∏—É—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ */
    private const val CENTER_DOT_RADIUS = 8f

    /** –†–∞–∑–º–µ—Ä —Ç–µ–Ω–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ */
    private const val SHADOW_RADIUS = 4f

    // === –ù–ê–°–¢–†–û–ô–ö–ò GPS ===

    /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
    private const val LOCATION_UPDATE_INTERVAL = 15000L // 15 —Å–µ–∫—É–Ω–¥

    /** –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
    private const val MIN_LOCATION_UPDATE_INTERVAL = 5000L // 5 —Å–µ–∫—É–Ω–¥

    /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
    private const val MAX_LOCATION_UPDATE_DELAY = 30000L // 30 —Å–µ–∫—É–Ω–¥

    // === –ù–ê–°–¢–†–û–ô–ö–ò –ö–≠–®–ê ===

    /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤ –≤ –±–∞–π—Ç–∞—Ö (100MB) */
    private const val MAX_TILE_CACHE_SIZE = 100L * 1024 * 1024

    /** –†–∞–∑–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –≤ –±–∞–π—Ç–∞—Ö (80MB) */
    private const val TILE_CACHE_TRIM_SIZE = 80L * 1024 * 1024

    // === –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–£–õ–Ø ===

    /** –†–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏ */
    private val activeMapViews = ConcurrentHashMap<Int, MapView>()

    /** Overlay –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    private var myLocationOverlay: MyLocationNewOverlay? = null

    /** Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */
    private var locationCallback: LocationCallback? = null

    /** –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è */
    private var isInitialized = false

    /** –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–µ–ª–∫–∏ */
    private var lastBearing = 0f

    /** –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */
    private var markerCount = 0

    // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @return –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MapView, –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    fun initializeMap(context: Context): MapView {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OSMDroid —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!isInitialized) {
            configureOsmDroid(context)
            isInitialized = true
        }

        val mapView = MapView(context).apply {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–∞–π–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Mapnik
            setTileSource(org.osmdroid.tileprovider.tilesource.TileSourceFactory.MAPNIK)

            // –í–∫–ª—é—á–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç—ã –¥–ª—è –∑—É–º–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            setMultiTouchControls(true)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ú–æ—Å–∫–≤—É
            controller.setZoom(DEFAULT_ZOOM)
            controller.setCenter(GeoPoint(MOSCOW_LAT, MOSCOW_LON))

            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            setScrollableAreaLimitDouble(null) // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            isHorizontalMapRepetitionEnabled = false // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä –∫–∞—Ä—Ç—ã
            isVerticalMapRepetitionEnabled = false

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            setUseDataConnection(true) // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–π–ª–æ–≤
            setBuiltInZoomControls(false) // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∑—É–º–∞
            isTilesScaledToDpi = true // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ DPI —ç–∫—Ä–∞–Ω–∞
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
        val mapId = mapView.hashCode()
        activeMapViews[mapId] = mapView

        Log.d(TAG, "üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å ID: $mapId")
        return mapView
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç overlay –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     * @param mapView –∫–∞—Ä—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è overlay –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
     */
    fun initializeLocationOverlay(context: Context, mapView: MapView) {
        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π overlay –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            cleanupLocationOverlay(mapView)

            val locationProvider = GpsMyLocationProvider(context)

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π overlay —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
            myLocationOverlay = object : MyLocationNewOverlay(locationProvider, mapView) {
                override fun drawMyLocation(
                    canvas: Canvas?,
                    projection: Projection?,
                    lastFix: Location?
                ) {
                    drawCustomLocationIndicator(canvas, projection, lastFix)
                }
            }.apply {
                enableMyLocation()
                enableFollowLocation()

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ overlay (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                setEnableAutoStop(false) // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–∏–≥–Ω–∞–ª–∞
            }

            // –î–æ–±–∞–≤–ª—è–µ–º overlay –Ω–∞ –∫–∞—Ä—Ç—É
            mapView.overlays.add(myLocationOverlay)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            setupLocationUpdates(context)

            Log.d(TAG, "üìç Location overlay —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è location overlay: ${e.message}")
            Toast.makeText(
                context,
                "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é",
                Toast.LENGTH_SHORT
            ).show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ location overlay: ${e.message}")
            Toast.makeText(
                context,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPS: ${e.message}",
                Toast.LENGTH_LONG
            ).show()
        }
    }

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OSMDroid –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤
     */
    private fun configureOsmDroid(context: Context) {
        try {
            val config = Configuration.getInstance()
            config.userAgentValue = context.packageName

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤
            val osmBasePath = context.getExternalFilesDir("osmdroid")
            if (osmBasePath != null) {
                config.osmdroidBasePath = osmBasePath
                config.osmdroidTileCache = File(osmBasePath, "tiles")

                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (!config.osmdroidTileCache.exists()) {
                    config.osmdroidTileCache.mkdirs()
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            config.tileFileSystemCacheMaxBytes = MAX_TILE_CACHE_SIZE
            config.tileFileSystemCacheTrimBytes = TILE_CACHE_TRIM_SIZE

            Log.d(TAG, "üîß OSMDroid —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω. –ö—ç—à: ${config.osmdroidTileCache}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OSMDroid: ${e.message}")
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
     */
    private fun setupLocationUpdates(context: Context) {
        val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)

        val locationRequest = LocationRequest.Builder(
            Priority.PRIORITY_HIGH_ACCURACY,
            LOCATION_UPDATE_INTERVAL
        ).apply {
            setMinUpdateIntervalMillis(MIN_LOCATION_UPDATE_INTERVAL)
            setMaxUpdateDelayMillis(MAX_LOCATION_UPDATE_DELAY)
        }.build()

        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                locationResult.locations.forEach { location ->
                    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    LogModule.logLocation(context, location)
                    Log.d(
                        TAG,
                        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location.latitude}, ${location.longitude} (¬±${location.accuracy.toInt()}–º)"
                    )
                }
            }

            override fun onLocationAvailability(locationAvailability: LocationAvailability) {
                if (!locationAvailability.isLocationAvailable) {
                    Log.w(TAG, "‚ö†Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                }
            }
        }

        try {
            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback!!,
                Looper.getMainLooper()
            )
            Log.d(TAG, "üì± GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${LOCATION_UPDATE_INTERVAL}–º—Å)")
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${e.message}")
            Toast.makeText(
                context,
                "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é",
                Toast.LENGTH_LONG
            ).show()
        }
    }

    // === –ö–ê–°–¢–û–ú–ù–ê–Ø –û–¢–†–ò–°–û–í–ö–ê ===

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å—Ç—Ä–µ–ª–∫–∏
     * —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π –∏ –∫—Ä—É–≥–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
     */
    private fun drawCustomLocationIndicator(
        canvas: Canvas?,
        projection: Projection?,
        lastFix: Location?
    ) {
        lastFix?.let { location ->
            val geoPoint = GeoPoint(location.latitude, location.longitude)
            val screenCoords = Point()
            projection?.toPixels(geoPoint, screenCoords)

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
            val direction = if (location.hasBearing()) {
                location.bearing
            } else {
                lastBearing // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            }
            lastBearing = direction

            // –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
            if (location.hasAccuracy()) {
                drawAccuracyCircle(canvas, projection, geoPoint, location.accuracy)
            }

            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            val trianglePath = Path().apply {
                moveTo(
                    screenCoords.x.toFloat(),
                    screenCoords.y.toFloat() - LOCATION_INDICATOR_SIZE
                )
                lineTo(
                    screenCoords.x.toFloat() - DIRECTION_INDICATOR_OFFSET,
                    screenCoords.y.toFloat() + DIRECTION_INDICATOR_OFFSET
                )
                lineTo(
                    screenCoords.x.toFloat() + DIRECTION_INDICATOR_OFFSET,
                    screenCoords.y.toFloat() + DIRECTION_INDICATOR_OFFSET
                )
                close()
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∏—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å —Ç–µ–Ω—å—é
            val trianglePaint = Paint().apply {
                color = Color.parseColor(LOCATION_INDICATOR_COLOR)
                style = Paint.Style.FILL
                isAntiAlias = true
                setShadowLayer(SHADOW_RADIUS, 2f, 2f, Color.argb(100, 0, 0, 0))
            }

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
            canvas?.save()
            canvas?.rotate(direction, screenCoords.x.toFloat(), screenCoords.y.toFloat())
            canvas?.drawPath(trianglePath, trianglePaint)

            // –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –±–µ–ª—É—é —Ç–æ—á–∫—É
            val centerPaint = Paint().apply {
                color = Color.WHITE
                style = Paint.Style.FILL
                isAntiAlias = true
                setShadowLayer(2f, 1f, 1f, Color.argb(50, 0, 0, 0))
            }
            canvas?.drawCircle(
                screenCoords.x.toFloat(),
                screenCoords.y.toFloat(),
                CENTER_DOT_RADIUS,
                centerPaint
            )

            canvas?.restore()
        }
    }

    /**
     * –†–∏—Å—É–µ—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
     */
    private fun drawAccuracyCircle(
        canvas: Canvas?,
        projection: Projection?,
        center: GeoPoint,
        accuracyMeters: Float
    ) {
        // –ö–∏—Å—Ç—å –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∫—Ä—É–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        val accuracyPaint = Paint().apply {
            color = Color.argb(50, 76, 175, 80) // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
            style = Paint.Style.FILL
            isAntiAlias = true
        }

        // –ö–∏—Å—Ç—å –¥–ª—è –≥—Ä–∞–Ω–∏—Ü—ã –∫—Ä—É–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        val borderPaint = Paint().apply {
            color = Color.argb(100, 76, 175, 80) // –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
            style = Paint.Style.STROKE
            strokeWidth = 2f
            isAntiAlias = true
        }

        val screenCenter = Point()
        projection?.toPixels(center, screenCenter)

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç—Ä—ã –≤ –ø–∏–∫—Å–µ–ª–∏ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ –¥–ª—è –∑—É–º–∞ 14)
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        val pixelRadius = (accuracyMeters / 10).coerceAtMost(200f)

        // –†–∏—Å—É–µ–º –∑–∞–ª–∏–≤–∫—É –∫—Ä—É–≥–∞
        canvas?.drawCircle(
            screenCenter.x.toFloat(),
            screenCenter.y.toFloat(),
            pixelRadius,
            accuracyPaint
        )

        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∫—Ä—É–≥–∞
        canvas?.drawCircle(
            screenCenter.x.toFloat(),
            screenCenter.y.toFloat(),
            pixelRadius,
            borderPaint
        )
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–†–ö–ï–†–ê–ú–ò ===

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –º–∞—Ä–∫–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è—è overlay –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
     */
    fun clearRoute(mapView: MapView) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º location overlay –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            val locationOverlay =
                mapView.overlays.filterIsInstance<MyLocationNewOverlay>().firstOrNull()

            // –û—á–∏—â–∞–µ–º –≤—Å–µ overlays
            mapView.overlayManager.clear()

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º location overlay –æ–±—Ä–∞—Ç–Ω–æ
            locationOverlay?.let { mapView.overlays.add(it) }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            mapView.invalidate()
            markerCount = 0

            Log.d(TAG, "üßπ –ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω, location overlay —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: ${e.message}")
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
     *
     * @param mapView –∫–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –º–∞—Ä–∫–µ—Ä–∞
     * @param latitude —à–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏
     * @param longitude –¥–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @return –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
     */
    fun createGreenMarker(
        mapView: MapView,
        latitude: Double,
        longitude: Double,
        title: String = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
    ): Marker {
        return Marker(mapView).apply {
            position = GeoPoint(latitude, longitude)
            setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)
            this.title = title

            // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–µ–ª–µ–Ω—É—é –∏–∫–æ–Ω–∫—É
            try {
                val drawable = ContextCompat.getDrawable(
                    mapView.context,
                    android.R.drawable.ic_menu_mylocation
                )?.mutate() // mutate() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞

                drawable?.let {
                    // –û–∫—Ä–∞—à–∏–≤–∞–µ–º –≤ –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                    it.setTint(
                        ContextCompat.getColor(
                            mapView.context,
                            android.R.color.holo_green_dark
                        )
                    )
                    setIcon(it)
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–µ–ª–µ–Ω—É—é –∏–∫–æ–Ω–∫—É: ${e.message}")
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏–∫–æ–Ω–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

            // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            setInfoWindow(null)
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
     *
     * @param mapView –∫–∞—Ä—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
     * @param latitude —à–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏
     * @param longitude –¥–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ä–∫–µ—Ä–∞
     * @param snippet –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     * @return true –µ—Å–ª–∏ –º–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
     */
    fun addMarker(
        mapView: MapView,
        latitude: Double,
        longitude: Double,
        title: String = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        snippet: String? = null
    ): Boolean {
        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if (markerCount >= MAX_MARKERS) {
                removeOldestMarker(mapView)
            }

            // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä
            val marker = createGreenMarker(mapView, latitude, longitude, title).apply {
                this.snippet = snippet
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            mapView.overlays.add(marker)
            mapView.invalidate()
            markerCount++

            Log.d(TAG, "üìç –ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: $title ($latitude, $longitude)")
            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞: ${e.message}")
            false
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –ø–æ–¥ –Ω–æ–≤—ã–µ
     */
    private fun removeOldestMarker(mapView: MapView) {
        val markers = mapView.overlays.filterIsInstance<Marker>()
        if (markers.isNotEmpty()) {
            mapView.overlays.remove(markers.first())
            markerCount--
            Log.d(TAG, "üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä (–ª–∏–º–∏—Ç: $MAX_MARKERS)")
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ô ===

    /**
     * –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun enableFollowLocationOverlay(mapView: MapView) {
        val overlay = mapView.overlays.filterIsInstance<MyLocationNewOverlay>().firstOrNull()
        overlay?.apply {
            enableFollowLocation()
            myLocation?.let { location ->
                mapView.controller.animateTo(location)
                Log.d(TAG, "üëÅÔ∏è –í–∫–ª—é—á–µ–Ω–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º")
            }
        } ?: Log.w(TAG, "‚ö†Ô∏è Location overlay –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    }

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
     */
    fun disableFollowLocationOverlay(mapView: MapView) {
        val overlay = mapView.overlays.filterIsInstance<MyLocationNewOverlay>().firstOrNull()
        overlay?.disableFollowLocation()
        Log.d(TAG, "üëÅÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º")
    }

    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
     *
     * @param mapView –∫–∞—Ä—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param latitude —à–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param longitude –¥–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞
     * @param zoom —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DEFAULT_ZOOM)
     */
    fun centerMapOn(
        mapView: MapView,
        latitude: Double,
        longitude: Double,
        zoom: Double = DEFAULT_ZOOM
    ) {
        try {
            val point = GeoPoint(latitude, longitude)
            mapView.controller.setZoom(zoom)
            mapView.controller.animateTo(point) // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            Log.d(TAG, "üéØ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: $latitude, $longitude (–∑—É–º: $zoom)")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: ${e.message}")
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
     *
     * @param mapView –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞
     * @return –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    fun getMapCenter(mapView: MapView): GeoPoint? {
        return try {
            mapView.mapCenter as? GeoPoint
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã: ${e.message}")
            null
        }
    }

    // === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===

    /**
     * –£–¥–∞–ª—è–µ—Ç location overlay —Å –∫–∞—Ä—Ç—ã –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    private fun cleanupLocationOverlay(mapView: MapView) {
        myLocationOverlay?.let { overlay ->
            mapView.overlays.remove(overlay)
            overlay.disableMyLocation()
            overlay.disableFollowLocation()
        }
        myLocationOverlay = null
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç callback
     */
    fun disableLocationUpdates(context: Context) {
        try {
            val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)
            locationCallback?.let { callback ->
                fusedLocationClient.removeLocationUpdates(callback)
                Log.d(TAG, "üõë GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            }
            locationCallback = null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${e.message}")
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun cleanup(context: Context) {
        try {
            Log.d(TAG, "üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É MapModule...")

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            disableLocationUpdates(context)

            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã
            activeMapViews.values.forEach { mapView ->
                try {
                    cleanupLocationOverlay(mapView)
                    mapView.overlays.clear()
                    mapView.onDetach()
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç—ã: ${e.message}")
                }
            }
            activeMapViews.clear()

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            myLocationOverlay = null
            markerCount = 0
            lastBearing = 0f
            isInitialized = false

            Log.d(TAG, "‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã MapModule —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${e.message}")
        }
    }

    // === LIFECYCLE –ú–ï–¢–û–î–´ ===

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ lifecycle –≤–ª–∞–¥–µ–ª—å—Ü–∞
     */
    override fun onDestroy(owner: LifecycleOwner) {
        Log.d(TAG, "üîÑ Lifecycle onDestroy - –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã MapModule")

        // –í lifecycle –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ context, –ø–æ—ç—Ç–æ–º—É –æ—á–∏—â–∞–µ–º —á—Ç–æ –º–æ–∂–µ–º
        activeMapViews.values.forEach { mapView ->
            try {
                mapView.overlays.clear()
                mapView.onDetach()
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç—ã –≤ lifecycle: ${e.message}")
            }
        }
        activeMapViews.clear()
        myLocationOverlay = null
        markerCount = 0
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
     *
     * @return –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
     */
    fun getMapStatistics(): MapStatistics {
        return MapStatistics(
            activeMapViewsCount = activeMapViews.size,
            totalMarkersCount = markerCount,
            isLocationOverlayActive = myLocationOverlay != null,
            isLocationUpdatesActive = locationCallback != null,
            lastBearing = lastBearing,
            isInitialized = isInitialized
        )
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è
     *
     * @return true –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
     */
    fun isModuleHealthy(): Boolean {
        return isInitialized && (activeMapViews.isNotEmpty() || myLocationOverlay != null)
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥—É–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fun getModuleStatus(): String {
        val stats = getMapStatistics()
        return "MapModule: ${if (stats.isInitialized) "‚úÖ" else "‚ùå"} | " +
                "–ö–∞—Ä—Ç: ${stats.activeMapViewsCount} | " +
                "–ú–∞—Ä–∫–µ—Ä–æ–≤: ${stats.totalMarkersCount} | " +
                "GPS: ${if (stats.isLocationUpdatesActive) "üü¢" else "üî¥"}"
    }

    // === DATA CLASSES ===

    /**
     * –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –∫–∞—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
     *
     * @param activeMapViewsCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–∞—Ä—Ç
     * @param totalMarkersCount –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∞—Ö
     * @param isLocationOverlayActive –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ overlay –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
     * @param isLocationUpdatesActive –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param lastBearing –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     * @param isInitialized –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å
     */
    data class MapStatistics(
        val activeMapViewsCount: Int,
        val totalMarkersCount: Int,
        val isLocationOverlayActive: Boolean,
        val isLocationUpdatesActive: Boolean,
        val lastBearing: Float,
        val isInitialized: Boolean
    ) {
        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
         */
        fun getSummary(): String {
            val gpsStatus = if (isLocationUpdatesActive) "ON" else "OFF"
            return "–ö–∞—Ä—Ç: $activeMapViewsCount | –ú–∞—Ä–∫–µ—Ä–æ–≤: $totalMarkersCount | GPS: $gpsStatus"
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥—É–ª—è
         */
        fun getDetailedInfo(): String {
            return buildString {
                appendLine("üó∫Ô∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MapModule:")
                appendLine("‚Ä¢ –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${if (isInitialized) "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" else "‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}")
                appendLine("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç: $activeMapViewsCount")
                appendLine("‚Ä¢ –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö: $totalMarkersCount / $MAX_MARKERS")
                appendLine("‚Ä¢ Location overlay: ${if (isLocationOverlayActive) "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}")
                appendLine("‚Ä¢ GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${if (isLocationUpdatesActive) "üü¢ –í–∫–ª—é—á–µ–Ω—ã" else "üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã"}")
                appendLine(
                    "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${lastBearing.toInt()}¬∞ ${
                        getCompassDirection(
                            lastBearing
                        )
                    }"
                )
                appendLine("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${getMemoryUsageEstimate()}")
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ —Ä–∞–±–æ—Ç–µ –º–æ–¥—É–ª—è
         */
        fun hasIssues(): Boolean {
            return !isInitialized ||
                    (activeMapViewsCount == 0 && isLocationOverlayActive) ||
                    totalMarkersCount > MAX_MARKERS
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
         */
        fun getIssues(): List<String> {
            val issues = mutableListOf<String>()

            if (!isInitialized) {
                issues.add("–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            }

            if (activeMapViewsCount == 0 && isLocationOverlayActive) {
                issues.add("Location overlay –∞–∫—Ç–∏–≤–µ–Ω –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç")
            }

            if (totalMarkersCount > MAX_MARKERS) {
                issues.add("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤")
            }

            if (activeMapViewsCount > 5) {
                issues.add("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç (–≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏)")
            }

            return issues
        }

        /**
         * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞
         */
        private fun getCompassDirection(bearing: Float): String {
            return when {
                bearing < 0 -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                bearing < 22.5 || bearing >= 337.5 -> "–°"   // –°–µ–≤–µ—Ä
                bearing < 67.5 -> "–°–í"   // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
                bearing < 112.5 -> "–í"   // –í–æ—Å—Ç–æ–∫
                bearing < 157.5 -> "–Æ–í"  // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
                bearing < 202.5 -> "–Æ"   // –Æ–≥
                bearing < 247.5 -> "–Æ–ó"  // –Æ–≥–æ-–∑–∞–ø–∞–¥
                bearing < 292.5 -> "–ó"   // –ó–∞–ø–∞–¥
                bearing < 337.5 -> "–°–ó"  // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
                else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        }

        /**
         * –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –º–æ–¥—É–ª–µ–º
         */
        private fun getMemoryUsageEstimate(): String {
            val mapMemory = activeMapViewsCount * 2 // ~2MB –Ω–∞ –∫–∞—Ä—Ç—É
            val markerMemory = totalMarkersCount * 0.01 // ~10KB –Ω–∞ –º–∞—Ä–∫–µ—Ä
            val totalMB = mapMemory + markerMemory

            return when {
                totalMB < 1 -> "< 1 –ú–ë"
                totalMB < 10 -> String.format("%.1f –ú–ë", totalMB)
                else -> "${totalMB.toInt()} –ú–ë"
            }
        }
    }

    /**
     * Enum –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
     */
    enum class MapEventType {
        MAP_INITIALIZED,
        LOCATION_OVERLAY_ADDED,
        MARKER_ADDED,
        MARKER_REMOVED,
        ROUTE_CLEARED,
        GPS_ENABLED,
        GPS_DISABLED,
        MODULE_CLEANUP
    }

    /**
     * Data class –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã (–¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
     */
    data class MapEvent(
        val type: MapEventType,
        val timestamp: Long = System.currentTimeMillis(),
        val details: String = "",
        val coordinates: GeoPoint? = null
    ) {
        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
         */
        fun getDescription(): String {
            val coordsInfo = coordinates?.let { " (${it.latitude}, ${it.longitude})" } ?: ""
            return "${type.name}$coordsInfo: $details"
        }
    }
}