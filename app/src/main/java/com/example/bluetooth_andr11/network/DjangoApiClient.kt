package com.example.bluetooth_andr11.network

import android.content.Context
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.io.OutputStreamWriter
import java.net.HttpURLConnection
import java.net.URL

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django —Å–µ—Ä–≤–µ—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ–±-–ø–∞–Ω–µ–ª—å—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
class DjangoApiClient(private val context: Context) {

    companion object {
        private const val TAG = "DjangoApiClient"

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        private const val SERVER_IP = "192.168.0.230"
        private const val SERVER_PORT = "8000"
        private const val BASE_URL = "http://$SERVER_IP:$SERVER_PORT"

        // TODO –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å):
        // private const val BASE_URL = "https://yourdomain.com"

        // –¢–æ–∫–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥)
        private const val COMPANY_TOKEN = "46e37066dad427209d8ee48c717c8316563fc96d"

        // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å—É–º–∫–∏
        private const val BAG_SERIAL = "SB001236"

        // –¢–∞–π–º–∞—É—Ç—ã
        private const val CONNECT_TIMEOUT = 10000 // 10 —Å–µ–∫—É–Ω–¥
        private const val READ_TIMEOUT = 15000    // 15 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ Django —Å–µ—Ä–≤–µ—Ä
     * @param sensorData CSV —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–æ–≤
     * @param buttonStates —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param gpsLat —à–∏—Ä–æ—Ç–∞ GPS
     * @param gpsLon –¥–æ–ª–≥–æ—Ç–∞ GPS
     * @param gpsAccuracy —Ç–æ—á–Ω–æ—Å—Ç—å GPS
     * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
     */
    suspend fun sendSensorData(
        sensorData: String,
        buttonStates: Map<String, Boolean> = emptyMap(),
        gpsLat: Double? = null,
        gpsLon: Double? = null,
        gpsAccuracy: Float? = null
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: $sensorData")

            // –°–æ–∑–¥–∞–µ–º JSON payload
            val jsonData = JSONObject().apply {
                put("bag_serial", BAG_SERIAL)
                put("sensor_data", sensorData)

                // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                if (buttonStates.isNotEmpty()) {
                    put("button_states", JSONObject().apply {
                        buttonStates.forEach { (key, value) ->
                            put(key, value)
                        }
                    })
                }

                // GPS –¥–∞–Ω–Ω—ã–µ
                if (gpsLat != null && gpsLon != null) {
                    put("gps_data", JSONObject().apply {
                        put("latitude", gpsLat)
                        put("longitude", gpsLon)
                        put("accuracy", gpsAccuracy ?: 0.0)
                    })
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP POST –∑–∞–ø—Ä–æ—Å
            val success = sendHttpRequest(jsonData.toString())

            if (success) {
                Log.d(TAG, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ Django")
            } else {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django")
            }

            success

        } catch (e: Exception) {
            Log.e(TAG, "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
            false
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP POST –∑–∞–ø—Ä–æ—Å –∫ Django API
     * @param jsonData JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
     * @return true –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
     */
    private suspend fun sendHttpRequest(jsonData: String): Boolean = withContext(Dispatchers.IO) {
        var connection: HttpURLConnection? = null

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            val url = URL("$BASE_URL/api/sensor-data/")
            connection = url.openConnection() as HttpURLConnection

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            connection.apply {
                requestMethod = "POST"
                doOutput = true
                doInput = true
                setRequestProperty("Content-Type", "application/json")
                setRequestProperty("Authorization", "Bearer $COMPANY_TOKEN")
                connectTimeout = CONNECT_TIMEOUT
                readTimeout = READ_TIMEOUT
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            OutputStreamWriter(connection.outputStream).use { writer ->
                writer.write(jsonData)
                writer.flush()
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            val responseCode = connection.responseCode

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                val response = connection.inputStream.bufferedReader().use { it.readText() }
                Log.d(TAG, "üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response")
                return@withContext true
            } else {
                // –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É
                val errorResponse = connection.errorStream?.bufferedReader()?.use { it.readText() }
                Log.e(TAG, "‚ùå HTTP –æ—à–∏–±–∫–∞ $responseCode: $errorResponse")
                return@withContext false
            }

        } catch (e: Exception) {
            Log.e(TAG, "üí• –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ${e.message}")
            return@withContext false
        } finally {
            connection?.disconnect()
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Django —Å–µ—Ä–≤–µ—Ä–∞
     * @return true –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
     */
    suspend fun checkServerHealth(): Boolean = withContext(Dispatchers.IO) {
        try {
            val url = URL("$BASE_URL/api/dashboard/")
            val connection = url.openConnection() as HttpURLConnection

            connection.apply {
                requestMethod = "GET"
                connectTimeout = 5000
                readTimeout = 5000
                setRequestProperty("Authorization", "Bearer $COMPANY_TOKEN")
            }

            val responseCode = connection.responseCode
            connection.disconnect()

            val isHealthy = responseCode == HttpURLConnection.HTTP_OK
            Log.d(TAG, if (isHealthy) "‚úÖ Django —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω" else "‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            isHealthy

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}")
            false
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    fun getConfigInfo(): String {
        return """
            Django API Configuration:
            - Server: $BASE_URL
            - Bag Serial: $BAG_SERIAL
            - Token: ${COMPANY_TOKEN.take(10)}...
            - Timeout: ${CONNECT_TIMEOUT}ms
        """.trimIndent()
    }
}