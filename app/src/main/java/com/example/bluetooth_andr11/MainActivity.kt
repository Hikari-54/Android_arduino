package com.example.bluetooth_andr11

import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.core.app.ActivityCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.bluetooth_andr11.init.AppInitializer
import com.example.bluetooth_andr11.ui.LogScreen
import com.example.bluetooth_andr11.ui.MainScreen
import com.example.bluetooth_andr11.ui.control.AppTopBar
import com.example.bluetooth_andr11.ui.debug.DebugControlPanel
import com.example.bluetooth_andr11.ui.location.LocationRequiredScreen
import com.example.bluetooth_andr11.ui.location.isLocationEnabled
import com.example.bluetooth_andr11.ui.state.UIStateManager
import com.example.bluetooth_andr11.ui.theme.Bluetooth_andr11Theme
import org.osmdroid.config.Configuration
import java.io.File

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞–≤–æ—á–Ω–æ–π —Å—É–º–∫–∏.
 *
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
 * - AppInitializer - –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * - UIStateManager - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 * - DataManager - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Arduino —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * - –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è MainActivity - —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ lifecycle
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ MainActivity:
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ lifecycle —Å–æ–±—ã—Ç–∏–π –∏ cleanup —Ä–µ—Å—É—Ä—Å–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ navigation –∏ –æ–±—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π UI
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ PermissionHelper
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ):
 * - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ UIStateManager
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 * - Comprehensive error handling –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
 * - Modular architecture —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª:
 * 1. onCreate() ‚Üí AppInitializer.initialize() ‚Üí –≤—Å—ë –≥–æ—Ç–æ–≤–æ
 * 2. UI updates ‚Üí UIStateManager ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Compose
 * 3. Data flow ‚Üí DataManager ‚Üí UIStateManager ‚Üí UI recomposition
 * 4. onDestroy() ‚Üí AppInitializer.cleanup() ‚Üí –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
 */
class MainActivity : ComponentActivity() {

    // === CORE –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===

    /** –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    private lateinit var appInitializer: AppInitializer

    /** –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö UI —Å–æ—Å—Ç–æ—è–Ω–∏–π */
    private lateinit var uiStateManager: UIStateManager

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–ó–†–ï–®–ï–ù–ò–ô ===

    /**
     * –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π launcher –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–∏–∫–∏ –≤ AppInitializer.
     */
    private val requestPermissionsLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            val allGranted = permissions.all { it.value }
            uiStateManager.updateAllPermissionsGranted(allGranted)

            if (allGranted) {
                Toast.makeText(this, "–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                if (uiStateManager.isLocationServiceEnabled.value) {
                    appInitializer.initializeAppFeatures(uiStateManager.coordinates)
                }
            } else {
                handlePermissionsDenial(permissions)
            }
        }

    // === LIFECYCLE –ú–ï–¢–û–î–´ ===

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        initializeComponents()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI —Å reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        setContent {
            Bluetooth_andr11Theme {
                if (!uiStateManager.isLocationServiceEnabled.value) {
                    LocationRequiredScreen(
                        onLocationEnabled = ::handleLocationEnabled
                    )
                } else {
                    MainAppContent()
                }
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cleanup()
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã.
     *
     * –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥:
     * 1. UIStateManager - —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö reactive —Å–æ—Å—Ç–æ—è–Ω–∏–π
     * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ GPS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     * 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OSMDroid –¥–ª—è –∫–∞—Ä—Ç
     * 4. AppInitializer - –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    private fun initializeComponents() {
        try {
            Log.d(TAG, "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            // 1. –°–æ–∑–¥–∞—ë–º UIStateManager –¥–ª—è –≤—Å–µ—Ö reactive —Å–æ—Å—Ç–æ—è–Ω–∏–π
            uiStateManager = UIStateManager()

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º GPS –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            val gpsEnabled = isLocationEnabled(this)
            uiStateManager.updateLocationServiceEnabled(gpsEnabled)

            // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OSMDroid –∫—ç—à –¥–ª—è –∫–∞—Ä—Ç
            setupCachePath()

            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ AppInitializer
            appInitializer = AppInitializer(this, requestPermissionsLauncher)
            val success = appInitializer.initialize()

            if (success) {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å reactive –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                setupMonitoring()

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                checkPermissionsAndActivateFeatures()

                // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ DEBUG —Ä–µ–∂–∏–º–µ
                if (BuildConfig.DEBUG) {
                    appInitializer.autoStartSimulationIfNeeded()
                }

                Log.d(TAG, "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
            } else {
                showInitializationError()
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}")
            showInitializationError()
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏–π.
     */
    private fun setupMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bluetooth —Å reactive –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        appInitializer.setupBluetoothMonitoring(
            bluetoothEnabledState = uiStateManager.isBluetoothEnabled,
            deviceConnectedState = uiStateManager.isDeviceConnected,
            onDataReceived = ::handleReceivedData
        )

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPS —Å reactive –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        appInitializer.setupGpsMonitoring(
            locationEnabledState = uiStateManager.isLocationServiceEnabled,
            onLocationEnabledChanged = ::handleGpsStateChange
        )

        Log.d(TAG, "üì° Reactive –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ AppInitializer.
     */
    private fun checkPermissionsAndActivateFeatures() {
        appInitializer.checkInitialPermissions { hasAllPermissions ->
            uiStateManager.updateAllPermissionsGranted(hasAllPermissions)

            if (hasAllPermissions && uiStateManager.isLocationServiceEnabled.value) {
                appInitializer.initializeAppFeatures(uiStateManager.coordinates)
            }
        }
    }

    // === UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —á–∏—Å—Ç–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
     */
    @Composable
    private fun MainAppContent() {
        val navController = rememberNavController()

        Scaffold(
            topBar = {
                AppTopBar(
                    batteryLevel = uiStateManager.batteryPercent.value,
                    isBluetoothEnabled = uiStateManager.isBluetoothEnabled.value,
                    isDeviceConnected = uiStateManager.isDeviceConnected.value,
                    allPermissionsGranted = uiStateManager.allPermissionsGranted.value,
                    onPermissionsClick = ::handlePermissionsIconClick,
                    onBluetoothClick = ::handleConnectToDevice,
                    onDebugClick = {
                        uiStateManager.toggleDebugPanel()
                        Log.d(TAG, "Debug panel toggled: ${uiStateManager.showDebugPanel.value}")
                    },
                    showDebugButton = BuildConfig.DEBUG,
                    onTitleClick = {
                        navController.navigate("main_screen") {
                            popUpTo(navController.graph.startDestinationId) { inclusive = false }
                            launchSingleTop = true
                        }
                        if (uiStateManager.showDebugPanel.value) {
                            uiStateManager.toggleDebugPanel()
                        }
                    },
                    bluetoothHelper = appInitializer.bluetoothHelper
                )
            }
        ) { innerPadding ->
            NavHost(
                navController = navController,
                startDestination = "main_screen",
            ) {
                composable("main_screen") {
                    MainScreen(
                        modifier = Modifier.padding(innerPadding),
                        onCommandSend = ::sendCommandToDevice,
                        temp1 = uiStateManager.temp1.value,
                        temp2 = uiStateManager.temp2.value,
                        hallState = uiStateManager.hallState.value,
                        acc = uiStateManager.accelerometerData.value,
                        onNavigateToLogs = { navController.navigate("log_screen") },
                        bluetoothHelper = appInitializer.bluetoothHelper,
                        locationManager = appInitializer.enhancedLocationManager,
                    )
                }

                composable("log_screen") {
                    LogScreen(navController = navController)
                }
            }

            // –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ —Å reactive —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            if (uiStateManager.showDebugPanel.value && BuildConfig.DEBUG) {
                DebugControlPanel(
                    bluetoothHelper = appInitializer.bluetoothHelper,
                    locationManager = appInitializer.enhancedLocationManager
                )
            }
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ARDUINO ===

    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataManager –∏ UIStateManager.
     *
     * –í—Å—è —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö!
     */
    fun handleReceivedData(data: String) {
        Log.d(TAG, "üî¥ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: '$data'")

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ DataManager
        val uiStates = uiStateManager.createDataManagerUIStates()
        appInitializer.dataManager.processArduinoData(data, uiStates)
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò –°–û–ë–´–¢–ò–ô ===

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ Arduino —á–µ—Ä–µ–∑ BluetoothHelper.
     */
    private fun sendCommandToDevice(command: String) {
        Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É: $command")
        appInitializer.bluetoothHelper.sendCommand(command)
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.
     */
    private fun handlePermissionsIconClick() {
        if (!uiStateManager.allPermissionsGranted.value) {
            appInitializer.permissionHelper.requestPermissions()
        } else {
            Toast.makeText(this, "–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ Bluetooth –∏–∫–æ–Ω–∫–µ.
     */
    private fun handleConnectToDevice() {
        appInitializer.bluetoothHelper.showDeviceSelectionDialog(this) { device ->
            appInitializer.bluetoothHelper.connectToDevice(device) { success, message ->
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                uiStateManager.updateDeviceConnected(success)
                if (success) {
                    appInitializer.bluetoothHelper.listenForData { data ->
                        handleReceivedData(data)
                    }
                }
            }
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–û–°–¢–û–Ø–ù–ò–Ø ===

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è GPS —Å–æ—Å—Ç–æ—è–Ω–∏—è.
     */
    private fun handleGpsStateChange(isEnabled: Boolean) {
        if (isEnabled && uiStateManager.allPermissionsGranted.value) {
            appInitializer.initializeAppFeatures(uiStateManager.coordinates)
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ GPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     */
    private fun handleLocationEnabled() {
        val actualState = appInitializer.enhancedLocationManager.forceLocationStatusCheck()
        uiStateManager.updateLocationServiceEnabled(actualState)

        if (actualState && uiStateManager.allPermissionsGranted.value) {
            appInitializer.initializeAppFeatures(uiStateManager.coordinates)
        }

        Log.d(TAG, "‚úÖ GPS –ø—Ä–æ–≤–µ—Ä–µ–Ω: $actualState")
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô ===

    /**
     * –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö.
     */
    private fun handlePermissionsDenial(permissions: Map<String, Boolean>) {
        val permanentlyDenied = permissions.filter { permission ->
            !permission.value && !ActivityCompat.shouldShowRequestPermissionRationale(
                this,
                permission.key
            )
        }

        if (permanentlyDenied.isNotEmpty()) {
            Toast.makeText(
                this,
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                Toast.LENGTH_LONG
            ).show()
            redirectToAppSettings()
        } else {
            appInitializer.permissionHelper.requestPermissions()
        }
    }

    /**
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     */
    private fun redirectToAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts("package", packageName, null)
        }
        startActivity(intent)
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.
     */
    private fun showInitializationError() {
        Toast.makeText(
            this,
            "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            Toast.LENGTH_LONG
        ).show()

        // –í DEBUG —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        if (BuildConfig.DEBUG && ::appInitializer.isInitialized) {
            Log.e(TAG, "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===")
            Log.e(TAG, appInitializer.getInitializationStatus().getDetailedReport())
            Log.e(TAG, "=========================================")
        }
    }

    // === –ù–ê–°–¢–†–û–ô–ö–ê OSMDROID ===

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫—ç—à OpenStreetMap –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–∞—Ä—Ç.
     */
    private fun setupCachePath() {
        val context = applicationContext
        val cacheDir = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            File(context.filesDir, "osmdroid")
        } else {
            File(context.getExternalFilesDir(null), "osmdroid")
        }

        val config = Configuration.getInstance()
        config.osmdroidBasePath = cacheDir
        config.osmdroidTileCache = File(cacheDir, "cache")
        config.userAgentValue = packageName

        Log.d(TAG, "üó∫Ô∏è OSMDroid –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${cacheDir.absolutePath}")
    }

    // === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===

    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
     * –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
     */
    private fun cleanup() {
        try {
            Log.d(TAG, "üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É MainActivity...")

            // –û—á–∏—â–∞–µ–º AppInitializer (–≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
            if (::appInitializer.isInitialized) {
                appInitializer.cleanup()
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (::uiStateManager.isInitialized) {
                uiStateManager.resetAllStates()
            }

            Log.d(TAG, "‚úÖ MainActivity —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${e.message}")
        }
    }

    // === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
     */
    fun getSystemStatus(): String {
        if (!::appInitializer.isInitialized || !::uiStateManager.isInitialized) {
            return "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        }

        return buildString {
            appendLine("=== SYSTEM STATUS ===")
            appendLine("UIStateManager: ${uiStateManager.getStatusReport()}")
            appendLine("AppInitializer: ${appInitializer.getStatusReport()}")
            appendLine("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: ${uiStateManager.isSystemReady()}")
            appendLine("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã: ${uiStateManager.hasActiveData()}")
            appendLine("===================")
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è troubleshooting.
     */
    fun getDetailedDiagnostics(): String {
        if (!::appInitializer.isInitialized || !::uiStateManager.isInitialized) {
            return "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        }

        return buildString {
            appendLine(getSystemStatus())
            appendLine()
            appendLine("=== DETAILED DIAGNOSTICS ===")
            appendLine()
            appendLine("UI STATES:")
            appendLine(uiStateManager.getDetailedStateInfo())
            appendLine()
            appendLine("INITIALIZATION:")
            appendLine(appInitializer.getInitializationStatus().getDetailedReport())
            appendLine()
            appendLine("DATA MANAGER:")
            appendLine(appInitializer.dataManager.getStatusReport())
            appendLine()
            appendLine("LOCATION MANAGER:")
            appendLine(appInitializer.enhancedLocationManager.getStatusSummary())
            appendLine()
            appendLine("BLUETOOTH HELPER:")
            appendLine(appInitializer.bluetoothHelper.getConnectionStatistics())
            appendLine()
            appendLine("TEMPERATURE MONITOR:")
            appendLine(appInitializer.temperatureMonitor.getStatusReport())
            appendLine("=============================")
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
     */
    fun isSystemReady(): Boolean {
        return ::appInitializer.isInitialized &&
                ::uiStateManager.isInitialized &&
                appInitializer.isSystemReady() &&
                uiStateManager.isSystemReady()
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã.
     */
    fun getSystemRecommendations(): List<String> {
        val recommendations = mutableListOf<String>()

        if (!::appInitializer.isInitialized) {
            recommendations.add("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return recommendations
        }

        if (!uiStateManager.allPermissionsGranted.value) {
            recommendations.add("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        }

        if (!uiStateManager.isLocationServiceEnabled.value) {
            recommendations.add("–í–∫–ª—é—á–∏—Ç–µ GPS –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        }

        if (!uiStateManager.isBluetoothEnabled.value) {
            recommendations.add("–í–∫–ª—é—á–∏—Ç–µ Bluetooth")
        }

        if (!uiStateManager.isDeviceConnected.value) {
            recommendations.add("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        }

        if (!uiStateManager.hasActiveData()) {
            recommendations.add("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino")
        }

        if (recommendations.isEmpty()) {
            recommendations.add("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        }

        return recommendations
    }

    companion object {
        private const val TAG = "MainActivity"
    }
}