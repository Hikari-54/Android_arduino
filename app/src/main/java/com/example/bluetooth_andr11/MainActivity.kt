package com.example.bluetooth_andr11

import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Modifier
import androidx.core.app.ActivityCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.LocationManager
import com.example.bluetooth_andr11.log.LogModule
import com.example.bluetooth_andr11.permissions.PermissionHelper
import com.example.bluetooth_andr11.ui.LogScreen
import com.example.bluetooth_andr11.ui.MainScreen
import com.example.bluetooth_andr11.ui.control.AppTopBar
import com.example.bluetooth_andr11.ui.debug.DebugControlPanel
import com.example.bluetooth_andr11.ui.theme.Bluetooth_andr11Theme
import com.google.android.gms.location.LocationServices
import org.osmdroid.config.Configuration
import org.osmdroid.library.BuildConfig
import java.io.File

class MainActivity : ComponentActivity() {

    private lateinit var bluetoothHelper: BluetoothHelper
    private lateinit var permissionHelper: PermissionHelper
    private lateinit var locationManager: LocationManager

    private val isBluetoothEnabled = mutableStateOf(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞
    private val isDeviceConnected = mutableStateOf(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    private val allPermissionsGranted = mutableStateOf(false)
    private val batteryPercent = mutableStateOf(0) // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ
    private val isBluetoothConnected = mutableStateOf(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Bluetooth
    private val coordinates = mutableStateOf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    private val temp1 = mutableStateOf("--") // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 1
    private val temp2 = mutableStateOf("--") // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 2
    private val hallState = mutableStateOf("--") // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞
    private val functionState = mutableStateOf("--") // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private val accelerometerData = mutableStateOf("--") // –î–∞–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞

    private var lastLoggedBatteryLevel = -1

    private var lastUpperLoggedTemp: Float? = null
    private var lastLowerLoggedTemp: Float? = null
//    private var upperTrendUp = true
//    private var lowerTrendDown = true

    private var lastLoggedBagState: String? = null

    private val requestPermissionsLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            val allGranted = permissions.all { it.value }
            allPermissionsGranted.value = allGranted

            if (allGranted) {
                Toast.makeText(this, "–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                initializeAppFeatures()
            } else {
                handlePermissionsDenial(permissions)
            }
        }

    // üî• –ù–û–í–û–ï: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏
    private val showDebugPanel = mutableStateOf(false) // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∞ –¥–ª—è –∫–∞—Ä—Ç
        setupCachePath()

        permissionHelper = PermissionHelper(this, requestPermissionsLauncher)
        locationManager = LocationManager(
            context = this,
            fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        )

        bluetoothHelper = BluetoothHelper(this)
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        bluetoothHelper.monitorBluetoothStatus(this, locationManager) { isEnabled, isConnected ->
            isBluetoothEnabled.value = isEnabled
            isDeviceConnected.value = isConnected

            if (isConnected) {
                bluetoothHelper.listenForData { data ->
                    handleReceivedData(data)
                }
            } else if (isEnabled && !isConnected) {
                bluetoothHelper.showDeviceSelectionDialog(this) { device ->
                    bluetoothHelper.connectToDevice(device) { success, message ->
                        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                        isDeviceConnected.value = success
                    }
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        allPermissionsGranted.value = permissionHelper.hasAllPermissions()
        if (allPermissionsGranted.value) {
            initializeAppFeatures()
        } else {
            permissionHelper.requestPermissions()
        }

        // –≠–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Arduino
        //  simulateTemperatureChanges(this, locationManager, bluetoothHelper)
        //  LogModule.logEventWithLocation(this, bluetoothHelper, locationManager, "–°—É–º–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        locationManager.forceLocationUpdate()

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ GPS
        if (!locationManager.isLocationAvailable()) {
            Toast.makeText(this, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...", Toast.LENGTH_SHORT).show()
        }

        LogModule.logEvent(this, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

        // üî• –î–û–ë–ê–í–¨–¢–ï –≠–¢–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò (–≤—Ä–µ–º–µ–Ω–Ω–æ):
        Log.d("MainActivity", "DEBUG —Ä–µ–∂–∏–º: ${BuildConfig.DEBUG}")
        Log.d("MainActivity", "showDebugPanel: ${showDebugPanel.value}")

        setContent {
            Bluetooth_andr11Theme {
                val navController = rememberNavController()

                Scaffold(topBar = {
                    AppTopBar(
                        batteryLevel = batteryPercent.value,
                        isBluetoothEnabled = isBluetoothEnabled.value,
                        isDeviceConnected = isDeviceConnected.value,
//                        bluetoothHelper = bluetoothHelper,
                        allPermissionsGranted = allPermissionsGranted.value,
                        onPermissionsClick = ::handlePermissionsIconClick,
                        onBluetoothClick = ::handleConnectToDevice,
                        onDebugClick = {
                            showDebugPanel.value = !showDebugPanel.value
                            Log.d("MainActivity", "Debug panel toggled: ${showDebugPanel.value}")
                        },
                        showDebugButton = true, // üî• –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤–∫–ª—é—á–∞—é—â–∏–π –æ—Ç–ª–∞–¥–∫—É
                        onTitleClick = {
                            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
                            navController.navigate("main_screen") {
                                // –û—á–∏—â–∞–µ–º –≤–µ—Å—å —Å—Ç–µ–∫ –∏ –¥–µ–ª–∞–µ–º main_screen –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
                                popUpTo(navController.graph.startDestinationId) {
                                    inclusive = false
                                }
                                // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
                                launchSingleTop = true
                            }

                            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                            showDebugPanel.value = false

                            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
//                            Log.d(
//                                "MainActivity",
//                                "–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫"
//                            )

                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º feedback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//                            Toast.makeText(this@MainActivity, "üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", Toast.LENGTH_SHORT)
//                                .show()
                        }
                    )
                }) { innerPadding ->
                    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
                    NavHost(
                        navController = navController,
                        startDestination = "main_screen",
//                        modifier = Modifier.padding(innerPadding)
                    ) {
                        composable("main_screen") {
                            MainScreen(
                                modifier = Modifier.padding(innerPadding),
                                onCommandSend = ::sendCommandToDevice,
                                temp1 = temp1.value,
                                temp2 = temp2.value,
                                hallState = hallState.value,
                                acc = accelerometerData.value,
                                onNavigateToLogs = { navController.navigate("log_screen") },
                                bluetoothHelper = bluetoothHelper,
                                locationManager = locationManager,
                            )
                        }

                        composable("log_screen") {
                            LogScreen(navController = navController)
                        }
                    }

                    // üî• –ù–û–í–û–ï: –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
                    if (showDebugPanel.value) {
                        DebugControlPanel(
                            bluetoothHelper = bluetoothHelper
                        )
                    }
                }
            }
        }
    }

    // üî• –ù–û–í–û–ï: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ debug —Ä–µ–∂–∏–º–µ
    private fun autoStartSimulationIfNeeded() {
        if (BuildConfig.DEBUG && !bluetoothHelper.isDeviceConnected) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            Handler(Looper.getMainLooper()).postDelayed({
                if (!bluetoothHelper.isDeviceConnected) {
                    bluetoothHelper.enableSimulationMode(true)
                    Toast.makeText(this, "üîß –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è Arduino", Toast.LENGTH_LONG).show()
                }
            }, 3000) // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        }
    }

    private fun initializeAppFeatures() {
        // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        locationManager.startLocationUpdates { newCoordinates ->
            coordinates.value = newCoordinates
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∞ –∫–∞—Ä—Ç
    private fun setupCachePath() {
        val context = applicationContext

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Android –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –∫—ç—à—É –∫–∞—Ä—Ç
        val cacheDir = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            File(context.filesDir, "osmdroid")
        } else {
            File(context.getExternalFilesDir(null), "osmdroid")
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç
        val config = Configuration.getInstance()
        config.osmdroidBasePath = cacheDir
        config.osmdroidTileCache = File(cacheDir, "cache")
        config.userAgentValue = packageName
    }

    private fun handlePermissionsDenial(permissions: Map<String, Boolean>) {
        val permanentlyDeniedPermissions = permissions.filter { permission ->
            !permission.value && !ActivityCompat.shouldShowRequestPermissionRationale(
                this, permission.key
            )
        }

        if (permanentlyDeniedPermissions.isNotEmpty()) {
            Toast.makeText(
                this,
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
                Toast.LENGTH_LONG
            ).show()
            redirectToAppSettings()
        } else {
            showPermissionsRationale()
        }
    }

    private fun handlePermissionsIconClick() {
        if (!allPermissionsGranted.value) {
            permissionHelper.requestPermissions()
        } else {
            Toast.makeText(this, "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT)
                .show()
        }
    }


    private fun showPermissionsRationale() {
        val missingPermissions = permissionHelper.getMissingPermissions()
        val shouldShowRationale = missingPermissions.any { permission ->
            ActivityCompat.shouldShowRequestPermissionRationale(this, permission)
        }

        if (shouldShowRationale) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            Toast.makeText(
                this,
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.",
                Toast.LENGTH_LONG
            ).show()
            permissionHelper.requestPermissions()
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–Ω–æ–≤–∞", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            Toast.makeText(
                this,
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é.",
                Toast.LENGTH_LONG
            ).show()
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            redirectToAppSettings()
        }
    }

    private fun redirectToAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts("package", packageName, null)
        }
        startActivity(intent)
    }

    private fun handleConnectToDevice() {
        bluetoothHelper.showDeviceSelectionDialog(this) { device ->
            bluetoothHelper.connectToDevice(device) { success, message ->
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                isBluetoothConnected.value = success
                if (success) {
                    bluetoothHelper.listenForData { data ->
                        handleReceivedData(data)
                    }
                }
            }
        }
    }

    fun handleReceivedData(data: String) {
        parseArduinoData(data)
    }

    private fun parseArduinoData(data: String) {
        try {
            val parts = data.split(",")
            if (parts.size == 6) {
                // –ü–∞—Ä—Å–∏–º –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
                val batteryValue = parts[0].trim().toIntOrNull() ?: -1

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                if (batteryValue in 0..100) {
                    batteryPercent.value = batteryValue
                } else {
                    Log.e("MainActivity", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏: $batteryValue")
                }

                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥–∞–º –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
                logBatteryThresholds(batteryValue)

                // –õ–æ–≥–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Arduino
                Log.d("ArduinoData", "–î–∞–Ω–Ω—ã–µ –æ—Ç –∞—Ä–¥—É–∏–Ω–æ: $data")

                // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "er"
                val upperTempString = parts[1].trim()
                val lowerTempString = parts[2].trim()

                val upperTemp = if (upperTempString == "er") {
                    Log.w("MainActivity", "–û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞")
                    null
                } else {
                    upperTempString.toFloatOrNull()
                }

                val lowerTemp = if (lowerTempString == "er") {
                    Log.w("MainActivity", "–û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞")
                    null
                } else {
                    lowerTempString.toFloatOrNull()
                }

                logTemperatureWithBoundaries(upperTemp, lowerTemp)

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–ª–∏ "–û—à–∏–±–∫–∞"
                temp1.value = when {
                    upperTempString == "er" -> "–û—à–∏–±–∫–∞"
                    upperTemp != null -> upperTemp.toString()
                    else -> temp1.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                }

                temp2.value = when {
                    lowerTempString == "er" -> "–û—à–∏–±–∫–∞"
                    lowerTemp != null -> lowerTemp.toString()
                    else -> temp2.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                }

                // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏
                val closedState = parts[3].trim()
                hallState.value = when (closedState) {
                    "1" -> {
                        logBagState("–°—É–º–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                        "–ó–∞–∫—Ä—ã—Ç"
                    }

                    "0" -> {
                        logBagState("–°—É–º–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                        "–û—Ç–∫—Ä—ã—Ç"
                    }

                    else -> {
                        Log.w("MainActivity", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞: $closedState")
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    }
                }

                // üî• –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å Arduino
                val arduinoState = parts[4].trim().toIntOrNull() ?: 0
                syncStateWithArduino(arduinoState)

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
                val accelerometerValue = parts[5].trim().toFloatOrNull() ?: 0.0f
                val shakeCategory = when {
                    accelerometerValue > 2.5 || accelerometerValue < -2.5 -> {
                        LogModule.logEventWithLocationAndLimit(
                            this,
                            bluetoothHelper,
                            locationManager,
                            "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})"
                        )
                        "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})"
                    }

                    accelerometerValue > 1.0 || accelerometerValue < -1.0 -> {
                        LogModule.logEventWithLocationAndLimit(
                            this,
                            bluetoothHelper,
                            locationManager,
                            "–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})"
                        )
                        "–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})"
                    }

                    accelerometerValue > 0.5 || accelerometerValue < -0.5 ->
                        "–°–ª–∞–±–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})"

                    else ->
                        "–í –ø–æ–∫–æ–µ (${String.format("%.2f", accelerometerValue)})"
                }

                accelerometerData.value = shakeCategory

            } else {
                Log.e(
                    "MainActivity",
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: $data (–æ–∂–∏–¥–∞–µ—Ç—Å—è 6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${parts.size})"
                )
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: ${e.message}, –¥–∞–Ω–Ω—ã–µ: $data")
        }
    }

    private fun logBagState(newState: String) {
        if (lastLoggedBagState != newState) {
            lastLoggedBagState = newState
            LogModule.logEventWithLocationAndLimit(
                this, bluetoothHelper, locationManager, newState, noRepeat = true
            )
            Log.d("BagStateLog", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $newState")
        } else {
            Log.d("BagStateLog", "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        }
    }

    // üî• –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private fun syncStateWithArduino(arduinoState: Int) {
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏ Arduino, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Arduino

        Log.d("MainActivity", "–°–æ—Å—Ç–æ—è–Ω–∏–µ Arduino: $arduinoState")

        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Arduino
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
//    private fun isValidTempChange(lastTemp: Float?, newTemp: Float, maxChange: Float): Boolean {
//        return lastTemp == null || kotlin.math.abs(newTemp - lastTemp) <= maxChange
//    }

    private fun logBatteryThresholds(batteryValue: Int) {
        when {
            batteryValue < 5 && lastLoggedBatteryLevel != 5 -> {
                lastLoggedBatteryLevel = 5
                logBatteryLevel("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (<5%)")
            }

            batteryValue < 10 && lastLoggedBatteryLevel > 10 -> {
                lastLoggedBatteryLevel = 10
                logBatteryLevel("–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (<10%)")
            }

            batteryValue < 25 && lastLoggedBatteryLevel > 25 -> {
                lastLoggedBatteryLevel = 25
                logBatteryLevel("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (<25%)")
            }

            batteryValue < 50 && lastLoggedBatteryLevel > 50 -> {
                lastLoggedBatteryLevel = 50
                logBatteryLevel("–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –º–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã (<50%)")
            }
        }
    }

    private fun logTemperatureWithBoundaries(temp1Value: Float?, temp2Value: Float?) {
        // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–æ–≤
        val upperThresholds = listOf(40, 50, 60)
        val lowerThresholds = listOf(5, 10, 15)

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –ø–æ –ø–æ—Ä–æ–≥–∞–º
        if (temp1Value != null) {
            val temp1Int = temp1Value.toInt()
            if (lastUpperLoggedTemp == null || (temp1Int in upperThresholds && temp1Int.toFloat() != lastUpperLoggedTemp)) {
                val event = when (temp1Int) {
                    40 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 40¬∞C"
                    50 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 50¬∞C"
                    60 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 60¬∞C"
                    else -> null
                }
                event?.let {
                    LogModule.logEventWithLocationAndLimit(
                        this, bluetoothHelper, locationManager, it
                    )
                    lastUpperLoggedTemp = temp1Int.toFloat()
                }
            }
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –ø–æ –ø–æ—Ä–æ–≥–∞–º
        if (temp2Value != null) {
            val temp2Int = temp2Value.toInt()
            if (lastLowerLoggedTemp == null || (temp2Int in lowerThresholds && temp2Int.toFloat() != lastLowerLoggedTemp)) {
                val event = when (temp2Int) {
                    5 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ —É–ø–∞–ª–∞ –¥–æ 5¬∞C"
                    10 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ —É–ø–∞–ª–∞ –¥–æ 10¬∞C"
                    15 -> "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞ —É–ø–∞–ª–∞ –¥–æ 15¬∞C"
                    else -> null
                }
                event?.let {
                    LogModule.logEventWithLocationAndLimit(
                        this, bluetoothHelper, locationManager, it
                    )
                    lastLowerLoggedTemp = temp2Int.toFloat()
                }
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
    private fun logBatteryLevel(message: String) {
        LogModule.logEventWithLocationAndLimit(
            this, bluetoothHelper, locationManager, message
        )
        Log.d("BatteryLevel", message)
    }


    private fun sendCommandToDevice(command: String) {
        bluetoothHelper.sendCommand(command)
    }

}
