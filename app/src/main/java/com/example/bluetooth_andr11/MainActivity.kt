package com.example.bluetooth_andr11

import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Modifier
import androidx.core.app.ActivityCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import com.example.bluetooth_andr11.permissions.PermissionHelper
import com.example.bluetooth_andr11.ui.LogScreen
import com.example.bluetooth_andr11.ui.MainScreen
import com.example.bluetooth_andr11.ui.control.AppTopBar
import com.example.bluetooth_andr11.ui.debug.DebugControlPanel
import com.example.bluetooth_andr11.ui.location.LocationRequiredScreen
import com.example.bluetooth_andr11.ui.location.isLocationEnabled
import com.example.bluetooth_andr11.ui.theme.Bluetooth_andr11Theme
import com.google.android.gms.location.LocationServices
import org.osmdroid.config.Configuration
import java.io.File

class MainActivity : ComponentActivity() {

    private lateinit var bluetoothHelper: BluetoothHelper
    private lateinit var permissionHelper: PermissionHelper
    private lateinit var enhancedLocationManager: EnhancedLocationManager

    // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
    private val isBluetoothEnabled = mutableStateOf(false)
    private val isDeviceConnected = mutableStateOf(false)
    private val allPermissionsGranted = mutableStateOf(false)
    private val batteryPercent = mutableStateOf(0)
    private val coordinates = mutableStateOf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    private val temp1 = mutableStateOf("--")
    private val temp2 = mutableStateOf("--")
    private val hallState = mutableStateOf("--")
    private val functionState = mutableStateOf("--")
    private val accelerometerData = mutableStateOf("--")

    // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPS
    private val isLocationServiceEnabled = mutableStateOf(false)
    private val showDebugPanel = mutableStateOf(false)

    /// üî• –ù–û–í–´–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    private var lastLoggedBatteryLevel = 101
    private var lastUpperTemp: Int? = null
    private var lastLowerTemp: Int? = null

    // üî• –ü–û–†–û–ì–ò –∫–æ—Ç–æ—Ä—ã–µ –£–ñ–ï –±—ã–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    private val upperTempThresholdsReached = mutableSetOf<Int>()
    private val lowerTempThresholdsReached = mutableSetOf<Int>()

    private var lastLoggedBagState: String? = null

    private val requestPermissionsLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            val allGranted = permissions.all { it.value }
            allPermissionsGranted.value = allGranted

            if (allGranted) {
                Toast.makeText(this, "–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                if (isLocationServiceEnabled.value) {
                    initializeAppFeatures()
                }
            } else {
                handlePermissionsDenial(permissions)
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPS
        isLocationServiceEnabled.value = isLocationEnabled(this)

        setupCachePath()
        initializeComponents()
        setupMonitoring() // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
        checkInitialPermissions()
        if (BuildConfig.DEBUG) {
            autoStartSimulationIfNeeded()
        }

        // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        LogModule.logSystemEvent(
            this, bluetoothHelper, enhancedLocationManager,
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", "–°–ò–°–¢–ï–ú–ê"
        )

        setContent {
            Bluetooth_andr11Theme {
                // –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPS
                if (!isLocationServiceEnabled.value) {
                    LocationRequiredScreen(
                        onLocationEnabled = {
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ EnhancedLocationManager
                            val actualState = enhancedLocationManager.forceLocationStatusCheck()
                            isLocationServiceEnabled.value = actualState

                            if (actualState && allPermissionsGranted.value) {
                                initializeAppFeatures()
                            }

                            Log.d(TAG, "‚úÖ GPS –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è: $actualState")
                        }
                    )
                } else {
                    MainAppContent()
                }
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    private fun initializeComponents() {
        permissionHelper = PermissionHelper(this, requestPermissionsLauncher)
        enhancedLocationManager = EnhancedLocationManager(
            context = this,
            fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        )
        bluetoothHelper = BluetoothHelper(this)
    }

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
    private fun setupMonitoring() {
        setupBluetoothMonitoring()
        setupGpsMonitoring()
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    private fun setupGpsMonitoring() {
        Log.d(TAG, "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        enhancedLocationManager.setLocationStatusChangeListener { isEnabled ->
            Log.d(TAG, "üìç GPS —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $isEnabled")

            runOnUiThread {
                isLocationServiceEnabled.value = isEnabled

                if (!isEnabled) {
                    Toast.makeText(
                        this,
                        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: GPS –æ—Ç–∫–ª—é—á–µ–Ω! –§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                        Toast.LENGTH_LONG
                    ).show()

                    // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GPS
                    LogModule.logGpsStateChange(
                        this,
                        false,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª GPS –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    )
                } else {
                    Toast.makeText(
                        this,
                        "‚úÖ GPS –≤–∫–ª—é—á–µ–Ω! –§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
                        Toast.LENGTH_SHORT
                    ).show()

                    // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GPS
                    LogModule.logGpsStateChange(
                        this,
                        true,
                        "GPS –≤–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    )

                    if (allPermissionsGranted.value) {
                        initializeAppFeatures()
                    }
                }
            }
        }

        val initialState = enhancedLocationManager.forceLocationStatusCheck()
        isLocationServiceEnabled.value = initialState

        // üî• –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ —É–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        LogModule.logGpsStateChange(this, initialState, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        Log.d(TAG, "üöÄ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPS: $initialState")
    }

    @Composable
    private fun MainAppContent() {
        val navController = rememberNavController()

        Scaffold(
            topBar = {
                AppTopBar(
                    batteryLevel = batteryPercent.value,
                    isBluetoothEnabled = isBluetoothEnabled.value,
                    isDeviceConnected = isDeviceConnected.value,
                    allPermissionsGranted = allPermissionsGranted.value,
                    onPermissionsClick = ::handlePermissionsIconClick,
                    onBluetoothClick = ::handleConnectToDevice,
                    onDebugClick = {
                        showDebugPanel.value = !showDebugPanel.value
                        Log.d(TAG, "Debug panel toggled: ${showDebugPanel.value}")
                    },
                    showDebugButton = BuildConfig.DEBUG,
                    onTitleClick = {
                        navController.navigate("main_screen") {
                            popUpTo(navController.graph.startDestinationId) { inclusive = false }
                            launchSingleTop = true
                        }
                        showDebugPanel.value = false
                    },
                    // üî• –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è Bluetooth –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏
                    bluetoothHelper = bluetoothHelper
                )
            }
        ) { innerPadding ->
            NavHost(
                navController = navController,
                startDestination = "main_screen",
            ) {
                composable("main_screen") {
                    MainScreen(
                        modifier = Modifier.padding(innerPadding),
                        onCommandSend = ::sendCommandToDevice,
                        temp1 = temp1.value,
                        temp2 = temp2.value,
                        hallState = hallState.value,
                        acc = accelerometerData.value,
                        onNavigateToLogs = { navController.navigate("log_screen") },
                        bluetoothHelper = bluetoothHelper,
                        locationManager = enhancedLocationManager,
                    )
                }

                composable("log_screen") {
                    LogScreen(navController = navController)
                }
            }

            if (showDebugPanel.value && BuildConfig.DEBUG) {
                DebugControlPanel(
                    bluetoothHelper = bluetoothHelper,
                    locationManager = enhancedLocationManager
                )
            }
        }
    }

    private fun setupBluetoothMonitoring() {
        bluetoothHelper.monitorBluetoothStatus(
            this,
            enhancedLocationManager
        ) { isEnabled, isConnected ->
            isBluetoothEnabled.value = isEnabled
            isDeviceConnected.value = isConnected

            if (isConnected) {
                bluetoothHelper.listenForData { data ->
                    handleReceivedData(data)
                }
            } else if (isEnabled && !isConnected) {
                bluetoothHelper.showDeviceSelectionDialog(this) { device ->
                    bluetoothHelper.connectToDevice(device) { success, message ->
                        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                        isDeviceConnected.value = success
                    }
                }
            }
        }
    }

    private fun checkInitialPermissions() {
        allPermissionsGranted.value = permissionHelper.hasAllPermissions()
        if (allPermissionsGranted.value && isLocationServiceEnabled.value) {
            initializeAppFeatures()
        } else if (!allPermissionsGranted.value) {
            permissionHelper.requestPermissions()
        }
    }

    private fun initializeAppFeatures() {
        enhancedLocationManager.startLocationUpdates { newCoordinates ->
            coordinates.value = newCoordinates
            Log.d(TAG, "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: $newCoordinates")
        }

        if (isLocationServiceEnabled.value) {
            enhancedLocationManager.forceLocationUpdate(EnhancedLocationManager.LocationMode.BALANCED)
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º GPS
        val recommendedMode = enhancedLocationManager.getRecommendedMode()
        enhancedLocationManager.setLocationMode(recommendedMode)
        Log.d(TAG, "üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º GPS: $recommendedMode")
    }

    private fun autoStartSimulationIfNeeded() {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DEBUG —Ä–µ–∂–∏–º–∞
        if (!BuildConfig.DEBUG) {
            Log.i(TAG, "RELEASE —Ä–µ–∂–∏–º: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        }

        if (!bluetoothHelper.isDeviceConnected) {
            Handler(Looper.getMainLooper()).postDelayed({
                // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                if (BuildConfig.DEBUG && !bluetoothHelper.isDeviceConnected) {
                    bluetoothHelper.enableSimulationMode(true)
                    Toast.makeText(this, "üîß –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è Arduino (DEBUG)", Toast.LENGTH_LONG)
                        .show()

                    LogModule.logSystemEvent(
                        this, bluetoothHelper, enhancedLocationManager,
                        "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino (DEBUG —Ä–µ–∂–∏–º)", "–û–¢–õ–ê–î–ö–ê"
                    )
                }
            }, 3000)
        }
    }

    fun handleReceivedData(data: String) {
        Log.d(TAG, "üî¥ –ü–æ–ª—É—á–µ–Ω—ã RAW –¥–∞–Ω–Ω—ã–µ: '$data'")
        parseArduinoData(data)
    }

    private fun parseArduinoData(data: String) {
        try {
            val cleanData = data.trim()
            val parts = cleanData.split(",")

            if (parts.size >= 6) {
                Log.d(TAG, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ ${parts.size} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

                val batteryValue = parts[0].trim().toIntOrNull() ?: -1
                val upperTempString = parts[1].trim()
                val lowerTempString = parts[2].trim()
                val closedState = parts[3].trim()
                val arduinoState = parts[4].trim().toIntOrNull() ?: 0
                val accelerometerValue = parts[5].trim().toFloatOrNull() ?: 0.0f

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                updateBatteryLevel(batteryValue)
                updateTemperatures(upperTempString, lowerTempString)
                updateBagState(closedState)
                updateAccelerometer(accelerometerValue)

                // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (parts.size > 6) {
                    val extraParams = parts.subList(6, parts.size).joinToString(",")
                    Log.w(TAG, "‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã: $extraParams")
                }

            } else {
                Log.w(TAG, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ ${parts.size}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 6")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
        }
    }

    private fun updateBatteryLevel(batteryValue: Int) {
        if (batteryValue in 0..100) {
            batteryPercent.value = batteryValue
            logBatteryThresholds(batteryValue)
        } else {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏: $batteryValue")
        }
    }

    private fun updateTemperatures(upperTempString: String, lowerTempString: String) {
        val upperTemp = if (upperTempString == "er") {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞")
            null
        } else {
            upperTempString.toFloatOrNull()
        }

        val lowerTemp = if (lowerTempString == "er") {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –æ—Ç—Å–µ–∫–∞")
            null
        } else {
            lowerTempString.toFloatOrNull()
        }

        temp1.value = when {
            upperTempString == "er" -> "–û—à–∏–±–∫–∞"
            upperTemp != null -> upperTemp.toString()
            else -> temp1.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        temp2.value = when {
            lowerTempString == "er" -> "–û—à–∏–±–∫–∞"
            lowerTemp != null -> lowerTemp.toString()
            else -> temp2.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        logTemperatureThresholds(upperTemp, lowerTemp)
    }

    private fun updateBagState(closedState: String) {
        val newState = when (closedState) {
            "1" -> {
                Log.d(TAG, "üîí –°—É–º–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                "–ó–∞–∫—Ä—ã—Ç"
            }

            "0" -> {
                Log.d(TAG, "üîì –°—É–º–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                "–û—Ç–∫—Ä—ã—Ç"
            }

            else -> {
                Log.w(TAG, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏: $closedState")
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        }

        hallState.value = newState
        logBagStateChange(newState)
    }

    private var lastAccelerometerLogTime = 0L

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
    private fun updateAccelerometer(accelerometerValue: Float) {
        val shakeCategory = when {
            accelerometerValue > 2.5 -> {
                // üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastAccelerometerLogTime > 2000) { // 2 —Å–µ–∫—É–Ω–¥
                    LogModule.logSystemEvent(
                        this, bluetoothHelper, enhancedLocationManager,
                        "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})",
                        "–ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†"
                    )
                    lastAccelerometerLogTime = currentTime
                }
                "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞"
            }

            accelerometerValue > 1.0 -> {
                // üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastAccelerometerLogTime > 2000) { // 2 —Å–µ–∫—É–Ω–¥
                    LogModule.logSystemEvent(
                        this, bluetoothHelper, enhancedLocationManager,
                        "–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (${String.format("%.2f", accelerometerValue)})",
                        "–ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†"
                    )
                    lastAccelerometerLogTime = currentTime
                }
                "–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞"
            }

            accelerometerValue > 0.5 -> "–°–ª–∞–±–∞—è —Ç—Ä—è—Å–∫–∞"
            else -> "–í –ø–æ–∫–æ–µ"
        }

        accelerometerData.value = "$shakeCategory (${String.format("%.2f", accelerometerValue)})"
    }

    // üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
    private fun logBatteryThresholds(batteryValue: Int) {
        Log.d(
            TAG,
            "üîã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏: —Ç–µ–∫—É—â–∏–π=$batteryValue%, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π=$lastLoggedBatteryLevel%"
        )

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏
        val downwardThresholds = listOf(50, 30, 15, 5)
        for (threshold in downwardThresholds) {
            if (batteryValue <= threshold && lastLoggedBatteryLevel > threshold) {
                lastLoggedBatteryLevel = threshold
                val message = when (threshold) {
                    5 -> "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§5%)"
                    15 -> "‚ö†Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§15%)"
                    30 -> "‚ö° –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§30%)"
                    50 -> "üîã –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –º–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã (‚â§50%)"
                    else -> continue
                }

                Log.d(TAG, "üîã –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–∞—Ç–∞—Ä–µ–∏: $message")
                LogModule.logSystemEvent(
                    this, bluetoothHelper, enhancedLocationManager,
                    message, "–ë–ê–¢–ê–†–ï–Ø"
                )
                break // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Ä–æ–≥ –∑–∞ —Ä–∞–∑
            }
        }
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    private fun logTemperatureThresholds(upperTemp: Float?, lowerTemp: Float?) {
        // üî• –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö (–ì–û–†–Ø–ß–ò–ô)
        upperTemp?.let { temp ->
            val tempInt = temp.toInt()
            val previousTemp = lastUpperTemp
            lastUpperTemp = tempInt

            Log.d(TAG, "üå°Ô∏è –í–µ—Ä—Ö–Ω–∏–π: –±—ã–ª–æ=${previousTemp}¬∞C ‚Üí —Å—Ç–∞–ª–æ=${tempInt}¬∞C")

            if (previousTemp != null) {
                // üî• –ü–û–í–´–®–ï–ù–ò–ï —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                if (tempInt > previousTemp) {
                    when {
                        tempInt >= 40 && !upperTempThresholdsReached.contains(40) -> {
                            upperTempThresholdsReached.add(40)
                            logCriticalTemperatureEvent("üö® –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 40¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 50 && !upperTempThresholdsReached.contains(50) -> {
                            upperTempThresholdsReached.add(50)
                            logCriticalTemperatureEvent("üî• –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 50¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 60 && !upperTempThresholdsReached.contains(60) -> {
                            upperTempThresholdsReached.add(60)
                            logCriticalTemperatureEvent("üö® –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 60¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 70 && !upperTempThresholdsReached.contains(70) -> {
                            upperTempThresholdsReached.add(70)
                            logCriticalTemperatureEvent("üî• –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –ö–†–ò–¢–ò–ß–ù–û! –î–æ—Å—Ç–∏–≥ 70¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }
                    }
                }

                // üî• –ü–û–ù–ò–ñ–ï–ù–ò–ï —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                if (tempInt < previousTemp) {
                    when {
                        tempInt <= 50 && upperTempThresholdsReached.contains(60) && !upperTempThresholdsReached.contains(
                            -50
                        ) -> {
                            upperTempThresholdsReached.add(-50) // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = "–æ—Å—Ç—ã–ª –¥–æ 50"
                            logCriticalTemperatureEvent("‚ùÑÔ∏è –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –û—Å—Ç—ã–ª –¥–æ 50¬∞C (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 40 && upperTempThresholdsReached.contains(50) && !upperTempThresholdsReached.contains(
                            -40
                        ) -> {
                            upperTempThresholdsReached.add(-40)
                            logCriticalTemperatureEvent("‚ùÑÔ∏è –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –û—Å—Ç—ã–ª –¥–æ 40¬∞C (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 30 && upperTempThresholdsReached.contains(40) && !upperTempThresholdsReached.contains(
                            -30
                        ) -> {
                            upperTempThresholdsReached.add(-30)
                            logCriticalTemperatureEvent("üü¢ –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª—Å—è –¥–æ 30¬∞C (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 25 && upperTempThresholdsReached.contains(40) && !upperTempThresholdsReached.contains(
                            -25
                        ) -> {
                            upperTempThresholdsReached.add(-25)
                            logCriticalTemperatureEvent("‚úÖ –í–ï–†–•–ù–ò–ô –û–¢–°–ï–ö: –í–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–æ—Ä–º–µ 25¬∞C (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }
                    }
                }
            }
        }

        // üî• –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö (–•–û–õ–û–î–ù–´–ô)
        lowerTemp?.let { temp ->
            val tempInt = temp.toInt()
            val previousTemp = lastLowerTemp
            lastLowerTemp = tempInt

            Log.d(TAG, "üå°Ô∏è –ù–∏–∂–Ω–∏–π: –±—ã–ª–æ=${previousTemp}¬∞C ‚Üí —Å—Ç–∞–ª–æ=${tempInt}¬∞C")

            if (previousTemp != null) {
                // üî• –ü–û–ù–ò–ñ–ï–ù–ò–ï —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ö–æ—Ä–æ—à–æ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞)
                if (tempInt < previousTemp) {
                    when {
                        tempInt <= 15 && !lowerTempThresholdsReached.contains(15) -> {
                            lowerTempThresholdsReached.add(15)
                            logCriticalTemperatureEvent("‚ùÑÔ∏è –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 15¬∞C - —Ö–æ–ª–æ–¥–æ–≤–∞—è —Ü–µ–ø—å (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 10 && !lowerTempThresholdsReached.contains(10) -> {
                            lowerTempThresholdsReached.add(10)
                            logCriticalTemperatureEvent("üßä –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 10¬∞C - –≥–ª—É–±–æ–∫–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 5 && !lowerTempThresholdsReached.contains(5) -> {
                            lowerTempThresholdsReached.add(5)
                            logCriticalTemperatureEvent("üå®Ô∏è –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 5¬∞C - –∑–∞–º–æ—Ä–æ–∑–∫–∞ (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= 0 && !lowerTempThresholdsReached.contains(0) -> {
                            lowerTempThresholdsReached.add(0)
                            logCriticalTemperatureEvent("üßä –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ 0¬∞C - –≥–ª—É–±–æ–∫–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt <= -5 && !lowerTempThresholdsReached.contains(-5) -> {
                            lowerTempThresholdsReached.add(-5)
                            logCriticalTemperatureEvent("‚ùÑÔ∏è –ù–ò–ñ–ù–ò–ô –û–¢–°–ï–ö: –î–æ—Å—Ç–∏–≥ -5¬∞C - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }
                    }
                }

                // üî• –ü–û–í–´–®–ï–ù–ò–ï —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ù–ê–†–£–®–ï–ù–ò–ï —Ö–æ–ª–æ–¥–æ–≤–æ–π —Ü–µ–ø–∏!)
                if (tempInt > previousTemp) {
                    when {
                        tempInt >= 5 && lowerTempThresholdsReached.contains(0) && !lowerTempThresholdsReached.contains(
                            -105
                        ) -> {
                            lowerTempThresholdsReached.add(-105) // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = "–Ω–∞–≥—Ä–µ–ª—Å—è –¥–æ 5"
                            logCriticalTemperatureEvent("üö® –ù–ê–†–£–®–ï–ù–ò–ï –•–û–õ–û–î–û–í–û–ô –¶–ï–ü–ò: –ù–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫ –Ω–∞–≥—Ä–µ–ª—Å—è –¥–æ 5¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 10 && lowerTempThresholdsReached.contains(5) && !lowerTempThresholdsReached.contains(
                            -110
                        ) -> {
                            lowerTempThresholdsReached.add(-110)
                            logCriticalTemperatureEvent("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ù–ê–†–£–®–ï–ù–ò–ï: –ù–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫ –Ω–∞–≥—Ä–µ–ª—Å—è –¥–æ 10¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 15 && lowerTempThresholdsReached.contains(10) && !lowerTempThresholdsReached.contains(
                            -115
                        ) -> {
                            lowerTempThresholdsReached.add(-115)
                            logCriticalTemperatureEvent("‚ö†Ô∏è –ü–û–¢–ï–†–Ø –û–•–õ–ê–ñ–î–ï–ù–ò–Ø: –ù–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫ –Ω–∞–≥—Ä–µ–ª—Å—è –¥–æ 15¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        tempInt >= 20 && lowerTempThresholdsReached.contains(15) && !lowerTempThresholdsReached.contains(
                            -120
                        ) -> {
                            lowerTempThresholdsReached.add(-120)
                            logCriticalTemperatureEvent("üå°Ô∏è –ü–û–õ–ù–ê–Ø –ü–û–¢–ï–†–Ø –•–û–õ–û–î–ê: –ù–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫ –Ω–∞–≥—Ä–µ–ª—Å—è –¥–æ 20¬∞C! (–±—ã–ª–æ ${previousTemp}¬∞C)")
                        }

                        // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –õ—é–±–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å —Ö–æ–ª–æ–¥–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                        tempInt > 0 && previousTemp <= 0 && !lowerTempThresholdsReached.contains(-200) -> {
                            lowerTempThresholdsReached.add(-200)
                            logCriticalTemperatureEvent("üö® –†–ê–ó–ú–û–†–ê–ñ–ò–í–ê–ù–ò–ï: –ù–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫ –≤—ã—à–µ–ª –∏–∑ –∑–∞–º–æ—Ä–æ–∑–∫–∏! ${previousTemp}¬∞C ‚Üí ${tempInt}¬∞C")
                        }
                    }
                }
            }
        }
    }

    // üî• –§–£–ù–ö–¶–ò–Ø –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ—Ä–æ–≥–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    fun resetTemperatureThresholds() {
        upperTempThresholdsReached.clear()
        lowerTempThresholdsReached.clear()
        lastUpperTemp = null
        lastLowerTemp = null
        Log.d(TAG, "üîÑ –ü–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    }

    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!)
    private fun logCriticalTemperatureEvent(message: String) {
        Log.d(TAG, "üå°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï: $message")

        try {
            // üî• –ü–†–Ø–ú–ê–Ø –ó–ê–ü–ò–°–¨ –í –õ–û–ì-–§–ê–ô–õ (–º–∏–Ω—É—è –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!)
            val logDir = File(this.getExternalFilesDir(null), "logs")
            if (!logDir.exists()) logDir.mkdirs()

            val logFile = File(logDir, "events_log.txt")
            val timestamp =
                java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", java.util.Locale.getDefault())
                    .format(java.util.Date())

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            val locationInfo = enhancedLocationManager.getLocationInfo()
            val coordinates = if (locationInfo.coordinates != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
                "${locationInfo.coordinates} (${locationInfo.source}, ¬±${locationInfo.accuracy.toInt()}–º)"
            } else {
                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            }

            val logEntry = "$timestamp - –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: $message @ $coordinates\n"
            logFile.appendText(logEntry)

            Log.d(TAG, "‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –ù–ê–ü–†–Ø–ú–£–Æ –≤ —Ñ–∞–π–ª: $logEntry")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ª–æ–≥–∞: ${e.message}")

            // Fallback - —á–µ—Ä–µ–∑ LogModule –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            LogModule.logEvent(this, "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: $message")
        }
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏
    private fun logBagStateChange(newState: String) {
        if (lastLoggedBagState != newState) {
            lastLoggedBagState = newState
            val message = "–°—É–º–∫–∞ ${if (newState == "–ó–∞–∫—Ä—ã—Ç") "–∑–∞–∫—Ä—ã—Ç–∞" else "–æ—Ç–∫—Ä—ã—Ç–∞"}"

            // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            LogModule.logSystemEvent(
                this, bluetoothHelper, enhancedLocationManager,
                message, "–î–ê–¢–ß–ò–ö_–•–û–õ–õ–ê"
            )
        }
    }

    private fun sendCommandToDevice(command: String) {
        Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É: $command")
        bluetoothHelper.sendCommand(command)
    }

    private fun handlePermissionsIconClick() {
        if (!allPermissionsGranted.value) {
            permissionHelper.requestPermissions()
        } else {
            Toast.makeText(this, "–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
        }
    }

    private fun handlePermissionsDenial(permissions: Map<String, Boolean>) {
        val permanentlyDenied = permissions.filter { permission ->
            !permission.value && !ActivityCompat.shouldShowRequestPermissionRationale(
                this,
                permission.key
            )
        }

        if (permanentlyDenied.isNotEmpty()) {
            Toast.makeText(
                this,
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                Toast.LENGTH_LONG
            ).show()
            redirectToAppSettings()
        } else {
            permissionHelper.requestPermissions()
        }
    }

    private fun redirectToAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts("package", packageName, null)
        }
        startActivity(intent)
    }

    private fun handleConnectToDevice() {
        bluetoothHelper.showDeviceSelectionDialog(this) { device ->
            bluetoothHelper.connectToDevice(device) { success, message ->
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                isDeviceConnected.value = success
                if (success) {
                    bluetoothHelper.listenForData { data ->
                        handleReceivedData(data)
                    }
                }
            }
        }
    }

    private fun setupCachePath() {
        val context = applicationContext
        val cacheDir = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            File(context.filesDir, "osmdroid")
        } else {
            File(context.getExternalFilesDir(null), "osmdroid")
        }

        val config = Configuration.getInstance()
        config.osmdroidBasePath = cacheDir
        config.osmdroidTileCache = File(cacheDir, "cache")
        config.userAgentValue = packageName
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    override fun onDestroy() {
        super.onDestroy()

        try {
            // üî• –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            LogModule.logSystemEvent(
                this, bluetoothHelper, enhancedLocationManager,
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", "–°–ò–°–¢–ï–ú–ê"
            )

            enhancedLocationManager.cleanup()
            Log.d(TAG, "üßπ MainActivity —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞, GPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${e.message}")
        }
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPS
    fun testGpsMonitoring() {
        Log.d(TAG, "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        val currentState = enhancedLocationManager.forceLocationStatusCheck()

        // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        LogModule.logSystemEvent(
            this, bluetoothHelper, enhancedLocationManager,
            "–¢–µ—Å—Ç GPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${if (currentState) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}",
            "–¢–ï–°–¢"
        )

        Toast.makeText(
            this,
            "üß™ GPS —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${if (currentState) "‚úÖ" else "‚ùå"}",
            Toast.LENGTH_SHORT
        ).show()
    }

    companion object {
        private const val TAG = "MainActivity"
    }
}