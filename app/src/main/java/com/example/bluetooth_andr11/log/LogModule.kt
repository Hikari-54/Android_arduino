package com.example.bluetooth_andr11.log

import android.content.Context
import android.location.Location
import android.util.Log
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–æ—Å—Ç–∞–≤–æ—á–Ω–æ–π —Å—É–º–∫–∏ —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–ø–∞–º–∞.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GPS —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º —Å–ø–∞–º–∞
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è vs –æ–±—ã—á–Ω—ã–µ)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ —Å–æ–±—ã—Ç–∏—è–º
 * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
 * - –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ª–æ–≥–æ–≤
 * - Graceful handling –æ—à–∏–±–æ–∫ –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BluetoothHelper –∏ EnhancedLocationManager
 *
 * –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:
 * - –°–ò–°–¢–ï–ú–ê: —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞–ø—É—Å–∫, –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
 * - –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: —Å–æ–±—ã—Ç–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
 * - –î–ï–ô–°–¢–í–ò–ï: –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
 * - –ë–ê–¢–ê–†–ï–Ø: —Å–æ–±—ã—Ç–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—Ä—è–¥–∞
 * - –î–ê–¢–ß–ò–ö_–•–û–õ–õ–ê: –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏
 * - –ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†: —Å–æ–±—ã—Ç–∏—è —Ç—Ä—è—Å–∫–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è
 * - –°–ò–°–¢–ï–ú–ê_GPS: —Å–æ–±—ã—Ç–∏—è GPS —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
object LogModule {
    private const val TAG = "LogModule"

    // === –ö–û–ù–°–¢–ê–ù–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===

    /** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ */
    private const val LOG_DIR_NAME = "logs"

    /** –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏–π */
    private const val EVENTS_LOG_FILE = "events_log.txt"

    /** –§–∞–π–ª –ª–æ–≥–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */
    private const val LOCATION_LOG_FILE = "location_log.txt"

    /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ GPS —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (5 –º–∏–Ω—É—Ç) */
    private const val GPS_LOG_COOLDOWN = 5 * 60 * 1000L

    /** –ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPS (–∫–∞–∂–¥—ã–π 10-–π —Ä–∞–∑) */
    private const val GPS_UNAVAILABLE_LOG_FREQUENCY = 10

    // === –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–£–õ–Ø ===

    /** –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ */
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())

    /** –ö—ç—à –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ */
    private val lastLoggedEventTime = mutableMapOf<String, Long>()

    /** –°–æ—Å—Ç–æ—è–Ω–∏–µ GPS –¥–ª—è —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */
    private var lastGpsState: Boolean? = null
    private var lastGpsLogTime = 0L
    private var consecutiveUnavailableCount = 0

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–∞–π–ª
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
     * @param event —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
     */
    fun logEvent(context: Context, event: String) {
        try {
            val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
            if (!logDir.exists()) {
                logDir.mkdirs()
            }

            val logFile = File(logDir, EVENTS_LOG_FILE)
            val timestamp = getCurrentTimestamp()
            logFile.appendText("$timestamp - $event\n")

            if (BuildConfig.DEBUG) {
                Log.d(TAG, "üìù –°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: $event")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: ${e.message}")
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }

    /**
     * –£–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è GPS —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º —Å–ø–∞–º–∞
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param isAvailable –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ GPS –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
     * @param reason –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—á–∏–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    fun logGpsStateChange(context: Context, isAvailable: Boolean, reason: String = "") {
        val currentTime = System.currentTimeMillis()

        // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPS –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if (lastGpsState == isAvailable) {
            if (!isAvailable) {
                consecutiveUnavailableCount++

                // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π N-–π —Ä–∞–∑ –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                if (consecutiveUnavailableCount % GPS_UNAVAILABLE_LOG_FREQUENCY == 0 ||
                    currentTime - lastGpsLogTime > GPS_LOG_COOLDOWN
                ) {
                    val logMessage = "GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ $consecutiveUnavailableCount —Ä–∞–∑ –ø–æ–¥—Ä—è–¥"
                    logEvent(context, "–°–ò–°–¢–ï–ú–ê_GPS: $logMessage")
                    lastGpsLogTime = currentTime
                }
            }
            return // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
        lastGpsState = isAvailable
        lastGpsLogTime = currentTime

        val event = when {
            isAvailable -> {
                consecutiveUnavailableCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                "GPS –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
            }

            else -> {
                consecutiveUnavailableCount = 1
                "GPS –ù–ï–î–û–°–¢–£–ü–ï–ù - –ø–æ—Ç–µ—Ä—è —Å–∏–≥–Ω–∞–ª–∞" +
                        if (reason.isNotEmpty()) " ($reason)" else ""
            }
        }

        logEvent(context, "–°–ò–°–¢–ï–ú–ê_GPS: $event")
        Log.i(TAG, "üõ∞Ô∏è GPS —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $isAvailable")
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param bluetoothHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @param locationManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param event —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
     * @param critical –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏ —Å–æ–±—ã—Ç–∏–µ (–ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
     */
    fun logEventWithLocation(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        critical: Boolean = false
    ) {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
        // –û–±—ã—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        if (!critical && !bluetoothHelper.isDeviceConnected) {
            Log.d(TAG, "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        }

        val locationInfo = locationManager.getLocationInfo()
        val logMessage = buildString {
            if (critical) append("–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: ")
            append(event)
            append(" @ ")

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            if (locationInfo.coordinates != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
                append("${locationInfo.coordinates} ")
                append("(${locationInfo.source}, ¬±${locationInfo.accuracy.toInt()}–º)")
            } else {
                append("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            }

            // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Bluetooth
            if (critical) {
                val connectionStatus = if (bluetoothHelper.isDeviceConnected) {
                    "–ü–û–î–ö–õ–Æ–ß–ï–ù–û"
                } else {
                    "–û–¢–ö–õ–Æ–ß–ï–ù–û"
                }
                append(" [BT: $connectionStatus]")
            }
        }

        logEvent(context, logMessage)
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param bluetoothHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param locationManager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param event —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
     * @param timeLimitSeconds –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
     * @param critical –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏ —Å–æ–±—ã—Ç–∏–µ
     */
    fun logEventWithLimit(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        timeLimitSeconds: Int = 60,
        critical: Boolean = false
    ) {
        val currentTime = System.currentTimeMillis()
        val lastTime = lastLoggedEventTime[event] ?: 0

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∞–∫–æ–≥–æ –∂–µ —Å–æ–±—ã—Ç–∏—è
        if (!critical && currentTime - lastTime < timeLimitSeconds * 1000) {
            return // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        lastLoggedEventTime[event] = currentTime

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        logEventWithLocation(context, bluetoothHelper, locationManager, event, critical)
    }

    // === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π GPS
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param bluetoothHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param locationManager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param event —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     */
    fun logCriticalEvent(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String
    ) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ GPS —Å–æ–±—ã—Ç–∏–π
        if (event.contains("GPS", ignoreCase = true) ||
            event.contains("–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ignoreCase = true)
        ) {

            val isGpsAvailable = event.contains("–≤–∫–ª—é—á–µ–Ω", ignoreCase = true) ||
                    event.contains("–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", ignoreCase = true)
            logGpsStateChange(context, isGpsAvailable, event)
        } else {
            // –û–±—ã—á–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            logEventWithLocation(context, bluetoothHelper, locationManager, event, critical = true)
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ–≥–¥–∞ –≤–∞–∂–Ω—ã)
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param bluetoothHelper –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param locationManager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param action –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun logUserAction(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        action: String
    ) {
        // –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        logEventWithLocation(context, bluetoothHelper, locationManager, "–î–ï–ô–°–¢–í–ò–ï: $action")
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param bluetoothHelper –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param locationManager –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param event –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
     */
    fun logSystemEvent(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        category: String = "–°–ò–°–¢–ï–ú–ê"
    ) {
        when (category) {
            "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê" -> {
                // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã - –ª–æ–≥–∏—Ä—É–µ–º –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                logEventWithLocation(
                    context, bluetoothHelper, locationManager,
                    "$category: $event", critical = true
                )
            }

            else -> {
                // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
                logEventWithLimit(
                    context, bluetoothHelper, locationManager,
                    "$category: $event",
                    timeLimitSeconds = 60 // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
                )
            }
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
     * @param location –æ–±—ä–µ–∫—Ç Location —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     */
    fun logLocation(context: Context, location: Location) {
        try {
            val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
            if (!logDir.exists()) {
                logDir.mkdirs()
            }

            val logFile = File(logDir, LOCATION_LOG_FILE)
            val timestamp = getCurrentTimestamp()

            // –§–æ—Ä–º–∞—Ç: timestamp, lat, lon, accuracy, bearing
            val logEntry = buildString {
                append(timestamp)
                append(", ${location.latitude}")
                append(", ${location.longitude}")
                append(", ${location.accuracy}")
                append(", ${if (location.hasBearing()) location.bearing else 0.0f}")
                append("\n")
            }

            logFile.appendText(logEntry)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${e.message}")
        }
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
     * @return –æ–±—ä–µ–∫—Ç LogStatistics —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
     */
    fun getLogStatistics(context: Context): LogStatistics {
        return try {
            val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
            val logFile = File(logDir, EVENTS_LOG_FILE)

            if (!logFile.exists()) {
                LogStatistics(0, 0, 0, 0, "–ù–µ—Ç –ª–æ–≥–æ–≤")
            } else {
                val lines = logFile.readLines()

                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
                val totalEvents = lines.size
                val criticalEvents = lines.count { it.contains("–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï") }
                val gpsEvents = lines.count { line ->
                    line.contains("üõ∞Ô∏è") || line.contains("üì°") ||
                            line.contains("üì∂") || line.contains("GPS")
                }
                val userActions = lines.count { it.contains("–î–ï–ô–°–¢–í–ò–ï:") }
                val temperatureEvents = lines.count { it.contains("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:") }

                // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                val lastEventTime = lines.lastOrNull()
                    ?.substringBefore(" -")
                    ?.trim()
                    ?: "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π"

                LogStatistics(
                    totalEvents = totalEvents,
                    criticalEvents = criticalEvents,
                    gpsEvents = gpsEvents,
                    userActions = userActions,
                    lastEventTime = lastEventTime,
                    temperatureEvents = temperatureEvents
                )
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            LogStatistics(0, 0, 0, 0, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è", 0)
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    fun clearEventCache() {
        lastLoggedEventTime.clear()
        Log.d(TAG, "üßπ –ö—ç—à —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω")
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GPS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fun getGpsLoggingStatus(): GpsLoggingStatus {
        return GpsLoggingStatus(
            lastKnownState = lastGpsState,
            consecutiveUnavailableCount = consecutiveUnavailableCount,
            lastLogTime = lastGpsLogTime,
            cooldownRemaining = if (lastGpsLogTime > 0) {
                maxOf(0, GPS_LOG_COOLDOWN - (System.currentTimeMillis() - lastGpsLogTime))
            } else 0
        )
    }

    // === –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    private fun getCurrentTimestamp(): String {
        return dateFormat.format(Date())
    }

    // === DATA CLASSES ===

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     *
     * @param totalEvents –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
     * @param criticalEvents –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
     * @param gpsEvents –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GPS —Å–æ–±—ã—Ç–∏–π
     * @param userActions –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param lastEventTime –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param temperatureEvents –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
     */
    data class LogStatistics(
        val totalEvents: Int,
        val criticalEvents: Int,
        val gpsEvents: Int,
        val userActions: Int,
        val lastEventTime: String,
        val temperatureEvents: Int = 0
    ) {
        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */
        fun getSummary(): String {
            return "–í—Å–µ–≥–æ: $totalEvents | –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: $criticalEvents | " +
                    "GPS: $gpsEvents | –î–µ–π—Å—Ç–≤–∏—è: $userActions | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: $temperatureEvents"
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
         */
        fun getDetailedInfo(): String {
            return buildString {
                appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:")
                appendLine("‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: $totalEvents")
                appendLine("‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è: $criticalEvents")
                appendLine("‚Ä¢ GPS —Å–æ–±—ã—Ç–∏—è: $gpsEvents")
                appendLine("‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userActions")
                appendLine("‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: $temperatureEvents")
                appendLine("‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: $lastEventTime")
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥–∞—Ö
         */
        fun hasEvents(): Boolean = totalEvents > 0

        /**
         * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
         */
        fun getCriticalEventsPercentage(): Int {
            return if (totalEvents > 0) {
                (criticalEvents * 100) / totalEvents
            } else 0
        }
    }

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ GPS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    data class GpsLoggingStatus(
        val lastKnownState: Boolean?,
        val consecutiveUnavailableCount: Int,
        val lastLogTime: Long,
        val cooldownRemaining: Long
    ) {
        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        fun getStatusDescription(): String {
            val stateText = when (lastKnownState) {
                true -> "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω"
                false -> "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($consecutiveUnavailableCount —Ä–∞–∑)"
                null -> "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

            val cooldownText = if (cooldownRemaining > 0) {
                " (–∫—É–ª–¥–∞—É–Ω: ${cooldownRemaining / 1000}—Å)"
            } else ""

            return "GPS: $stateText$cooldownText"
        }
    }
}