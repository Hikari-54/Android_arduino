// üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô LogModule.kt —Å —É–º–Ω—ã–º GPS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

package com.example.bluetooth_andr11.log

import android.content.Context
import android.location.Location
import android.util.Log
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object LogModule {
    private const val TAG = "LogModule"
    private val lastLoggedEventTime = mutableMapOf<String, Long>()
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())

    // üî• –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ GPS –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    private var lastGpsState: Boolean? = null
    private var lastGpsLogTime = 0L
    private var consecutiveUnavailableCount = 0
    private val GPS_LOG_COOLDOWN = 5 * 60 * 1000L // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    fun logEvent(context: Context, event: String) {
        try {
            val logDir = File(context.getExternalFilesDir(null), "logs")
            if (!logDir.exists()) logDir.mkdirs()

            val logFile = File(logDir, "events_log.txt")
            logFile.appendText("${getCurrentTimestamp()} - $event\n")

            if (BuildConfig.DEBUG) {
                Log.d(TAG, "–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: $event")
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: ${e.message}")
        }
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —É–º–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GPS –∏–∑–º–µ–Ω–µ–Ω–∏–π
    fun logGpsStateChange(context: Context, isAvailable: Boolean, reason: String = "") {
        val currentTime = System.currentTimeMillis()

        // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        if (lastGpsState == isAvailable) {
            if (!isAvailable) {
                consecutiveUnavailableCount++

                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π —Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                if (consecutiveUnavailableCount % 10 == 0 ||
                    currentTime - lastGpsLogTime > GPS_LOG_COOLDOWN
                ) {

                    val logMessage = "GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ ${consecutiveUnavailableCount} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥"
                    logEvent(context, "GPS –°–ò–°–¢–ï–ú–ê: $logMessage")
                    lastGpsLogTime = currentTime
                }
            }
            return // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ª–æ–≥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        lastGpsState = isAvailable
        lastGpsLogTime = currentTime

        val event = when {
            isAvailable -> {
                consecutiveUnavailableCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                "GPS –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
            }

            else -> {
                consecutiveUnavailableCount = 1
                "GPS –ù–ï–î–û–°–¢–£–ü–ï–ù - –ø–æ—Ç–µ—Ä—è —Å–∏–≥–Ω–∞–ª–∞" + if (reason.isNotEmpty()) " ($reason)" else ""
            }
        }

        logEvent(context, "GPS –°–ò–°–¢–ï–ú–ê: $event")
        Log.i(TAG, "GPS —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $isAvailable")
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º)
    fun logEventWithLocation(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        critical: Boolean = false
    ) {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤—Å–µ–≥–¥–∞, –æ–±—ã—á–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º Bluetooth
        if (!critical && !bluetoothHelper.isDeviceConnected) {
            Log.d(TAG, "–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        }

        val locationInfo = locationManager.getLocationInfo()
        val logMessage = buildString {
            if (critical) append("–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: ")
            append(event)
            append(" @ ")

            if (locationInfo.coordinates != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
                append("${locationInfo.coordinates} (${locationInfo.source}, ¬±${locationInfo.accuracy.toInt()}–º)")
            } else {
                append("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            }

            if (critical) {
                val connectionStatus =
                    if (bluetoothHelper.isDeviceConnected) "–ü–û–î–ö–õ–Æ–ß–ï–ù–û" else "–û–¢–ö–õ–Æ–ß–ï–ù–û"
                append(" [BT: $connectionStatus]")
            }
        }

        logEvent(context, logMessage)
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞)
    fun logEventWithLimit(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        timeLimitSeconds: Int = 60,
        critical: Boolean = false
    ) {
        val currentTime = System.currentTimeMillis()
        val lastTime = lastLoggedEventTime[event] ?: 0

        if (!critical && currentTime - lastTime < timeLimitSeconds * 1000) {
            return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–æ—Å—å
        }

        lastLoggedEventTime[event] = currentTime
        logEventWithLocation(context, bluetoothHelper, locationManager, event, critical)
    }

    // üî• –£–õ–£–ß–®–ï–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    fun logCriticalEvent(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String
    ) {
        // üî• –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è GPS —Å–æ–±—ã—Ç–∏—è
        if (event.contains("GPS") || event.contains("–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ignoreCase = true)) {
            val isGpsEvent = event.contains("–≤–∫–ª—é—á–µ–Ω") || event.contains("–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logGpsStateChange(context, isGpsEvent, event)
        } else {
            // –û–±—ã—á–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            logEventWithLocation(context, bluetoothHelper, locationManager, event, critical = true)
        }
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–≤—Å–µ–≥–¥–∞ –≤–∞–∂–Ω–æ)
    fun logUserAction(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        action: String
    ) {
        // –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        logEventWithLocation(context, bluetoothHelper, locationManager, "–î–ï–ô–°–¢–í–ò–ï: $action")
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    fun logSystemEvent(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: EnhancedLocationManager,
        event: String,
        category: String = "–°–ò–°–¢–ï–ú–ê"
    ) {
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        logEventWithLimit(
            context, bluetoothHelper, locationManager,
            "$category: $event",
            timeLimitSeconds = 300 // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        )
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    fun logLocationSystemChange(
        context: Context,
        locationManager: EnhancedLocationManager,
        description: String
    ) {
        // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GPS
        val isAvailable = description.contains("–¥–æ—Å—Ç—É–ø–Ω–æ") || description.contains("–≤–∫–ª—é—á–µ–Ω")
        logGpsStateChange(context, isAvailable, description)
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPS
    fun getGpsStatusSummary(): String {
        return buildString {
            append("GPS —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ")
            when (lastGpsState) {
                true -> append("‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
                false -> append("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($consecutiveUnavailableCount —Ä–∞–∑)")
                null -> append("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            }
        }
    }

    // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @Deprecated("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logEventWithLocation", ReplaceWith("logEventWithLocation"))
    fun logEventWithEnhancedLocation(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        enhancedLocationManager: EnhancedLocationManager,
        event: String
    ) {
        // üî• –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ
        when {
            event.contains("GPS") || event.contains("–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ignoreCase = true) -> {
                logCriticalEvent(context, bluetoothHelper, enhancedLocationManager, event)
            }

            event.contains("–≤–∫–ª—é—á–µ–Ω") || event.contains("–≤—ã–∫–ª—é—á–µ–Ω") -> {
                logUserAction(context, bluetoothHelper, enhancedLocationManager, event)
            }

            else -> {
                logEventWithLocation(context, bluetoothHelper, enhancedLocationManager, event)
            }
        }
    }

    @Deprecated("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logEventWithLimit", ReplaceWith("logEventWithLimit"))
    fun logEventWithLocationAndLimit(
        context: Context,
        bluetoothHelper: BluetoothHelper,
        locationManager: Any,
        event: String,
        timeLimitSeconds: Int = 60,
        noRepeat: Boolean = false
    ) {
        if (locationManager is EnhancedLocationManager) {
            logEventWithLimit(context, bluetoothHelper, locationManager, event, timeLimitSeconds)
        } else {
            logEvent(context, "$event @ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Å—Ç–∞—Ä—ã–π API)")
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    fun logLocation(context: Context, location: Location) {
        try {
            val logFile = File(context.getExternalFilesDir(null), "logs/location_log.txt")
            logFile.parentFile?.mkdirs()

            val logEntry =
                "${getCurrentTimestamp()}, ${location.latitude}, ${location.longitude}, ${location.accuracy}, ${location.bearing}\n"
            logFile.appendText(logEntry)
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–∫–∞—Ü–∏–∏: ${e.message}")
        }
    }

    // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å GPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    fun getLogStatistics(context: Context): LogStatistics {
        return try {
            val logFile = File(context.getExternalFilesDir(null), "logs/events_log.txt")
            if (!logFile.exists()) {
                LogStatistics(0, 0, 0, 0, "–ù–µ—Ç –ª–æ–≥–æ–≤")
            } else {
                val lines = logFile.readLines()
                val totalEvents = lines.size
                val criticalEvents = lines.count { it.contains("–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï") }
                val gpsEvents = lines.count {
                    it.contains("üõ∞Ô∏è") || it.contains("üì°") || it.contains("üì∂") || it.contains("GPS")
                }
                val userActions = lines.count { it.contains("–î–ï–ô–°–¢–í–ò–ï:") }
                val lastEventTime =
                    lines.lastOrNull()?.substringBefore(" -")?.trim() ?: "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π"

                LogStatistics(totalEvents, criticalEvents, gpsEvents, userActions, lastEventTime)
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            LogStatistics(0, 0, 0, 0, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    fun clearOldLogs(context: Context, daysToKeep: Int = 30): Int {
        return try {
            val logFile = File(context.getExternalFilesDir(null), "logs/events_log.txt")
            if (!logFile.exists()) return 0

            val cutoffTime = System.currentTimeMillis() - (daysToKeep * 24 * 60 * 60 * 1000L)
            val lines = logFile.readLines()

            val filteredLines = lines.filter { line ->
                val timestamp = line.substringBefore(" -").trim()
                try {
                    val date = dateFormat.parse(timestamp)
                    date != null && date.time >= cutoffTime
                } catch (e: Exception) {
                    true // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                }
            }

            val removedCount = lines.size - filteredLines.size
            if (removedCount > 0) {
                logFile.writeText(filteredLines.joinToString("\n") + "\n")
                Log.i(TAG, "–£–¥–∞–ª–µ–Ω–æ $removedCount —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            }

            removedCount
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ${e.message}")
            0
        }
    }

    private fun getCurrentTimestamp(): String {
        return dateFormat.format(Date())
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô data class –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    data class LogStatistics(
        val totalEvents: Int,
        val criticalEvents: Int,
        val gpsEvents: Int,
        val userActions: Int,
        val lastEventTime: String
    )
}