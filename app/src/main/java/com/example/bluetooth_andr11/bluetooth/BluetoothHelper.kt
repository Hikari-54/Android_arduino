package com.example.bluetooth_andr11.bluetooth

import android.Manifest
import android.app.AlertDialog
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import com.example.bluetooth_andr11.ArduinoSimulator
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.MainActivity
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

class BluetoothHelper(private val context: Context) {
    private val bluetoothAdapter: BluetoothAdapter? by lazy {
        val bluetoothManager =
            context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }

    private var bluetoothSocket: BluetoothSocket? = null
    private var inputStream: InputStream? = null
    private var outputStream: OutputStream? = null
    private var isListening = false
    private var isConnected = false
    private var dialogShown = false

    // –ü–æ–ª—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    private var simulationMode = false
    private var arduinoSimulator: ArduinoSimulator? = null
    private var currentScenario = ArduinoSimulator.SimulationScenario.NORMAL

    private val sharedPrefs =
        context.getSharedPreferences("bluetooth_helper_prefs", Context.MODE_PRIVATE)

    init {
        clearSimulationDataIfRelease() // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ—Å–ª–∏ RELEASE
        restoreSimulationState()       // –ü–æ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ DEBUG
    }

    // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

    fun isSimulationEnabled(): Boolean = simulationMode
    fun getCurrentScenario(): ArduinoSimulator.SimulationScenario = currentScenario
    val isDeviceConnected: Boolean get() = if (simulationMode) true else isConnected

    fun showDeviceSelectionDialog(context: Context, onDeviceSelected: (BluetoothDevice) -> Unit) {
        val pairedDevices = getPairedDevices()
        if (pairedDevices.isNullOrEmpty()) {
            Toast.makeText(context, "–ù–µ—Ç —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", Toast.LENGTH_SHORT).show()
            dialogShown = false
            return
        }

        val deviceNames = pairedDevices.map { device ->
            getDeviceName(device)
        }
        val deviceList = pairedDevices.toList()

        val builder = AlertDialog.Builder(context)
        builder.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        builder.setItems(deviceNames.toTypedArray()) { _, which ->
            onDeviceSelected(deviceList[which])
        }
        builder.setOnDismissListener { dialogShown = false }
        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
        builder.show()
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    @Suppress("MissingPermission")
    fun connectToDevice(device: BluetoothDevice, onConnectionResult: (Boolean, String) -> Unit) {
        if (!hasBluetoothPermission()) {
            onConnectionResult(false, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        }

        val uuid = getDeviceUuid(device) ?: run {
            onConnectionResult(false, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return
        }

        CoroutineScope(Dispatchers.IO).launch {
            try {
                // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
                if (!hasBluetoothConnectPermission()) {
                    withContext(Dispatchers.Main) {
                        onConnectionResult(false, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è BLUETOOTH_CONNECT")
                    }
                    return@launch
                }

                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()

                inputStream = bluetoothSocket?.inputStream
                outputStream = bluetoothSocket?.outputStream
                isConnected = true

                withContext(Dispatchers.Main) {
                    val deviceName = getDeviceName(device)
                    onConnectionResult(true, "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ $deviceName")
                    startListening()
                }
            } catch (e: IOException) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                isConnected = false
                withContext(Dispatchers.Main) {
                    onConnectionResult(false, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                }
                closeConnection()
            } catch (e: SecurityException) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${e.message}")
                isConnected = false
                withContext(Dispatchers.Main) {
                    onConnectionResult(false, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth")
                }
            }
        }
    }

    fun listenForData(onDataReceived: (String) -> Unit) {
        if (isConnected && inputStream != null) {
            startListening(onDataReceived) // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
        }
    }

    fun sendCommand(command: String) {
        if (simulationMode) {
            arduinoSimulator?.handleCommand(command)
            return
        }

        if (!isConnected || outputStream == null) {
            Log.w(TAG, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        }

        try {
            outputStream?.write(command.toByteArray())
        } catch (e: IOException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${e.message}")
        }
    }

    fun monitorBluetoothStatus(
        context: Context,
        locationManager: EnhancedLocationManager,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        val filter = IntentFilter().apply {
            addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
            addAction(BluetoothDevice.ACTION_ACL_CONNECTED)
            addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED)
        }

        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                when (intent?.action) {
                    BluetoothAdapter.ACTION_STATE_CHANGED -> {
                        val state =
                            intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR)
                        val isEnabled = state == BluetoothAdapter.STATE_ON

                        if (state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_OFF) {
                            disconnectDevice()
                            LogModule.logEventWithLocation(
                                context!!,
                                this@BluetoothHelper,
                                locationManager,
                                "Bluetooth –≤—ã–∫–ª—é—á–µ–Ω"
                            )
                            dialogShown = false
                        }

                        onStatusChange(isEnabled, isConnected)

                        if (isEnabled && !isConnected && !dialogShown) {
                            dialogShown = true
                            showDeviceSelection(context!!)
                        }
                    }

                    BluetoothDevice.ACTION_ACL_CONNECTED -> {
                        isConnected = true
                        LogModule.logEventWithLocation(
                            context!!, this@BluetoothHelper, locationManager, "Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω"
                        )
                        onStatusChange(true, true)
                    }

                    BluetoothDevice.ACTION_ACL_DISCONNECTED -> {
                        isConnected = false
                        LogModule.logEventWithLocation(
                            context!!, this@BluetoothHelper, locationManager, "Bluetooth –æ—Ç–∫–ª—é—á–µ–Ω"
                        )
                        onStatusChange(true, false)

                        if (isBluetoothEnabled() && !dialogShown) {
                            dialogShown = true
                            showDeviceSelection(context)
                        }
                    }
                }
            }
        }

        context.registerReceiver(receiver, filter)
    }

    fun disconnectDevice() {
        try {
            inputStream?.close()
            outputStream?.close()
            bluetoothSocket?.close()
        } catch (e: IOException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
        } finally {
            isConnected = false
            isListening = false
            bluetoothSocket = null
            dialogShown = false
        }
    }

    fun closeConnection() = disconnectDevice()

    fun isBluetoothEnabled(): Boolean = bluetoothAdapter?.isEnabled == true

    // === –ú–ï–¢–û–î–´ –°–ò–ú–£–õ–Ø–¶–ò–ò ===

    fun enableSimulationMode(enable: Boolean) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ RELEASE
        if (!BuildConfig.DEBUG && enable) {
            Log.w(TAG, "RELEASE —Ä–µ–∂–∏–º: –ø–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            Toast.makeText(context, "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏", Toast.LENGTH_SHORT)
                .show()
            return
        }

        simulationMode = enable
        sharedPrefs.edit().putBoolean("simulation_enabled", enable).apply()

        if (enable) {
            startArduinoSimulation()
            Log.i(TAG, "–°–∏–º—É–ª—è—Ü–∏—è Arduino –≤–∫–ª—é—á–µ–Ω–∞")
        } else {
            stopArduinoSimulation()
            Log.i(TAG, "–°–∏–º—É–ª—è—Ü–∏—è Arduino –≤—ã–∫–ª—é—á–µ–Ω–∞")
        }
    }

    fun clearSimulationDataIfRelease() {
        if (!BuildConfig.DEBUG) {
            sharedPrefs.edit()
                .remove("simulation_enabled")
                .remove("current_scenario")
                .apply()

            simulationMode = false
            stopArduinoSimulation()

            Log.i(TAG, "RELEASE —Ä–µ–∂–∏–º: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
        }
    }

    fun setSimulationScenario(scenario: ArduinoSimulator.SimulationScenario) {
        currentScenario = scenario
        sharedPrefs.edit().putString("current_scenario", scenario.name).apply()
        arduinoSimulator?.setScenario(scenario)
    }

    fun getScenarioInfo(): ScenarioInfo {
        return when (currentScenario) {
            ArduinoSimulator.SimulationScenario.NORMAL ->
                ScenarioInfo("–û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "‚ö™", "–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", 60)

            ArduinoSimulator.SimulationScenario.BATTERY_DRAIN ->
                ScenarioInfo("–†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏", "üîã", "–ë—ã—Å—Ç—Ä–∞—è –ø–æ—Ç–µ—Ä—è –∑–∞—Ä—è–¥–∞", 30)

            ArduinoSimulator.SimulationScenario.HEATING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞", "üî•", "–ù–∞–≥—Ä–µ–≤ –¥–æ 52¬∞C", 45)

            ArduinoSimulator.SimulationScenario.COOLING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è", "‚ùÑÔ∏è", "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ 4¬∞C", 45)

            ArduinoSimulator.SimulationScenario.BAG_OPENING_CLOSING ->
                ScenarioInfo("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏", "üì¶", "–ß–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", 40)

            ArduinoSimulator.SimulationScenario.STRONG_SHAKING ->
                ScenarioInfo("–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞", "üì≥", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è", 35)

            ArduinoSimulator.SimulationScenario.SENSOR_ERRORS ->
                ScenarioInfo("–û—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤", "‚ö†Ô∏è", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏", 50)
        }
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º
    fun setSimulationBattery(level: Int) = arduinoSimulator?.setBatteryLevel(level)
    fun setSimulationTemperatures(upper: Float, lower: Float) =
        arduinoSimulator?.setTemperatures(upper, lower)

    fun triggerSimulationShake(intensity: Float) = arduinoSimulator?.triggerShake(intensity)

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
    @Suppress("MissingPermission")
    private fun getPairedDevices(): Set<BluetoothDevice>? {
        return try {
            if (hasBluetoothConnectPermission()) {
                bluetoothAdapter?.bondedDevices
            } else {
                Log.w(TAG, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è BLUETOOTH_CONNECT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                null
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: ${e.message}")
            null
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
    @Suppress("MissingPermission")
    private fun getDeviceName(device: BluetoothDevice): String {
        return try {
            if (hasBluetoothConnectPermission()) {
                device.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            } else {
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏"
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
            "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞"
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
    @Suppress("MissingPermission")
    private fun getDeviceUuid(device: BluetoothDevice): UUID? {
        return try {
            if (hasBluetoothConnectPermission()) {
                device.uuids?.firstOrNull()?.uuid ?: UUID.randomUUID()
            } else {
                Log.w(TAG, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID")
                null
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID: ${e.message}")
            null
        }
    }

    private fun startListening(onDataReceived: ((String) -> Unit)? = null) {
        if (!isConnected || inputStream == null || isListening) return

        isListening = true
        CoroutineScope(Dispatchers.IO).launch {
            val buffer = ByteArray(1024)
            val dataBuffer = StringBuilder()

            try {
                while (isConnected) {
                    val bytes = inputStream?.read(buffer) ?: break
                    if (bytes > 0) {
                        dataBuffer.append(String(buffer, 0, bytes))
                        processBufferedData(dataBuffer, onDataReceived)
                    }
                }
            } catch (e: IOException) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                closeConnection()
            } finally {
                isListening = false
            }
        }
    }

    private suspend fun processBufferedData(
        buffer: StringBuilder,
        onDataReceived: ((String) -> Unit)?
    ) {
        val data = buffer.toString()
        val lines = data.split("\n")

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        for (i in 0 until lines.size - 1) {
            val line = lines[i].trim()
            if (line.isNotEmpty() && isValidArduinoData(line)) {
                withContext(Dispatchers.Main) {
                    onDataReceived?.invoke(line) ?: (context as? MainActivity)?.handleReceivedData(
                        line
                    )
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
        buffer.clear()
        buffer.append(lines.last())

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
        if (buffer.length > 200) {
            buffer.clear()
        }
    }

    private fun isValidArduinoData(data: String): Boolean {
        val parts = data.split(",")
        if (parts.size != 6) return false

        return try {
            val battery = parts[0].trim().toIntOrNull() ?: return false
            val temp1 = parts[1].trim()
            val temp2 = parts[2].trim()
            val closed = parts[3].trim().toIntOrNull() ?: return false
            val state = parts[4].trim().toIntOrNull() ?: return false
            val overload = parts[5].trim().toFloatOrNull()
                ?: return false // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            battery in 0..100 &&
                    (temp1 == "er" || temp1.toFloatOrNull() != null) &&
                    (temp2 == "er" || temp2.toFloatOrNull() != null) &&
                    closed in 0..1 &&
                    state >= 0 &&
                    overload >= 0.0f // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º overload
        } catch (e: Exception) {
            false
        }
    }

    private fun hasBluetoothPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            hasBluetoothConnectPermission() && hasBluetoothScanPermission()
        } else true
    }

    private fun hasBluetoothConnectPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) ==
                    PackageManager.PERMISSION_GRANTED
        } else true
    }

    private fun hasBluetoothScanPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_SCAN) ==
                    PackageManager.PERMISSION_GRANTED
        } else true
    }

    private fun startArduinoSimulation() {
        arduinoSimulator = ArduinoSimulator { data ->
            (context as? MainActivity)?.handleReceivedData(data)
        }
        arduinoSimulator?.startSimulation()
        isConnected = true
    }

    private fun stopArduinoSimulation() {
        arduinoSimulator?.stopSimulation()
        arduinoSimulator = null
        if (simulationMode) isConnected = false
    }

    private fun restoreSimulationState() {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
        if (!BuildConfig.DEBUG) {
            // –í RELEASE —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            sharedPrefs.edit()
                .putBoolean("simulation_enabled", false)
                .apply()
            Log.i(TAG, "RELEASE —Ä–µ–∂–∏–º: —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        }

        val savedSimulationEnabled = sharedPrefs.getBoolean("simulation_enabled", false)
        val savedScenarioName = sharedPrefs.getString(
            "current_scenario",
            ArduinoSimulator.SimulationScenario.NORMAL.name
        )

        try {
            currentScenario =
                ArduinoSimulator.SimulationScenario.valueOf(savedScenarioName ?: "NORMAL")
        } catch (e: IllegalArgumentException) {
            currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
        }

        if (savedSimulationEnabled) {
            enableSimulationMode(true)
            Log.i(TAG, "DEBUG —Ä–µ–∂–∏–º: —Å–∏–º—É–ª—è—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        }
    }

    private fun showDeviceSelection(context: Context) {
        (context as? ComponentActivity)?.runOnUiThread {
            if (!dialogShown) {
                dialogShown = true
                showDeviceSelectionDialog(context) { device ->
                    connectToDevice(device) { _, message ->
                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                        dialogShown = false
                    }
                }
            }
        }
    }

    data class ScenarioInfo(
        val name: String,
        val icon: String,
        val description: String,
        val durationSeconds: Int
    )

    companion object {
        private const val TAG = "BluetoothHelper"
    }
}