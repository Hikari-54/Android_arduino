package com.example.bluetooth_andr11.bluetooth

import android.Manifest
import android.app.AlertDialog
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import com.example.bluetooth_andr11.simulation.ArduinoSimulator
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.MainActivity
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ Arduino —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ —Å–∏–º—É–ª—è—Ü–∏–µ–π.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ Arduino (H/h - –Ω–∞–≥—Ä–µ–≤, C/c - –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ, L/l - —Å–≤–µ—Ç)
 * - –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
 * - –°–∏–º—É–ª—è—Ü–∏—è Arduino –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ DEBUG —Ä–µ–∂–∏–º)
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–≤—è–∑–∏
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã Arduino:
 * - "H" - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–µ–≤, "h" - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–µ–≤
 * - "C" - –≤–∫–ª—é—á–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ, "c" - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
 * - "L" - –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É, "l" - –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É
 *
 * –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino: "battery,tempHot,tempCold,closed,state,overload"
 */
class BluetoothHelper(private val context: Context) {

    // === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã BluetoothHelper –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun cleanup() {
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            stopArduinoSimulation()

            // –û—Ç–∫–ª—é—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫–∏
            disconnectDevice()

            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            isListening = false

            Log.d(TAG, "üßπ BluetoothHelper –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ BluetoothHelper: ${e.message}")
        }
    }

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    fun getConnectionStatistics(): ConnectionStatistics {
        return ConnectionStatistics(
            isBluetoothEnabled = isBluetoothEnabled(),
            isDeviceConnected = isDeviceConnected,
            isSimulationMode = simulationMode,
            currentScenario = currentScenario,
            isListening = isListening,
            hasInputStream = inputStream != null,
            hasOutputStream = outputStream != null
        )
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
     */
    fun isSystemReady(): Boolean {
        return when {
            simulationMode -> true // –°–∏–º—É–ª—è—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞
            !isBluetoothEnabled() -> false
            !hasBluetoothPermission() -> false
            !isDeviceConnected -> false
            else -> inputStream != null && outputStream != null
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    fun getConnectionStatusDescription(): String {
        return when {
            simulationMode -> "ü§ñ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω"
            !isBluetoothEnabled() -> "üî¥ Bluetooth –≤—ã–∫–ª—é—á–µ–Ω"
            !hasBluetoothPermission() -> "üî¥ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth"
            !isDeviceConnected -> "üü° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
            !isListening -> "üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            else -> "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ"
        }
    }

    // === DATA CLASSES ===

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
     *
     * @param name –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     * @param icon –∏–∫–æ–Ω–∫–∞ –¥–ª—è UI
     * @param description –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
     * @param durationSeconds –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    data class ScenarioInfo(
        val name: String,
        val icon: String,
        val description: String,
        val durationSeconds: Int
    )

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    data class ConnectionStatistics(
        val isBluetoothEnabled: Boolean,
        val isDeviceConnected: Boolean,
        val isSimulationMode: Boolean,
        val currentScenario: ArduinoSimulator.SimulationScenario,
        val isListening: Boolean,
        val hasInputStream: Boolean,
        val hasOutputStream: Boolean
    ) {
        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        fun getSummary(): String {
            val mode = if (isSimulationMode) "–°–∏–º—É–ª—è—Ü–∏—è" else "–†–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            val status = if (isDeviceConnected) "–ø–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            val listening = if (isListening) "—Å–ª—É—à–∞–µ—Ç" else "–Ω–µ —Å–ª—É—à–∞–µ—Ç"
            return "$mode: $status, $listening"
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
         */
        fun hasIssues(): Boolean {
            return !isSimulationMode && (!isBluetoothEnabled || !isDeviceConnected || !hasInputStream || !hasOutputStream)
        }
    }

    companion object {
        private const val TAG = "BluetoothHelper"

        /** –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã Arduino */
        const val COMMAND_HEAT_ON = "H"
        const val COMMAND_HEAT_OFF = "h"
        const val COMMAND_COOL_ON = "C"
        const val COMMAND_COOL_OFF = "c"
        const val COMMAND_LIGHT_ON = "L"
        const val COMMAND_LIGHT_OFF = "l"

        /** –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino */
        const val ARDUINO_DATA_FORMAT = "battery,tempHot,tempCold,closed,state,overload"

        /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö Arduino */
        const val EXPECTED_PARAMETERS_COUNT = 6

        /** –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */
        private const val READ_BUFFER_SIZE = 1024

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */
        private const val MAX_DATA_BUFFER_SIZE = 200

        /** –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–º—Å) */
        private const val READ_DELAY_MS = 10L

        /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ (–º—Å) */
        private const val ACCELEROMETER_LOG_INTERVAL_MS = 2000L
    }

    //    === BLUETOOTH –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===

    /** Bluetooth –∞–¥–∞–ø—Ç–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
    private val bluetoothAdapter: BluetoothAdapter? by lazy {
        val bluetoothManager =
            context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }

    /** –ê–∫—Ç–∏–≤–Ω–æ–µ Bluetooth —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ */
    private var bluetoothSocket: BluetoothSocket? = null

    /** –ü–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino */
    private var inputStream: InputStream? = null

    /** –ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ Arduino */
    private var outputStream: OutputStream? = null

    // === –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===

    /** –ê–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö */
    private var isListening = false

    /** –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ */
    private var isConnected = false

    /** –ü–æ–∫–∞–∑–∞–Ω –ª–∏ –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è) */
    private var dialogShown = false

    // === –°–ò–ú–£–õ–Ø–¶–ò–Ø (DEBUG ONLY) ===

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino */
    private var simulationMode = false

    /** –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ Arduino */
    private var arduinoSimulator: ArduinoSimulator? = null

    /** –¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏ */
    private var currentScenario = ArduinoSimulator.SimulationScenario.NORMAL

    /** SharedPreferences –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ */
    private val sharedPrefs =
        context.getSharedPreferences("bluetooth_helper_prefs", Context.MODE_PRIVATE)

    init {
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ RELEASE —Ä–µ–∂–∏–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        clearSimulationDataIfRelease()
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ DEBUG —Ä–µ–∂–∏–º–µ
        restoreSimulationState()
    }

    // === –ü–£–ë–õ–ò–ß–ù–´–ï –°–í–û–ô–°–¢–í–ê ===

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ */
    fun isSimulationEnabled(): Boolean = simulationMode

    /** –¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏ */
    fun getCurrentScenario(): ArduinoSimulator.SimulationScenario = currentScenario

    /** –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é) */
    val isDeviceConnected: Boolean
        get() = if (simulationMode) true else isConnected

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê–ú–ò ===

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–ø–∞—Ä–µ–Ω–Ω–æ–≥–æ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
     * @param onDeviceSelected callback —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
     */
    fun showDeviceSelectionDialog(context: Context, onDeviceSelected: (BluetoothDevice) -> Unit) {
        val pairedDevices = getPairedDevices()
        if (pairedDevices.isNullOrEmpty()) {
            Toast.makeText(context, "–ù–µ—Ç —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", Toast.LENGTH_SHORT).show()
            dialogShown = false
            return
        }

        val deviceNames = pairedDevices.map { device -> getDeviceName(device) }
        val deviceList = pairedDevices.toList()

        AlertDialog.Builder(context).apply {
            setTitle("–í—ã–±–µ—Ä–∏—Ç–µ Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            setItems(deviceNames.toTypedArray()) { _, which ->
                onDeviceSelected(deviceList[which])
            }
            setOnDismissListener { dialogShown = false }
            setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            show()
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
     *
     * @param device —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @param onConnectionResult callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (success, message)
     */
    @Suppress("MissingPermission")
    fun connectToDevice(device: BluetoothDevice, onConnectionResult: (Boolean, String) -> Unit) {
        if (!hasBluetoothPermission()) {
            onConnectionResult(false, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        }

        val uuid = getDeviceUuid(device) ?: run {
            onConnectionResult(false, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return
        }

        CoroutineScope(Dispatchers.IO).launch {
            try {
                if (!hasBluetoothConnectPermission()) {
                    withContext(Dispatchers.Main) {
                        onConnectionResult(false, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è BLUETOOTH_CONNECT")
                    }
                    return@launch
                }

                // –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                inputStream = bluetoothSocket?.inputStream
                outputStream = bluetoothSocket?.outputStream
                isConnected = true

                withContext(Dispatchers.Main) {
                    val deviceName = getDeviceName(device)
                    onConnectionResult(true, "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ $deviceName")
                    startListening()
                }

                Log.i(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${getDeviceName(device)}")

            } catch (e: IOException) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                isConnected = false
                withContext(Dispatchers.Main) {
                    onConnectionResult(false, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                }
                closeConnection()
            } catch (e: SecurityException) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${e.message}")
                isConnected = false
                withContext(Dispatchers.Main) {
                    onConnectionResult(false, "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth")
                }
            }
        }
    }

    // === –û–ë–ú–ï–ù –î–ê–ù–ù–´–ú–ò ===

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     *
     * @param onDataReceived callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    fun listenForData(onDataReceived: (String) -> Unit) {
        if (isConnected && inputStream != null) {
            startListening(onDataReceived)
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ Arduino —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä
     *
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
     * - H/h: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–µ–≤–æ–º
     * - C/c: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º
     * - L/l: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
     *
     * @param command –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–¥–Ω–∞ –±—É–∫–≤–∞)
     */
    fun sendCommand(command: String) {
        Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: '$command'")

        // –í —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–∏–º—É–ª—è—Ç–æ—Ä—É
        if (simulationMode) {
            arduinoSimulator?.handleCommand(command)
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        if (!isConnected || outputStream == null) {
            Log.w(TAG, "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        }

        try {
            // Arduino –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            val commandWithNewline = "$command\n"
            outputStream?.write(commandWithNewline.toByteArray())
            outputStream?.flush()

            Log.d(TAG, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ '$command' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        } catch (e: IOException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã '$command': ${e.message}")
            isConnected = false
            closeConnection()
        }
    }

    // === –ú–û–ù–ò–¢–û–†–ò–ù–ì BLUETOOTH ===

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     *
     * @param context –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param locationManager –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param onStatusChange callback —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (isEnabled, isConnected)
     */
    fun monitorBluetoothStatus(
        context: Context,
        locationManager: EnhancedLocationManager,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        val filter = IntentFilter().apply {
            addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
            addAction(BluetoothDevice.ACTION_ACL_CONNECTED)
            addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED)
        }

        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                when (intent?.action) {
                    BluetoothAdapter.ACTION_STATE_CHANGED -> {
                        handleBluetoothStateChange(context, locationManager, intent, onStatusChange)
                    }

                    BluetoothDevice.ACTION_ACL_CONNECTED -> {
                        handleDeviceConnected(context, locationManager, onStatusChange)
                    }

                    BluetoothDevice.ACTION_ACL_DISCONNECTED -> {
                        handleDeviceDisconnected(context, locationManager, onStatusChange)
                    }
                }
            }
        }

        context.registerReceiver(receiver, filter)
        Log.d(TAG, "üéß Bluetooth –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï–ú ===

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    fun disconnectDevice() {
        try {
            inputStream?.close()
            outputStream?.close()
            bluetoothSocket?.close()
            Log.d(TAG, "üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        } catch (e: IOException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
        } finally {
            isConnected = false
            isListening = false
            bluetoothSocket = null
            inputStream = null
            outputStream = null
            dialogShown = false
        }
    }

    /**
     * –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è disconnectDevice() –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    fun closeConnection() = disconnectDevice()

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä
     */
    fun isBluetoothEnabled(): Boolean = bluetoothAdapter?.isEnabled == true

    // === –°–ò–ú–£–õ–Ø–¶–ò–Ø ARDUINO (DEBUG ONLY) ===

    /**
     * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino
     * –í RELEASE —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     *
     * @param enable true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    fun enableSimulationMode(enable: Boolean) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤ RELEASE —Ä–µ–∂–∏–º–µ
        if (!BuildConfig.DEBUG && enable) {
            Log.w(TAG, "üö´ RELEASE —Ä–µ–∂–∏–º: –ø–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            Toast.makeText(context, "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏", Toast.LENGTH_SHORT)
                .show()
            return
        }

        simulationMode = enable
        sharedPrefs.edit().putBoolean("simulation_enabled", enable).apply()

        if (enable) {
            startArduinoSimulation()
            Log.i(TAG, "üîß –°–∏–º—É–ª—è—Ü–∏—è Arduino –≤–∫–ª—é—á–µ–Ω–∞")
        } else {
            stopArduinoSimulation()
            Log.i(TAG, "üîß –°–∏–º—É–ª—è—Ü–∏—è Arduino –≤—ã–∫–ª—é—á–µ–Ω–∞")
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ RELEASE —Ä–µ–∂–∏–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    fun clearSimulationDataIfRelease() {
        if (!BuildConfig.DEBUG) {
            sharedPrefs.edit()
                .remove("simulation_enabled")
                .remove("current_scenario")
                .apply()

            simulationMode = false
            stopArduinoSimulation()

            Log.i(TAG, "üßπ RELEASE —Ä–µ–∂–∏–º: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏
     *
     * @param scenario –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    fun setSimulationScenario(scenario: ArduinoSimulator.SimulationScenario) {
        currentScenario = scenario
        sharedPrefs.edit().putString("current_scenario", scenario.name).apply()
        arduinoSimulator?.setScenario(scenario)
        Log.d(TAG, "üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: $scenario")
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
     */
    fun getScenarioInfo(): ScenarioInfo {
        return when (currentScenario) {
            ArduinoSimulator.SimulationScenario.NORMAL ->
                ScenarioInfo("–û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "‚ö™", "–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", 60)

            ArduinoSimulator.SimulationScenario.BATTERY_DRAIN ->
                ScenarioInfo("–†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏", "üîã", "–ë—ã—Å—Ç—Ä–∞—è –ø–æ—Ç–µ—Ä—è –∑–∞—Ä—è–¥–∞", 30)

            ArduinoSimulator.SimulationScenario.HEATING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞", "üî•", "–ù–∞–≥—Ä–µ–≤ –¥–æ 52¬∞C", 45)

            ArduinoSimulator.SimulationScenario.COOLING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è", "‚ùÑÔ∏è", "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ 4¬∞C", 45)

            ArduinoSimulator.SimulationScenario.BAG_OPENING_CLOSING ->
                ScenarioInfo("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏", "üì¶", "–ß–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", 40)

            ArduinoSimulator.SimulationScenario.STRONG_SHAKING ->
                ScenarioInfo("–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞", "üì≥", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è", 35)

            ArduinoSimulator.SimulationScenario.SENSOR_ERRORS ->
                ScenarioInfo("–û—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤", "‚ö†Ô∏è", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏", 50)
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ú–£–õ–Ø–¢–û–†–û–ú ===

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
     */
    fun setSimulationBattery(level: Int) = arduinoSimulator?.setBatteryLevel(level)

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç—Å–µ–∫–æ–≤ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
     */
    fun setSimulationTemperatures(upper: Float, lower: Float) =
        arduinoSimulator?.setTemperatures(upper, lower)

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
     */
    fun triggerSimulationShake(intensity: Float) = arduinoSimulator?.triggerShake(intensity)

    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    @Suppress("MissingPermission")
    private fun getPairedDevices(): Set<BluetoothDevice>? {
        return try {
            if (hasBluetoothConnectPermission()) {
                bluetoothAdapter?.bondedDevices
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è BLUETOOTH_CONNECT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                null
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∞—Ä–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: ${e.message}")
            null
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    @Suppress("MissingPermission")
    private fun getDeviceName(device: BluetoothDevice): String {
        return try {
            if (hasBluetoothConnectPermission()) {
                device.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            } else {
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏"
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
            "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞"
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    @Suppress("MissingPermission")
    private fun getDeviceUuid(device: BluetoothDevice): UUID? {
        return try {
            if (hasBluetoothConnectPermission()) {
                device.uuids?.firstOrNull()?.uuid ?: UUID.randomUUID()
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID")
                null
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UUID: ${e.message}")
            null
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
     */
    private fun startListening(onDataReceived: ((String) -> Unit)? = null) {
        if (!isConnected || inputStream == null || isListening) return

        isListening = true
        Log.d(TAG, "üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Bluetooth –¥–∞–Ω–Ω—ã—Ö")

        CoroutineScope(Dispatchers.IO).launch {
            val buffer = ByteArray(READ_BUFFER_SIZE)
            val dataBuffer = StringBuilder()

            try {
                while (isConnected && isListening) {
                    val bytes = inputStream?.read(buffer) ?: break
                    if (bytes > 0) {
                        val newData = String(buffer, 0, bytes)
                        dataBuffer.append(newData)
                        processBufferedData(dataBuffer, onDataReceived)
                    }
                    kotlinx.coroutines.delay(READ_DELAY_MS)
                }
            } catch (e: IOException) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                withContext(Dispatchers.Main) {
                    isConnected = false
                    closeConnection()
                }
            } finally {
                isListening = false
                Log.d(TAG, "üîá –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
     */
    private suspend fun processBufferedData(
        buffer: StringBuilder,
        onDataReceived: ((String) -> Unit)?
    ) {
        val data = buffer.toString()
        val lines = data.split("\n")

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (–æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π)
        for (i in 0 until lines.size - 1) {
            val line = lines[i].trim()
            if (line.isNotEmpty()) {
                if (isValidArduinoData(line)) {
                    Log.d(TAG, "‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Arduino: '$line'")
                    withContext(Dispatchers.Main) {
                        onDataReceived?.invoke(line)
                            ?: (context as? MainActivity)?.handleReceivedData(line)
                    }
                } else {
                    Log.w(TAG, "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '$line' (–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${line.split(",").size})")
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø–æ–ª–Ω—É—é) —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ
        buffer.clear()
        buffer.append(lines.last())

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
        if (buffer.length > MAX_DATA_BUFFER_SIZE) {
            Log.w(TAG, "‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω (${buffer.length} —Å–∏–º–≤–æ–ª–æ–≤), –æ—á–∏—â–∞–µ–º")
            buffer.clear()
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino
     * –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "battery,temp1,temp2,closed,state,overload"
     */
    private fun isValidArduinoData(data: String): Boolean {
        val parts = data.split(",")
        if (parts.size != 6) return false

        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            val battery = parts[0].trim().toIntOrNull() ?: return false
            val temp1 = parts[1].trim()
            val temp2 = parts[2].trim()
            val closed = parts[3].trim().toIntOrNull() ?: return false
            val state = parts[4].trim().toIntOrNull() ?: return false
            val overload = parts[5].trim().toFloatOrNull() ?: return false

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
            battery in 0..100 &&
                    (temp1 == "er" || temp1.toFloatOrNull() != null) &&
                    (temp2 == "er" || temp2.toFloatOrNull() != null) &&
                    closed in 0..1 &&
                    state >= 0 &&
                    overload >= 0.0f
        } catch (e: Exception) {
            false
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò BLUETOOTH –°–û–ë–´–¢–ò–ô ===

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞
     */
    private fun handleBluetoothStateChange(
        context: Context?,
        locationManager: EnhancedLocationManager,
        intent: Intent,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        val state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR)
        val isEnabled = state == BluetoothAdapter.STATE_ON

        if (state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_OFF) {
            disconnectDevice()
            LogModule.logEventWithLocation(
                context!!, this, locationManager, "Bluetooth –≤—ã–∫–ª—é—á–µ–Ω"
            )
            dialogShown = false
        }

        onStatusChange(isEnabled, isConnected)

        if (isEnabled && !isConnected && !dialogShown) {
            dialogShown = true
            showDeviceSelection(context!!)
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    private fun handleDeviceConnected(
        context: Context?,
        locationManager: EnhancedLocationManager,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        isConnected = true
        LogModule.logEventWithLocation(
            context!!, this, locationManager, "Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω"
        )
        onStatusChange(true, true)
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    private fun handleDeviceDisconnected(
        context: Context?,
        locationManager: EnhancedLocationManager,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        isConnected = false
        LogModule.logEventWithLocation(
            context!!, this, locationManager, "Bluetooth –æ—Ç–∫–ª—é—á–µ–Ω"
        )
        onStatusChange(true, false)

        if (isBluetoothEnabled() && !dialogShown) {
            dialogShown = true
            showDeviceSelection(context)
        }
    }

    // === –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô ===

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun hasBluetoothPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            hasBluetoothConnectPermission() && hasBluetoothScanPermission()
        } else true
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ BLUETOOTH_CONNECT (Android 12+)
     */
    private fun hasBluetoothConnectPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) ==
                    PackageManager.PERMISSION_GRANTED
        } else true
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ BLUETOOTH_SCAN (Android 12+)
     */
    private fun hasBluetoothScanPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_SCAN) ==
                    PackageManager.PERMISSION_GRANTED
        } else true
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ú–£–õ–Ø–¢–û–†–û–ú ===

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä Arduino
     */
    private fun startArduinoSimulation() {
        arduinoSimulator = ArduinoSimulator { data ->
            (context as? MainActivity)?.handleReceivedData(data)
        }
        arduinoSimulator?.startSimulation()
        isConnected = true
        Log.d(TAG, "ü§ñ –°–∏–º—É–ª—è—Ç–æ—Ä Arduino –∑–∞–ø—É—â–µ–Ω")
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä Arduino
     */
    private fun stopArduinoSimulation() {
        arduinoSimulator?.stopSimulation()
        arduinoSimulator = null
        if (simulationMode) isConnected = false
        Log.d(TAG, "ü§ñ –°–∏–º—É–ª—è—Ç–æ—Ä Arduino –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑ SharedPreferences
     */
    private fun restoreSimulationState() {
        // –í RELEASE —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        if (!BuildConfig.DEBUG) {
            sharedPrefs.edit().putBoolean("simulation_enabled", false).apply()
            Log.i(TAG, "üö´ RELEASE —Ä–µ–∂–∏–º: —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        }

        // –í DEBUG —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        val savedSimulationEnabled = sharedPrefs.getBoolean("simulation_enabled", false)
        val savedScenarioName = sharedPrefs.getString(
            "current_scenario",
            ArduinoSimulator.SimulationScenario.NORMAL.name
        )

        try {
            currentScenario =
                ArduinoSimulator.SimulationScenario.valueOf(savedScenarioName ?: "NORMAL")
        } catch (e: IllegalArgumentException) {
            currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π '$savedScenarioName', –∏—Å–ø–æ–ª—å–∑—É–µ–º NORMAL")
        }

        if (savedSimulationEnabled) {
            enableSimulationMode(true)
            Log.i(TAG, "üîß DEBUG —Ä–µ–∂–∏–º: —Å–∏–º—É–ª—è—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ UI –ø–æ—Ç–æ–∫–µ
     */
    private fun showDeviceSelection(context: Context) {
        (context as? ComponentActivity)?.runOnUiThread {
            if (!dialogShown) {
                dialogShown = true
                showDeviceSelectionDialog(context) { device ->
                    connectToDevice(device) { _, message ->
                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                        dialogShown = false
                    }
                }
            }
        }
    }
}
