package com.example.bluetooth_andr11.bluetooth

import android.Manifest
import android.app.AlertDialog
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import com.example.bluetooth_andr11.ArduinoSimulator
import com.example.bluetooth_andr11.MainActivity
import com.example.bluetooth_andr11.location.LocationManager
import com.example.bluetooth_andr11.log.LogModule
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

class BluetoothHelper(private val context: Context) {
    private val bluetoothAdapter: BluetoothAdapter? by lazy {
        val bluetoothManager =
            context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }
    private var bluetoothSocket: BluetoothSocket? = null
    private var inputStream: InputStream? = null
    private var outputStream: OutputStream? = null
    private var isListening = false // Prevent duplicate coroutine starts
    private var isConnected = false

    private var dialogShown = false // –ß—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ

    // üî• –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private var simulationMode = false
    private var arduinoSimulator: ArduinoSimulator? = null
    private var currentScenario = ArduinoSimulator.SimulationScenario.NORMAL

    // SharedPreferences –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private val sharedPrefs =
        context.getSharedPreferences("bluetooth_helper_prefs", Context.MODE_PRIVATE)

    init {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        restoreSimulationState()
    }

    // üî• –ù–û–í–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fun isSimulationEnabled(): Boolean = simulationMode
    fun getCurrentScenario(): ArduinoSimulator.SimulationScenario = currentScenario

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    private fun getPairedDevices(): Set<BluetoothDevice>? {
        return try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                if (ContextCompat.checkSelfPermission(
                        context, Manifest.permission.BLUETOOTH_CONNECT
                    ) == PackageManager.PERMISSION_GRANTED
                ) {
                    bluetoothAdapter?.bondedDevices
                } else {
                    Log.e("BluetoothHelper", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ BLUETOOTH_CONNECT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    null
                }
            } else {
                bluetoothAdapter?.bondedDevices
            }
        } catch (e: SecurityException) {
            Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: ${e.message}")
            null
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ Bluetooth
    fun disconnectDevice() {
        try {
            inputStream?.close()
            outputStream?.close()
            bluetoothSocket?.close()
            isConnected = false
            isListening = false
            Log.d("BluetoothHelper", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        } catch (e: IOException) {
            Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
        } finally {
            bluetoothSocket = null
            dialogShown = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
    }

    fun showDeviceSelectionDialog(context: Context, onDeviceSelected: (BluetoothDevice) -> Unit) {
        val pairedDevices = try {
            getPairedDevices()
        } catch (e: SecurityException) {
            Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: ${e.message}")
            Toast.makeText(context, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∞—Ä–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", Toast.LENGTH_SHORT)
                .show()
            dialogShown = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            return
        }

        if (pairedDevices.isNullOrEmpty()) {
            Toast.makeText(context, "–ù–µ—Ç —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", Toast.LENGTH_SHORT).show()
            dialogShown = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç
            return
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–º–µ–Ω–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        val deviceNames = pairedDevices.map { device ->
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    if (ContextCompat.checkSelfPermission(
                            context, Manifest.permission.BLUETOOTH_CONNECT
                        ) == PackageManager.PERMISSION_GRANTED
                    ) {
                        device.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
                    } else {
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                    }
                } else {
                    device.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
                }
            } catch (e: SecurityException) {
                Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${e.message}")
                "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞"
            }
        }

        val deviceList = pairedDevices.toList()

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        val builder = AlertDialog.Builder(context)
        builder.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        builder.setItems(deviceNames.toTypedArray()) { _, which ->
            onDeviceSelected(deviceList[which])
        }
        builder.setOnDismissListener {
            dialogShown = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        }
        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
        builder.show()
    }

    fun connectToDevice(device: BluetoothDevice, onConnectionResult: (Boolean, String) -> Unit) {
        if (!hasBluetoothPermission()) {
            onConnectionResult(false, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        }

        val uuid = try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                if (ContextCompat.checkSelfPermission(
                        context,
                        Manifest.permission.BLUETOOTH_CONNECT
                    ) == PackageManager.PERMISSION_GRANTED
                ) {
                    device.uuids?.firstOrNull()?.uuid ?: UUID.randomUUID()
                } else {
                    onConnectionResult(false, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è BLUETOOTH_CONNECT –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    return
                }
            } else {
                device.uuids?.firstOrNull()?.uuid ?: UUID.randomUUID()
            }
        } catch (e: SecurityException) {
            Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ UUID: ${e.message}")
            onConnectionResult(false, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ UUID")
            return
        }

        CoroutineScope(Dispatchers.IO).launch {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)

                bluetoothSocket?.connect()

                inputStream = bluetoothSocket?.inputStream
                outputStream = bluetoothSocket?.outputStream
                isConnected = true

                withContext(Dispatchers.Main) {
                    onConnectionResult(
                        true,
                        "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${device.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"}"
                    )
                    listenForDataSafely()
                }
            } catch (e: IOException) {
                Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                isConnected = false
                withContext(Dispatchers.Main) {
                    onConnectionResult(false, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                }
                closeConnection()
            }
        }
    }

    fun listenForDataSafely() {
        if (isConnected && inputStream != null) {
            listenForData { data ->
                Log.d("BluetoothHelper", "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $data")
                (context as? MainActivity)?.handleReceivedData(data)
            }
        } else {
            Log.e("BluetoothHelper", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        }
    }

    // Listen for incoming data from the connected device
    fun listenForData(onDataReceived: (String) -> Unit) {
        if (!isConnected || inputStream == null || isListening) {
            Log.e("BluetoothHelper", "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        }

        isListening = true
        var retryCount = 0
        val maxRetries = 3 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        CoroutineScope(Dispatchers.IO).launch {
            val buffer = ByteArray(1024)
            try {
                while (isConnected) {
                    val bytes = inputStream?.read(buffer) ?: break
                    if (bytes > 0) {
                        val data = String(buffer, 0, bytes)
                        withContext(Dispatchers.Main) {
                            onDataReceived(data)
                        }
                    }
                }
            } catch (e: IOException) {
                if (retryCount < maxRetries) {
                    retryCount++
                    Log.e(
                        "BluetoothHelper",
                        "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${e.message}. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount} –∏–∑ $maxRetries"
                    )
                    delay(1000) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    listenForData(onDataReceived) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                } else {
                    Log.e(
                        "BluetoothHelper",
                        "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"
                    )
                    closeConnection()
                }
            } finally {
                isListening = false
                if (isConnected) {
                    Log.d("BluetoothHelper", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞")
                    listenForData(onDataReceived) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                }
            }
        }
    }

    // Close the Bluetooth connection
    fun closeConnection() {
        try {
            inputStream?.close()
            outputStream?.close()
            bluetoothSocket?.close()
        } catch (e: IOException) {
            Log.e("BluetoothHelper", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}")
        } finally {
            isConnected = false
            isListening = false
            bluetoothSocket = null
            Log.d("BluetoothHelper", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        }
    }

    // Check Bluetooth permissions
    private fun hasBluetoothPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val permissions = listOf(
                Manifest.permission.BLUETOOTH_CONNECT, Manifest.permission.BLUETOOTH_SCAN
            )
            permissions.all {
                ContextCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED
            }
        } else {
            true
        }
    }

    fun monitorBluetoothStatus(
        context: Context,
        locationManager: LocationManager,
        onStatusChange: (Boolean, Boolean) -> Unit
    ) {
        val filter = IntentFilter().apply {
            addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
            addAction(BluetoothDevice.ACTION_ACL_CONNECTED)
            addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED)
        }

        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                when (intent?.action) {
                    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth-–∞–¥–∞–ø—Ç–µ—Ä–∞
                    BluetoothAdapter.ACTION_STATE_CHANGED -> {
                        val state =
                            intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR)
                        val isEnabled = state == BluetoothAdapter.STATE_ON

                        if (state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_OFF) {
                            disconnectDevice()
                            logBluetoothEvent(context!!, locationManager, "Bluetooth –≤—ã–∫–ª—é—á–µ–Ω")
                            dialogShown = false
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        onStatusChange(isEnabled, isConnected)

                        // –ï—Å–ª–∏ Bluetooth –≤–∫–ª—é—á–µ–Ω –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        if (isEnabled) {
                            if (!isConnected && !dialogShown) {
                                dialogShown = true
                                showDeviceSelection(context!!)
                            }
                        }
                    }

                    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    BluetoothDevice.ACTION_ACL_CONNECTED -> {
                        isConnected = true
                        logBluetoothEvent(
                            context!!, locationManager, "Bluetooth —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        )
                        onStatusChange(true, true)
                    }

                    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    BluetoothDevice.ACTION_ACL_DISCONNECTED -> {
                        isConnected = false
                        logBluetoothEvent(
                            context!!, locationManager, "Bluetooth —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ"
                        )
                        onStatusChange(true, false)

                        // –ï—Å–ª–∏ Bluetooth –≤–∫–ª—é—á–µ–Ω, –Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        if (isBluetoothEnabled() && !dialogShown) {
                            dialogShown = true
                            showDeviceSelection(context)
                        }
                    }
                }
            }
        }

        context.registerReceiver(receiver, filter)
    }

    private fun logBluetoothEvent(
        context: Context, locationManager: LocationManager, event: String
    ) {
        CoroutineScope(Dispatchers.IO).launch {
            val coordinates = locationManager.getCurrentCoordinates()
            val logMessage = if (coordinates.isEmpty()) {
                "$event @ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            } else {
                "$event @ $coordinates"
            }

            LogModule.logEvent(context, logMessage)
        }
    }

    private fun showDeviceSelection(context: Context?) {
        (context as? ComponentActivity)?.runOnUiThread {
            if (!dialogShown) {
                dialogShown = true
                showDeviceSelectionDialog(context) { device ->
                    connectToDevice(device) { success, message ->
                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                        dialogShown = false
                    }
                }
            }
        }
    }

    fun isBluetoothEnabled(): Boolean {
        return bluetoothAdapter?.isEnabled == true
    }

    // ========================================================================
    // üî• –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–ú–£–õ–Ø–¶–ò–ò

    // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fun enableSimulationMode(enable: Boolean) {
        simulationMode = enable

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sharedPrefs.edit()
            .putBoolean("simulation_enabled", enable)
            .apply()

        if (enable) {
            Log.d("BluetoothHelper", "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino")
            startArduinoSimulation()
        } else {
            Log.d("BluetoothHelper", "–í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino")
            stopArduinoSimulation()
        }
    }

    private fun startArduinoSimulation() {
        arduinoSimulator = ArduinoSimulator { data ->
            // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ Arduino
            (context as? MainActivity)?.handleReceivedData(data)
        }
        arduinoSimulator?.startSimulation()

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        isConnected = true
    }

    private fun stopArduinoSimulation() {
        arduinoSimulator?.stopSimulation()
        arduinoSimulator = null

        if (simulationMode) {
            isConnected = false
        }
    }

    // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    fun setSimulationScenario(scenario: ArduinoSimulator.SimulationScenario) {
        currentScenario = scenario

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        sharedPrefs.edit()
            .putString("current_scenario", scenario.name)
            .apply()

        arduinoSimulator?.setScenario(scenario)
        Log.d("BluetoothHelper", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: $scenario")
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private fun restoreSimulationState() {
        val savedSimulationEnabled = sharedPrefs.getBoolean("simulation_enabled", false)
        val savedScenarioName = sharedPrefs.getString(
            "current_scenario",
            ArduinoSimulator.SimulationScenario.NORMAL.name
        )

        try {
            currentScenario =
                ArduinoSimulator.SimulationScenario.valueOf(savedScenarioName ?: "NORMAL")
        } catch (e: IllegalArgumentException) {
            currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
        }

        if (savedSimulationEnabled) {
            enableSimulationMode(true)
        }

        Log.d(
            "BluetoothHelper",
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–∏–º—É–ª—è—Ü–∏—è=$savedSimulationEnabled, —Å—Ü–µ–Ω–∞—Ä–∏–π=$currentScenario"
        )
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    fun getScenarioInfo(): ScenarioInfo {
        return when (currentScenario) {
            ArduinoSimulator.SimulationScenario.NORMAL ->
                ScenarioInfo("–û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "‚ö™", "–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", 60)

            ArduinoSimulator.SimulationScenario.BATTERY_DRAIN ->
                ScenarioInfo("–†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏", "üîã", "–ë—ã—Å—Ç—Ä–∞—è –ø–æ—Ç–µ—Ä—è –∑–∞—Ä—è–¥–∞", 30)

            ArduinoSimulator.SimulationScenario.HEATING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞", "üî•", "–ù–∞–≥—Ä–µ–≤ –¥–æ 52¬∞C", 45)

            ArduinoSimulator.SimulationScenario.COOLING_CYCLE ->
                ScenarioInfo("–¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è", "‚ùÑÔ∏è", "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ 4¬∞C", 45)

            ArduinoSimulator.SimulationScenario.BAG_OPENING_CLOSING ->
                ScenarioInfo("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏", "üì¶", "–ß–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", 40)

            ArduinoSimulator.SimulationScenario.STRONG_SHAKING ->
                ScenarioInfo("–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞", "üì≥", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è", 35)

            ArduinoSimulator.SimulationScenario.SENSOR_ERRORS ->
                ScenarioInfo("–û—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤", "‚ö†Ô∏è", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏", 50)
        }
    }

    // üî• –ù–û–í–´–ô data class –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    data class ScenarioInfo(
        val name: String,
        val icon: String,
        val description: String,
        val durationSeconds: Int
    )

    // üî• –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
    fun sendCommand(command: String) {
        if (simulationMode && arduinoSimulator != null) {
            Log.d("BluetoothHelper", "–°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã Arduino: $command")
            arduinoSimulator?.handleCommand(command)
            return
        }

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
        if (!isConnected || outputStream == null) {
            Log.e("BluetoothHelper", "Not connected or output stream unavailable")
            return
        }

        try {
            outputStream?.write(command.toByteArray())
        } catch (e: IOException) {
            Log.e("BluetoothHelper", "Error sending command: ${e.message}")
        }
    }

    // üî• –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    val isDeviceConnected: Boolean
        get() = if (simulationMode) true else isConnected

    // üî• –ù–û–í–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º
    fun setSimulationBattery(level: Int) {
        arduinoSimulator?.setBatteryLevel(level)
    }

    fun setSimulationTemperatures(upper: Float, lower: Float) {
        arduinoSimulator?.setTemperatures(upper, lower)
    }

    fun triggerSimulationShake(intensity: Float) {
        arduinoSimulator?.triggerShake(intensity)
    }
}