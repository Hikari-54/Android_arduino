package com.example.bluetooth_andr11.ui.debug

import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.bluetooth_andr11.simulation.ArduinoSimulator
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.location.LocationMode
import com.example.bluetooth_andr11.ui.location.LocationDiagnostics
import com.example.bluetooth_andr11.ui.location.LocationStatusWidget
import kotlinx.coroutines.delay

/**
 * üîß –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPS/Location —Ä–µ–∂–∏–º–∞–º–∏
 * - ü§ñ –°–∏–º—É–ª—è—Ü–∏—è Arduino –¥–∞–Ω–Ω—ã—Ö
 * - üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
 * - üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
 *
 * ‚ö†Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
 */
@Composable
fun DebugControlPanel(
    bluetoothHelper: BluetoothHelper,
    locationManager: EnhancedLocationManager,
    modifier: Modifier = Modifier
) {
    // üîí –ó–∞—â–∏—Ç–∞: —Å–∫—Ä—ã–≤–∞–µ–º –≤ RELEASE
    if (!BuildConfig.DEBUG) return

    val context = LocalContext.current

    // ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino
    var isSimulationEnabled by remember { mutableStateOf(bluetoothHelper.isSimulationEnabled()) }
    var currentScenario by remember { mutableStateOf(bluetoothHelper.getCurrentScenario()) }
    var scenarioInfo by remember { mutableStateOf(bluetoothHelper.getScenarioInfo()) }

    // üìç –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    var showLocationDiagnostics by remember { mutableStateOf(false) }

    // ‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    var scenarioProgress by remember { mutableFloatStateOf(0f) }
    var timeRemaining by remember { mutableIntStateOf(0) }

    // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    LaunchedEffect(currentScenario, isSimulationEnabled) {
        if (isSimulationEnabled && currentScenario != ArduinoSimulator.SimulationScenario.NORMAL) {
            val totalDuration = scenarioInfo.durationSeconds
            var elapsed = 0

            while (elapsed < totalDuration && isSimulationEnabled) {
                delay(1000)
                elapsed++
                scenarioProgress = elapsed.toFloat() / totalDuration
                timeRemaining = totalDuration - elapsed
            }

            // ‚úÖ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
            if (elapsed >= totalDuration) {
                currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
                bluetoothHelper.setSimulationScenario(currentScenario)
                scenarioInfo = bluetoothHelper.getScenarioInfo()
                scenarioProgress = 0f
            }
        }
    }

    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFF2D2D2D)),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
            Text(
                text = "üîß –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏",
                style = MaterialTheme.typography.titleLarge,
                color = Color.White,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(16.dp))

            // üìç –°–ï–ö–¶–ò–Ø: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
            LocationControlSection(
                locationManager = locationManager,
                showDiagnostics = showLocationDiagnostics,
                onToggleDiagnostics = { showLocationDiagnostics = !showLocationDiagnostics }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ü§ñ –°–ï–ö–¶–ò–Ø: –°–∏–º—É–ª—è—Ü–∏—è Arduino
            ArduinoSimulationSection(
                bluetoothHelper = bluetoothHelper,
                isSimulationEnabled = isSimulationEnabled,
                currentScenario = currentScenario,
                scenarioInfo = scenarioInfo,
                scenarioProgress = scenarioProgress,
                timeRemaining = timeRemaining,
                onToggleSimulation = { enabled ->
                    isSimulationEnabled = enabled
                    bluetoothHelper.enableSimulationMode(enabled)
                    if (!enabled) {
                        scenarioProgress = 0f
                        timeRemaining = 0
                    }
                },
                onScenarioChange = { scenario ->
                    currentScenario = scenario
                    bluetoothHelper.setSimulationScenario(scenario)
                    scenarioInfo = bluetoothHelper.getScenarioInfo()
                    scenarioProgress = 0f
                }
            )
        }
    }
}

/**
 * üìç –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
 */
@Composable
private fun LocationControlSection(
    locationManager: EnhancedLocationManager,
    showDiagnostics: Boolean,
    onToggleDiagnostics: () -> Unit
) {
    val context = LocalContext.current

    // üéØ –í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    LocationStatusWidget(
        locationManager = locationManager,
        onModeChange = { mode: LocationMode ->
            locationManager.setLocationMode(mode)
            Toast.makeText(context, "–†–µ–∂–∏–º GPS: ${mode.name}", Toast.LENGTH_SHORT).show()
        }
    )

    Spacer(modifier = Modifier.height(12.dp))

    // üéõÔ∏è –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPS
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        GpsActionButton(
            emoji = "üéØ",
            label = "GPS",
            color = Color(0xFF4CAF50),
            modifier = Modifier.weight(1f),
            onClick = {
                locationManager.forceLocationUpdate(LocationMode.HIGH_ACCURACY)
                Toast.makeText(context, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π GPS –∑–∞–ø—Ä–æ—Å", Toast.LENGTH_SHORT).show()
            }
        )

        GpsActionButton(
            emoji = "üì∂",
            label = "Network",
            color = Color(0xFF2196F3),
            modifier = Modifier.weight(1f),
            onClick = {
                locationManager.forceLocationUpdate(LocationMode.NETWORK_ONLY)
                Toast.makeText(context, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Network –∑–∞–ø—Ä–æ—Å", Toast.LENGTH_SHORT).show()
            }
        )

        GpsActionButton(
            emoji = "üì°",
            label = "Wi-Fi",
            color = Color(0xFFFF9800),
            modifier = Modifier.weight(1f),
            onClick = {
                locationManager.setLocationMode(LocationMode.LOW_POWER)
                locationManager.forceLocationUpdate(LocationMode.LOW_POWER)
                Toast.makeText(context, "Wi-Fi –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", Toast.LENGTH_SHORT).show()
            }
        )
    }

    Spacer(modifier = Modifier.height(8.dp))

    // üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        GpsActionButton(
            emoji = "üîç",
            label = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            color = if (showDiagnostics) Color(0xFFFF9800) else Color(0xFF757575),
            modifier = Modifier.weight(1f),
            onClick = onToggleDiagnostics
        )

        GpsActionButton(
            emoji = "üîÑ",
            label = "–°–±—Ä–æ—Å",
            color = Color(0xFF9C27B0),
            modifier = Modifier.weight(1f),
            onClick = {
                locationManager.setLocationMode(LocationMode.BALANCED)
                Toast.makeText(context, "–°–±—Ä–æ—Å –∫ BALANCED —Ä–µ–∂–∏–º—É", Toast.LENGTH_SHORT).show()
            }
        )

        GpsActionButton(
            emoji = "‚ÑπÔ∏è",
            label = "–°—Ç–∞—Ç—É—Å",
            color = Color(0xFF607D8B),
            modifier = Modifier.weight(1f),
            onClick = {
                val status = locationManager.getLocationStatus()
                val message = buildString {
                    append("GPS: ${if (status.isGpsEnabled) "‚úÖ" else "‚ùå"}")
                    append(", Network: ${if (status.isNetworkEnabled) "‚úÖ" else "‚ùå"}")
                    append(", –ü—Ä–∞–≤–∞: ${if (status.hasPermission) "‚úÖ" else "‚ùå"}")
                }
                Toast.makeText(context, message, Toast.LENGTH_LONG).show()
            }
        )
    }

    // üîç –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (showDiagnostics) {
        Spacer(modifier = Modifier.height(12.dp))
        LocationDiagnostics(locationManager = locationManager)
    }
}

/**
 * ü§ñ –°–µ–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino
 */
@Composable
private fun ArduinoSimulationSection(
    bluetoothHelper: BluetoothHelper,
    isSimulationEnabled: Boolean,
    currentScenario: ArduinoSimulator.SimulationScenario,
    scenarioInfo: BluetoothHelper.ScenarioInfo,
    scenarioProgress: Float,
    timeRemaining: Int,
    onToggleSimulation: (Boolean) -> Unit,
    onScenarioChange: (ArduinoSimulator.SimulationScenario) -> Unit
) {
    // üîò –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Column {
            Text(
                text = "–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino",
                color = Color.White,
                fontWeight = FontWeight.Medium
            )
            Text(
                text = if (isSimulationEnabled) "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" else "‚≠ï –í—ã–∫–ª—é—á–µ–Ω",
                color = if (isSimulationEnabled) Color.Green else Color.Gray,
                fontSize = 12.sp
            )
        }
        Switch(
            checked = isSimulationEnabled,
            onCheckedChange = onToggleSimulation
        )
    }

    // üìä –î–µ—Ç–∞–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if (isSimulationEnabled) {
        Spacer(modifier = Modifier.height(16.dp))

        // üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        ScenarioInfoCard(
            scenarioInfo = scenarioInfo,
            scenarioProgress = scenarioProgress,
            timeRemaining = timeRemaining,
            currentScenario = currentScenario
        )

        Spacer(modifier = Modifier.height(16.dp))

        // üé≠ –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        ScenarioSelectionGrid(
            currentScenario = currentScenario,
            onScenarioChange = onScenarioChange
        )

        Spacer(modifier = Modifier.height(16.dp))
    }
}

/**
 * üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ GPS –¥–µ–π—Å—Ç–≤–∏—è
 */
@Composable
private fun GpsActionButton(
    emoji: String,
    label: String,
    color: Color,
    modifier: Modifier = Modifier,
    onClick: () -> Unit
) {
    Button(
        onClick = onClick,
        modifier = modifier,
        colors = ButtonDefaults.buttonColors(containerColor = color)
    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(emoji, fontSize = 16.sp)
            Text(label, fontSize = 10.sp)
        }
    }
}

/**
 * üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
 */
@Composable
private fun ScenarioInfoCard(
    scenarioInfo: BluetoothHelper.ScenarioInfo,
    scenarioProgress: Float,
    timeRemaining: Int,
    currentScenario: ArduinoSimulator.SimulationScenario
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A))
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(text = scenarioInfo.icon, fontSize = 20.sp)
                Spacer(modifier = Modifier.width(8.dp))
                Column {
                    Text(
                        text = scenarioInfo.name,
                        color = Color.White,
                        fontWeight = FontWeight.Medium
                    )
                    Text(
                        text = scenarioInfo.description,
                        color = Color.Gray,
                        fontSize = 12.sp
                    )
                }
            }

            // ‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
            if (scenarioProgress > 0f && currentScenario != ArduinoSimulator.SimulationScenario.NORMAL) {
                Spacer(modifier = Modifier.height(8.dp))
                LinearProgressIndicator(
                    progress = scenarioProgress,
                    modifier = Modifier.fillMaxWidth(),
                    color = Color.Cyan
                )
                Text(
                    text = "–û—Å—Ç–∞–ª–æ—Å—å: ${timeRemaining}—Å",
                    color = Color.Gray,
                    fontSize = 10.sp
                )
            }
        }
    }
}

/**
 * üé≠ –°–µ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */
@Composable
private fun ScenarioSelectionGrid(
    currentScenario: ArduinoSimulator.SimulationScenario,
    onScenarioChange: (ArduinoSimulator.SimulationScenario) -> Unit
) {
    Text(
        text = "–ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:",
        color = Color.White,
        fontWeight = FontWeight.Medium
    )

    Spacer(modifier = Modifier.height(8.dp))

    // üé™ –ü–µ—Ä–≤—ã–π —Ä—è–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        ScenarioButton(
            emoji = "‚ö™", text = "–ù–æ—Ä–º–∞",
            scenario = ArduinoSimulator.SimulationScenario.NORMAL,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.NORMAL,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
        ScenarioButton(
            emoji = "üî•", text = "–ù–∞–≥—Ä–µ–≤",
            scenario = ArduinoSimulator.SimulationScenario.HEATING_CYCLE,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.HEATING_CYCLE,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
        ScenarioButton(
            emoji = "üîã", text = "–†–∞–∑—Ä—è–¥–∫–∞",
            scenario = ArduinoSimulator.SimulationScenario.BATTERY_DRAIN,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.BATTERY_DRAIN,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
    }

    Spacer(modifier = Modifier.height(8.dp))

    // üé™ –í—Ç–æ—Ä–æ–π —Ä—è–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        ScenarioButton(
            emoji = "üì≥", text = "–¢—Ä—è—Å–∫–∞",
            scenario = ArduinoSimulator.SimulationScenario.STRONG_SHAKING,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.STRONG_SHAKING,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
        ScenarioButton(
            emoji = "‚ùÑÔ∏è", text = "–•–æ–ª–æ–¥",
            scenario = ArduinoSimulator.SimulationScenario.COOLING_CYCLE,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.COOLING_CYCLE,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
        ScenarioButton(
            emoji = "‚ö†Ô∏è", text = "–û—à–∏–±–∫–∏",
            scenario = ArduinoSimulator.SimulationScenario.SENSOR_ERRORS,
            isActive = currentScenario == ArduinoSimulator.SimulationScenario.SENSOR_ERRORS,
            onScenarioChange = onScenarioChange,
            modifier = Modifier.weight(1f)
        )
    }
}

/**
 * üé≠ –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
 */
@Composable
private fun ScenarioButton(
    emoji: String,
    text: String,
    scenario: ArduinoSimulator.SimulationScenario,
    isActive: Boolean,
    onScenarioChange: (ArduinoSimulator.SimulationScenario) -> Unit,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = { onScenarioChange(scenario) },
        modifier = modifier,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isActive) Color(0xFF4CAF50) else Color(0xFF424242)
        )
    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(emoji, fontSize = 16.sp)
            Text(text, fontSize = 10.sp)
        }
    }
}