package com.example.bluetooth_andr11.ui.debug

import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.bluetooth_andr11.ArduinoSimulator
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.ui.location.LocationDiagnostics
import com.example.bluetooth_andr11.ui.location.LocationStatusWidget
import kotlinx.coroutines.delay

@Composable
fun DebugControlPanel(
    bluetoothHelper: BluetoothHelper,
    locationManager: EnhancedLocationManager, // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º EnhancedLocationManager –Ω–∞–ø—Ä—è–º—É—é
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
    var isSimulationEnabled by remember { mutableStateOf(bluetoothHelper.isSimulationEnabled()) }
    var currentScenario by remember { mutableStateOf(bluetoothHelper.getCurrentScenario()) }
    var scenarioInfo by remember { mutableStateOf(bluetoothHelper.getScenarioInfo()) }

    // üî• –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    var showLocationDiagnostics by remember { mutableStateOf(false) }
    var currentLocationMode by remember { mutableStateOf(EnhancedLocationManager.LocationMode.BALANCED) }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ü–µ–Ω–∞—Ä–∏—è
    var scenarioProgress by remember { mutableFloatStateOf(0f) }
    var timeRemaining by remember { mutableIntStateOf(0) }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    LaunchedEffect(currentScenario, isSimulationEnabled) {
        if (isSimulationEnabled) {
            val totalDuration = scenarioInfo.durationSeconds
            var elapsed = 0

            while (elapsed < totalDuration && isSimulationEnabled) {
                delay(1000)
                elapsed++
                scenarioProgress = elapsed.toFloat() / totalDuration
                timeRemaining = totalDuration - elapsed
            }

            // –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
            if (elapsed >= totalDuration) {
                currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
                bluetoothHelper.setSimulationScenario(currentScenario)
                scenarioInfo = bluetoothHelper.getScenarioInfo()
                scenarioProgress = 0f
            }
        }
    }

    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFF2D2D2D)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üîß –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏",
                style = MaterialTheme.typography.titleLarge,
                color = Color.White,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(16.dp))

            // üî• –í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            LocationStatusWidget(
                locationManager = locationManager,
                onModeChange = { mode ->
                    currentLocationMode = mode
                    locationManager.setLocationMode(mode)
                    Toast.makeText(
                        context,
                        "–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode.name}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            )

            Spacer(modifier = Modifier.height(12.dp))

            // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = {
                        locationManager.forceLocationUpdate(EnhancedLocationManager.LocationMode.HIGH_ACCURACY)
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4CAF50))
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üéØ", fontSize = 16.sp)
                        Text("GPS", fontSize = 10.sp)
                    }
                }

                Button(
                    onClick = {
                        locationManager.forceLocationUpdate(EnhancedLocationManager.LocationMode.NETWORK_ONLY)
                        Toast.makeText(
                            context,
                            "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å Network location",
                            Toast.LENGTH_SHORT
                        ).show()
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2196F3))
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üì∂", fontSize = 16.sp)
                        Text("Network", fontSize = 10.sp)
                    }
                }

                Button(
                    onClick = {
                        // üî• –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Wi-Fi –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                        locationManager.setLocationMode(EnhancedLocationManager.LocationMode.LOW_POWER)
                        locationManager.forceLocationUpdate(EnhancedLocationManager.LocationMode.LOW_POWER)
                        Toast.makeText(
                            context,
                            "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Wi-Fi positioning",
                            Toast.LENGTH_SHORT
                        ).show()
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF9800))
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üì°", fontSize = 16.sp)
                        Text("Wi-Fi", fontSize = 10.sp)
                    }
                }
            }

            // üî• –ù–û–í–´–ô —Ä—è–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Button(
                    onClick = {
                        showLocationDiagnostics = !showLocationDiagnostics
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = if (showLocationDiagnostics) Color(0xFFFF9800) else Color(
                            0xFF757575
                        )
                    )
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üîç", fontSize = 16.sp)
                        Text("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", fontSize = 10.sp)
                    }
                }

                Button(
                    onClick = {
                        // üî• –ù–û–í–û–ï: –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                        locationManager.setLocationMode(EnhancedLocationManager.LocationMode.BALANCED)
                        Toast.makeText(context, "–°–±—Ä–æ—Å –∫ —Ä–µ–∂–∏–º—É BALANCED", Toast.LENGTH_SHORT)
                            .show()
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF9C27B0))
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üîÑ", fontSize = 16.sp)
                        Text("–°–±—Ä–æ—Å", fontSize = 10.sp)
                    }
                }

                Button(
                    onClick = {
                        // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                        val status = locationManager.getLocationStatus()
                        val message = "GPS: ${if (status.isGpsEnabled) "‚úÖ" else "‚ùå"}, " +
                                "Network: ${if (status.isNetworkEnabled) "‚úÖ" else "‚ùå"}, " +
                                "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${if (status.hasPermission) "‚úÖ" else "‚ùå"}"
                        Toast.makeText(context, message, Toast.LENGTH_LONG).show()
                    },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF607D8B))
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("‚ÑπÔ∏è", fontSize = 16.sp)
                        Text("–°—Ç–∞—Ç—É—Å", fontSize = 10.sp)
                    }
                }
            }

            // üî• –ü–∞–Ω–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è)
            if (showLocationDiagnostics) {
                Spacer(modifier = Modifier.height(12.dp))
                LocationDiagnostics(locationManager = locationManager)
            }

            Spacer(modifier = Modifier.height(16.dp))

            // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ Arduino",
                        color = Color.White,
                        fontWeight = FontWeight.Medium
                    )
                    Text(
                        text = if (isSimulationEnabled) "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" else "‚≠ï –í—ã–∫–ª—é—á–µ–Ω",
                        color = if (isSimulationEnabled) Color.Green else Color.Gray,
                        fontSize = 12.sp
                    )
                }
                Switch(
                    checked = isSimulationEnabled,
                    onCheckedChange = { enabled ->
                        isSimulationEnabled = enabled
                        bluetoothHelper.enableSimulationMode(enabled)
                        if (!enabled) {
                            scenarioProgress = 0f
                            timeRemaining = 0
                        }
                    }
                )
            }

            if (isSimulationEnabled) {
                Spacer(modifier = Modifier.height(16.dp))

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A))
                ) {
                    Column(
                        modifier = Modifier.padding(12.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = scenarioInfo.icon,
                                fontSize = 20.sp
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Column {
                                Text(
                                    text = scenarioInfo.name,
                                    color = Color.White,
                                    fontWeight = FontWeight.Medium
                                )
                                Text(
                                    text = scenarioInfo.description,
                                    color = Color.Gray,
                                    fontSize = 12.sp
                                )
                            }
                        }

                        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
                        if (scenarioProgress > 0f && currentScenario != ArduinoSimulator.SimulationScenario.NORMAL) {
                            Spacer(modifier = Modifier.height(8.dp))
                            LinearProgressIndicator(
                                progress = scenarioProgress,
                                modifier = Modifier.fillMaxWidth(),
                                color = Color.Cyan
                            )
                            Text(
                                text = "–û—Å—Ç–∞–ª–æ—Å—å: ${timeRemaining}—Å",
                                color = Color.Gray,
                                fontSize = 10.sp
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                Text(
                    text = "–ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:",
                    color = Color.White,
                    fontWeight = FontWeight.Medium
                )

                Spacer(modifier = Modifier.height(8.dp))

                // –ü–µ—Ä–≤—ã–π —Ä—è–¥
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    ScenarioButton(
                        emoji = "‚ö™",
                        text = "–ù–æ—Ä–º–∞",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.NORMAL,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.NORMAL
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )

                    ScenarioButton(
                        emoji = "üîã",
                        text = "–†–∞–∑—Ä—è–¥–∫–∞",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.BATTERY_DRAIN,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.BATTERY_DRAIN
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )

                    ScenarioButton(
                        emoji = "üî•",
                        text = "–ù–∞–≥—Ä–µ–≤",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.HEATING_CYCLE,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.HEATING_CYCLE
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                // –í—Ç–æ—Ä–æ–π —Ä—è–¥
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    ScenarioButton(
                        emoji = "‚ùÑÔ∏è",
                        text = "–•–æ–ª–æ–¥",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.COOLING_CYCLE,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.COOLING_CYCLE
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )

                    ScenarioButton(
                        emoji = "üì≥",
                        text = "–¢—Ä—è—Å–∫–∞",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.STRONG_SHAKING,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.STRONG_SHAKING
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )

                    ScenarioButton(
                        emoji = "‚ö†Ô∏è",
                        text = "–û—à–∏–±–∫–∏",
                        isActive = currentScenario == ArduinoSimulator.SimulationScenario.SENSOR_ERRORS,
                        onClick = {
                            currentScenario = ArduinoSimulator.SimulationScenario.SENSOR_ERRORS
                            bluetoothHelper.setSimulationScenario(currentScenario)
                            scenarioInfo = bluetoothHelper.getScenarioInfo()
                            scenarioProgress = 0f
                        },
                        modifier = Modifier.weight(1f)
                    )
                }

                Spacer(modifier = Modifier.height(16.dp))

                // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Button(
                        onClick = {
                            bluetoothHelper.setSimulationBattery(5)
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF5722))
                    ) {
                        Text("üîã5%", fontSize = 10.sp)
                    }

                    Button(
                        onClick = {
                            bluetoothHelper.setSimulationTemperatures(55f, 15f)
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF9800))
                    ) {
                        Text("üî•55¬∞C", fontSize = 10.sp)
                    }

                    Button(
                        onClick = {
                            bluetoothHelper.triggerSimulationShake(3.0f)
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF9C27B0))
                    ) {
                        Text("üì≥–¢—Ä—è—Å–∫–∞", fontSize = 10.sp)
                    }
                }
            }
        }
    }
}

@Composable
fun ScenarioButton(
    emoji: String,
    text: String,
    isActive: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = onClick,
        modifier = modifier,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isActive) Color(0xFF4CAF50) else Color(0xFF424242)
        )
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(emoji, fontSize = 16.sp)
            Text(text, fontSize = 10.sp)
        }
    }
}