package com.example.bluetooth_andr11.ui.map_log

import android.content.Context
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material3.Icon
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.window.Dialog
import com.example.bluetooth_andr11.map.MapModule
import org.osmdroid.util.GeoPoint

@Composable
fun MapModal(
    context: Context,
    coordinates: Pair<Double, Double>,
    onDismiss: () -> Unit,
    eventTitle: String
) {
    Dialog(onDismissRequest = { onDismiss() }) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 72.dp, start = 16.dp, end = 16.dp)
        ) {
            Surface(
                shape = RoundedCornerShape(12.dp),
                color = Color.White,
                modifier = Modifier.fillMaxSize()
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(bottom = 8.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = eventTitle,
                            modifier = Modifier.weight(1f),
                            fontSize = 18.sp,
                            color = Color.Black,
                        )
                        Icon(
                            imageVector = Icons.Default.Close,
                            contentDescription = "–ó–∞–∫—Ä—ã—Ç—å",
                            modifier = Modifier
                                .size(24.dp)
                                .clickable { onDismiss() }
                        )
                    }

                    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f)
                            .clip(RoundedCornerShape(8.dp))
                            .background(Color.LightGray)
                    ) {
                        EventMapView(
                            context = context,
                            coordinates = coordinates,
                            modifier = Modifier.fillMaxSize()
                        )
                    }
                }
            }
        }
    }
}

// üî• –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–æ–±—ã—Ç–∏—è
@Composable
fun EventMapView(
    context: Context,
    coordinates: Pair<Double, Double>,
    modifier: Modifier = Modifier
) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    val mapView = remember {
        MapModule.initializeMap(context).apply {
            // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã —Å–æ–±—ã—Ç–∏–π
            overlays.clear()
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    LaunchedEffect(coordinates) {
        val (latitude, longitude) = coordinates
        val geoPoint = GeoPoint(latitude, longitude)

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å–æ–±—ã—Ç–∏–∏
        mapView.controller.setCenter(geoPoint)
        mapView.controller.setZoom(16.0) // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑—É–º

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å–æ–±—ã—Ç–∏—è
        MapModule.addMarker(mapView, latitude, longitude)

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        mapView.invalidate()
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    DisposableEffect(Unit) {
        onDispose {
            mapView.overlays.clear()
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    AndroidView(
        factory = { mapView },
        modifier = modifier
    )
}