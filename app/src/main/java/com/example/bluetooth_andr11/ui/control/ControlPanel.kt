package com.example.bluetooth_andr11.ui.control

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableLongStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.bluetooth_andr11.R
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import kotlinx.coroutines.launch

@Composable
fun ControlPanel(
    onCommandSend: (String) -> Unit,
    temp1: String,
    temp2: String,
    hallState: String,
    acc: String,
    isHeatOn: MutableState<Boolean>,
    isCoolOn: MutableState<Boolean>,
    isLightOn: MutableState<Boolean>,
    context: Context,
    modifier: Modifier = Modifier,
    bluetoothHelper: BluetoothHelper,
    locationManager: EnhancedLocationManager
) {
    Column(
        modifier = modifier.padding(10.dp),
        horizontalAlignment = Alignment.Start,
        verticalArrangement = Arrangement.Top
    ) {
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        DeviceStatusDisplay(
            temp1 = temp1,
            temp2 = temp2,
            hallState = hallState,
            acc = acc
        )

        Spacer(modifier = Modifier.height(16.dp))

        // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        SimpleProtectedButtons(
            context = context,
            bluetoothHelper = bluetoothHelper,
            locationManager = locationManager,
            isHeatOn = isHeatOn,
            isCoolOn = isCoolOn,
            isLightOn = isLightOn
        )
    }
}

@Composable
private fun DeviceStatusDisplay(
    temp1: String,
    temp2: String,
    hallState: String,
    acc: String
) {
    Column {
        StatusItem(label = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å–µ–∫", value = "$temp1¬∞C")
        StatusItem(label = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫", value = "$temp2¬∞C")
        StatusItem(label = "–°—Ç–∞—Ç—É—Å", value = hallState)
        StatusItem(label = "–£—Ä–æ–≤–µ–Ω—å —Ç—Ä—è—Å–∫–∏", value = acc)
    }
}

@Composable
private fun StatusItem(label: String, value: String) {
    Text(
        text = "$label: $value",
        modifier = Modifier.padding(4.dp),
        fontSize = 18.sp
    )
    Spacer(modifier = Modifier.height(8.dp))
}

@Composable
private fun SimpleProtectedButtons(
    context: Context,
    bluetoothHelper: BluetoothHelper,
    locationManager: EnhancedLocationManager,
    isHeatOn: MutableState<Boolean>,
    isCoolOn: MutableState<Boolean>,
    isLightOn: MutableState<Boolean>
) {
    // ‚úÖ –û–ë–©–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –í–°–ï–• –∫–Ω–æ–ø–æ–∫ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª)
    var lastAnyCommandTime by remember { mutableLongStateOf(0L) }

    val debounceTime = 1500L // ‚úÖ –£–≤–µ–ª–∏—á–∏–ª –¥–æ 1.5—Å–µ–∫ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–≥—Ä–µ–≤"
        SimpleButton(
            iconRes = R.drawable.fire,
            label = "–ù–∞–≥—Ä–µ–≤",
            isActive = isHeatOn.value,
            activeColor = Color(0xFFFF4500),
            onClick = {
                val now = System.currentTimeMillis()
                if (now - lastAnyCommandTime < debounceTime) {
                    Log.w(
                        "ControlPanel",
                        "üö´ –ù–∞–≥—Ä–µ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç (${now - lastAnyCommandTime}–º—Å)"
                    )
                    Toast.makeText(context, "‚è≥ –ö–∞–Ω–∞–ª –∑–∞–Ω—è—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", Toast.LENGTH_SHORT)
                        .show()
                    return@SimpleButton
                }
                lastAnyCommandTime = now

                if (checkConnection(context, bluetoothHelper)) {
                    val command = if (isHeatOn.value) "h" else "H"
                    val newState = !isHeatOn.value

                    Log.d(
                        "ControlPanel",
                        "üî• –ù–∞–≥—Ä–µ–≤: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ '$command' (${isHeatOn.value} -> $newState)"
                    )

                    // ‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –∫–æ–º–∞–Ω–¥—ã
                    sendAggressiveCommand(bluetoothHelper, command)

                    isHeatOn.value = newState

                    LogModule.logUserAction(
                        context = context,
                        bluetoothHelper = bluetoothHelper,
                        locationManager = locationManager,
                        action = "–ù–∞–≥—Ä–µ–≤ ${if (newState) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}"
                    )
                }
            }
        )

        // –ö–Ω–æ–ø–∫–∞ "–•–æ–ª–æ–¥"
        SimpleButton(
            iconRes = R.drawable.snowflake,
            label = "–•–æ–ª–æ–¥",
            isActive = isCoolOn.value,
            activeColor = Color(0xFF1E90FF),
            onClick = {
                val now = System.currentTimeMillis()
                if (now - lastAnyCommandTime < debounceTime) {
                    Log.w(
                        "ControlPanel",
                        "üö´ –•–æ–ª–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç (${now - lastAnyCommandTime}–º—Å)"
                    )
                    Toast.makeText(context, "‚è≥ –ö–∞–Ω–∞–ª –∑–∞–Ω—è—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", Toast.LENGTH_SHORT)
                        .show()
                    return@SimpleButton
                }
                lastAnyCommandTime = now

                if (checkConnection(context, bluetoothHelper)) {
                    val command = if (isCoolOn.value) "c" else "C"
                    val newState = !isCoolOn.value

                    Log.d(
                        "ControlPanel",
                        "‚ùÑÔ∏è –•–æ–ª–æ–¥: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ '$command' (${isCoolOn.value} -> $newState)"
                    )

                    // ‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –∫–æ–º–∞–Ω–¥—ã
                    sendAggressiveCommand(bluetoothHelper, command)

                    isCoolOn.value = newState

                    LogModule.logUserAction(
                        context = context,
                        bluetoothHelper = bluetoothHelper,
                        locationManager = locationManager,
                        action = "–•–æ–ª–æ–¥ ${if (newState) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}"
                    )
                }
            }
        )

        // –ö–Ω–æ–ø–∫–∞ "–°–≤–µ—Ç"
        SimpleButton(
            iconRes = R.drawable.light,
            label = "–°–≤–µ—Ç",
            isActive = isLightOn.value,
            activeColor = Color(0xFFF0F000),
            onClick = {
                val now = System.currentTimeMillis()
                if (now - lastAnyCommandTime < debounceTime) {
                    Log.w(
                        "ControlPanel",
                        "üö´ –°–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç (${now - lastAnyCommandTime}–º—Å)"
                    )
                    Toast.makeText(context, "‚è≥ –ö–∞–Ω–∞–ª –∑–∞–Ω—è—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", Toast.LENGTH_SHORT)
                        .show()
                    return@SimpleButton
                }
                lastAnyCommandTime = now

                if (checkConnection(context, bluetoothHelper)) {
                    val command = if (isLightOn.value) "l" else "L"
                    val newState = !isLightOn.value

                    Log.d(
                        "ControlPanel",
                        "üí° –°–≤–µ—Ç: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ '$command' (${isLightOn.value} -> $newState)"
                    )

                    // ‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –∫–æ–º–∞–Ω–¥—ã
                    sendAggressiveCommand(bluetoothHelper, command)

                    isLightOn.value = newState

                    LogModule.logUserAction(
                        context = context,
                        bluetoothHelper = bluetoothHelper,
                        locationManager = locationManager,
                        action = "–°–≤–µ—Ç ${if (newState) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}"
                    )
                }
            }
        )
    }
}

// ‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
private fun sendAggressiveCommand(
    bluetoothHelper: BluetoothHelper,
    command: String
) {
    Log.d("ControlPanel", "üî• –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã '$command'")

    // ‚úÖ –ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è: 3 –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ä—è–¥ (–¥–ª—è –ø—Ä–æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞)
    bluetoothHelper.sendCommand(command)
    bluetoothHelper.sendCommand(command)
    bluetoothHelper.sendCommand(command)
    Log.d("ControlPanel", "üì§ –°–µ—Ä–∏—è 1/3: –∫–æ–º–∞–Ω–¥–∞ '$command' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥")

    // ‚úÖ –í—Ç–æ—Ä–∞—è —Å–µ—Ä–∏—è: —á–µ—Ä–µ–∑ 100–º—Å –µ—â–µ 2 –∫–æ–º–∞–Ω–¥—ã
    kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {
        kotlinx.coroutines.delay(100L)
        bluetoothHelper.sendCommand(command)
        bluetoothHelper.sendCommand(command)
        Log.d("ControlPanel", "üì§ –°–µ—Ä–∏—è 2/3: –∫–æ–º–∞–Ω–¥–∞ '$command' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ +2 —Ä–∞–∑–∞ —á–µ—Ä–µ–∑ 100–º—Å")

        // ‚úÖ –¢—Ä–µ—Ç—å—è —Å–µ—Ä–∏—è: —á–µ—Ä–µ–∑ –µ—â–µ 200–º—Å —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        kotlinx.coroutines.delay(200L)
        bluetoothHelper.sendCommand(command)
        Log.d("ControlPanel", "üì§ –°–µ—Ä–∏—è 3/3: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '$command' —á–µ—Ä–µ–∑ 300–º—Å")
    }
}

@Composable
private fun SimpleButton(
    iconRes: Int,
    label: String,
    isActive: Boolean,
    activeColor: Color,
    onClick: () -> Unit
) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Button(
            onClick = {
                Log.d("ControlPanel", "üîò –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: $label")
                onClick()
            },
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isActive) activeColor else Color.Gray
            ),
            modifier = Modifier.padding(4.dp)
        ) {
            Icon(
                painter = painterResource(id = iconRes),
                contentDescription = label,
                tint = Color.White
            )
        }
        Text(
            text = label,
            modifier = Modifier.padding(top = 4.dp),
            fontSize = 16.sp
        )
    }
}

private fun checkConnection(context: Context, bluetoothHelper: BluetoothHelper): Boolean {
    return if (bluetoothHelper.isDeviceConnected) {
        true
    } else {
        Log.w("ControlPanel", "‚ùå Bluetooth –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        Toast.makeText(context, "‚ùå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", Toast.LENGTH_SHORT).show()
        false
    }
}