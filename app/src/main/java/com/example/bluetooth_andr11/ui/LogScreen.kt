package com.example.bluetooth_andr11.ui

import android.app.DatePickerDialog
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.bluetooth_andr11.ui.auth.PasswordManager
import com.example.bluetooth_andr11.ui.auth.PasswordProtectedContent
import com.example.bluetooth_andr11.ui.control.CardButton
import com.example.bluetooth_andr11.ui.map_log.MapModal
import com.example.bluetooth_andr11.utils.LogHelper.filterLogEntries
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale

@Composable
fun LogScreen(navController: NavController) {
    PasswordProtectedContent {
        LogScreenContent(navController = navController)
    }
}

@Composable
private fun LogScreenContent(navController: NavController) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    var startDate by remember { mutableStateOf("") }
    var endDate by remember { mutableStateOf("") }
    var logEntries by remember { mutableStateOf(listOf<String>()) }
    var showMapModal by remember { mutableStateOf(false) }
    var selectedCoordinates by remember { mutableStateOf<Pair<Double, Double>?>(null) }
    var selectedEventTitle by remember { mutableStateOf("") }

    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ä—Ç—ã
    if (showMapModal && selectedCoordinates != null) {
        MapModal(
            context = context,
            coordinates = selectedCoordinates!!,
            onDismiss = { showMapModal = false },
            eventTitle = selectedEventTitle
        )
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(top = 72.dp, start = 16.dp, end = 16.dp)
    ) {
        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            CardButton(
                text = "‚óÄ –ù–∞–∑–∞–¥",
                onClick = { navController.popBackStack() },
                modifier = Modifier.weight(2f),
                fontSize = 14
            )

            CardButton(
                text = "üîí –í—ã–π—Ç–∏",
                onClick = {
                    PasswordManager.setSessionActive(context, false)
                    navController.popBackStack()
                },
                backgroundColor = Color(0xFF8B4513),
                modifier = Modifier.weight(1f),
                fontSize = 14
            )
        }

        // –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤
        LogFilterScreen { start, end ->
            startDate = start
            endDate = end
            scope.launch {
                val rawEntries = filterLogEntries(context, start, end)
                logEntries = sortLogEntriesByDateDescending(rawEntries)
                Log.d("LogScreen", "üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${logEntries.size} –∑–∞–ø–∏—Å–µ–π")
            }
        }

        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        if (logEntries.isNotEmpty()) {
            Text(
                text = "üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${logEntries.size}",
                modifier = Modifier.padding(vertical = 8.dp),
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Gray
            )
        }

        // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ —Å –ª–æ–≥–∞–º–∏
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 8.dp),
            verticalArrangement = Arrangement.spacedBy(6.dp) // –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
        ) {
            items(logEntries) { entry ->
                val coordinates = parseCoordinatesFromLogEntry(entry)
                val eventInfo = parseEventFromLogEntry(entry)

                // üî• –ù–û–í–ê–Ø –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                LogTableRow(
                    eventInfo = eventInfo,
                    coordinates = coordinates,
                    onMapClick = { coords, title ->
                        selectedCoordinates = coords
                        selectedEventTitle = title
                        showMapModal = true
                    },
                    onNoCoordinates = {
                        Toast.makeText(
                            context,
                            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                )
            }
        }
    }
}

// üî• –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
@Composable
private fun LogTableRow(
    eventInfo: EventInfo,
    coordinates: Pair<Double, Double>?,
    onMapClick: (Pair<Double, Double>, String) -> Unit,
    onNoCoordinates: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .background(Color.White)
            .padding(16.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        // üî• –î–ê–¢–ê - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ (15% —à–∏—Ä–∏–Ω—ã)
        DateTimeColumn(
            date = eventInfo.date,
            time = eventInfo.time,
            modifier = Modifier.width(60.dp)
        )

        // üî• –°–û–û–ë–©–ï–ù–ò–ï - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ (70% —à–∏—Ä–∏–Ω—ã)
        MessageColumn(
            message = eventInfo.event,
            modifier = Modifier.weight(1f)
        )

        // üî• –ö–ù–û–ü–ö–ê –ö–ê–†–¢–´ - –∫—Ä–∞—Å–∏–≤–∞—è –∏–∫–æ–Ω–∫–∞ (15% —à–∏—Ä–∏–Ω—ã)
        MapButton(
            hasCoordinates = coordinates != null,
            onClick = {
                if (coordinates != null) {
                    onMapClick(coordinates, eventInfo.event)
                } else {
                    onNoCoordinates()
                }
            }
        )
    }
}

@Composable
private fun DateTimeColumn(
    date: String,
    time: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // –î–∞—Ç–∞ (–∫—Ä—É–ø–Ω–µ–µ)
        Text(
            text = date,
            fontSize = 13.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF333333),
            textAlign = TextAlign.Center
        )

        // –í—Ä–µ–º—è (–º–µ–ª—å—á–µ –∏ —Å–µ—Ä—ã–º)
        Text(
            text = time.take(5), // –¢–æ–ª—å–∫–æ HH:MM –±–µ–∑ —Å–µ–∫—É–Ω–¥
            fontSize = 11.sp,
            color = Color(0xFF888888),
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun MessageColumn(
    message: String,
    modifier: Modifier = Modifier
) {
    Column(modifier = modifier) {
        Text(
            text = message,
            fontSize = 14.sp,
            color = Color(0xFF333333),
            lineHeight = 18.sp,
            maxLines = 2,
            overflow = TextOverflow.Ellipsis
        )

        // üî• –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ —Ç–µ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        val category = extractCategoryFromMessage(message)
        if (category.isNotEmpty()) {
            Spacer(modifier = Modifier.height(4.dp))
            CategoryTag(category = category)
        }
    }
}

@Composable
private fun CategoryTag(category: String) {
    Box(
        modifier = Modifier
            .background(
                color = getCategoryColor(category).copy(alpha = 0.15f),
                shape = RoundedCornerShape(8.dp)
            )
            .padding(horizontal = 8.dp, vertical = 2.dp)
    ) {
        Text(
            text = category,
            fontSize = 10.sp,
            color = getCategoryColor(category),
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun MapButton(
    hasCoordinates: Boolean,
    onClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .size(48.dp)
            .clip(RoundedCornerShape(12.dp))
            .background(
                brush = if (hasCoordinates) {
                    Brush.linearGradient(
                        colors = listOf(
                            Color(0xFF4CAF50),
                            Color(0xFF45A049)
                        )
                    )
                } else {
                    Brush.linearGradient(
                        colors = listOf(
                            Color(0xFFE0E0E0),
                            Color(0xFFCCCCCC)
                        )
                    )
                }
            )
            .clickable(enabled = hasCoordinates) { onClick() },
        contentAlignment = Alignment.Center
    ) {
        if (hasCoordinates) {
            // –ò–∫–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            Text(
                text = "üó∫Ô∏è",
                fontSize = 20.sp
            )
        } else {
            // –ò–∫–æ–Ω–∫–∞ "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" –¥–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            Text(
                text = "üìç",
                fontSize = 16.sp,
                color = Color(0xFF999999)
            )
        }
    }
}

// üî• –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏
private fun extractCategoryFromMessage(message: String): String {
    val regex = Regex("^([–ê-–Ø–∞-—èA-Za-z0-9_\\s]+):")
    val match = regex.find(message)
    return match?.groupValues?.get(1)?.trim() ?: ""
}

private fun getCategoryColor(category: String): Color {
    return when (category.uppercase()) {
        "–î–ï–ô–°–¢–í–ò–ï" -> Color(0xFF2196F3)
        "–°–ò–°–¢–ï–ú–ê" -> Color(0xFF4CAF50)
        "–ë–ê–¢–ê–†–ï–Ø" -> Color(0xFFFF9800)
        "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê" -> Color(0xFFF44336)
        "GPS" -> Color(0xFF9C27B0)
        "–î–ê–¢–ß–ò–ö_–•–û–õ–õ–ê" -> Color(0xFF607D8B)
        "–ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†" -> Color(0xFFFF5722)
        "–¢–ï–°–¢" -> Color(0xFFE91E63)
        "–û–¢–õ–ê–î–ö–ê" -> Color(0xFF795548)
        else -> Color(0xFF757575)
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
fun sortLogEntriesByDateDescending(logEntries: List<String>): List<String> {
    val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())

    return logEntries.sortedByDescending { entry ->
        try {
            val timestampPart = entry.substringBefore(" -").trim()
            val parsedDate = dateFormat.parse(timestampPart)

            if (parsedDate != null) {
                Log.d("LogScreen", "‚úÖ –î–∞—Ç–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: $timestampPart -> ${parsedDate.time}")
                parsedDate.time
            } else {
                Log.w("LogScreen", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: $timestampPart")
                0L
            }
        } catch (e: Exception) {
            Log.e("LogScreen", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ: $entry, –æ—à–∏–±–∫–∞: ${e.message}")
            0L
        }
    }.also { sortedList ->
        if (sortedList.isNotEmpty()) {
            Log.d("LogScreen", "üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            Log.d("LogScreen", "   üìÖ –°–∞–º–æ–µ –Ω–æ–≤–æ–µ: ${sortedList.first().substringBefore(" -")}")
            Log.d("LogScreen", "   üìÖ –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ: ${sortedList.last().substringBefore(" -")}")
        }
    }
}

fun parseCoordinatesFromLogEntry(logEntry: String): Pair<Double, Double>? {
    try {
        val coordinatesPart = logEntry.substringAfter("@", "").trim()

        if (coordinatesPart.isEmpty() || coordinatesPart.contains("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã") || coordinatesPart.contains(
                "–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
            )
        ) {
            return null
        }

        val coordsOnly = coordinatesPart.substringBefore("(").trim()
        val numberPattern = Regex("""(\d+[.,]\d+)""")
        val numbers = numberPattern.findAll(coordsOnly).map {
            it.value.replace(",", ".").toDoubleOrNull()
        }.filterNotNull().toList()

        if (numbers.size >= 2) {
            val latitude = numbers[0]
            val longitude = numbers[1]

            if (latitude in -90.0..90.0 && longitude in -180.0..180.0) {
                return Pair(latitude, longitude)
            }
        }

        return null
    } catch (e: Exception) {
        Log.e("LogScreen", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${e.message}")
        return null
    }
}

data class EventInfo(
    val date: String,
    val time: String,
    val event: String
)

fun parseEventFromLogEntry(logEntry: String): EventInfo {
    val parts = logEntry.split(" - ", limit = 2)
    val timestamp = parts.getOrNull(0) ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    val eventWithCoords = parts.getOrNull(1) ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"

    val eventPart = eventWithCoords.substringBefore("@").trim()
    val cleanEvent = removeCategoryRegex(eventPart)

    val dateParts = timestamp.split(" ")
    val date = dateParts.getOrNull(0)?.let { formatDateWithoutYear(it) } ?: ""
    val time = dateParts.getOrNull(1) ?: ""

    return EventInfo(date, time, cleanEvent)
}

private fun removeCategoryRegex(eventText: String): String {
    val categoryPattern = Regex("^[–ê-–Ø–∞-—èA-Za-z0-9_\\s]+:\\s*")
    return eventText.replaceFirst(categoryPattern, "").trim()
}

fun formatDateWithoutYear(date: String): String {
    val parts = date.split("-")
    return if (parts.size >= 3) {
        "${parts[2]}.${parts[1]}"
    } else {
        date
    }
}

@Composable
fun LogFilterScreen(onFilterApplied: (String, String) -> Unit) {
    val calendar = Calendar.getInstance()
    val today = String.format(
        Locale.getDefault(),
        "%04d-%02d-%02d",
        calendar.get(Calendar.YEAR),
        calendar.get(Calendar.MONTH) + 1,
        calendar.get(Calendar.DAY_OF_MONTH)
    )

    var startDate by remember { mutableStateOf(today) }
    var endDate by remember { mutableStateOf(today) }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(0.dp, 8.dp, 0.dp, 0.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ - –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 50% –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            DatePickerCardButton(
                label = "–û—Ç",
                date = startDate,
                modifier = Modifier.weight(1f),
                onDateSelected = { selectedDate ->
                    startDate = selectedDate
                }
            )

            DatePickerCardButton(
                label = "–î–æ",
                date = endDate,
                modifier = Modifier.weight(1f),
                onDateSelected = { selectedDate ->
                    endDate = selectedDate
                }
            )
        }

        // –ù–∏–∂–Ω–∏–π —Ä—è–¥ - –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å" –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        CardButton(
            text = "üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
            onClick = {
                if (startDate.isNotEmpty() && endDate.isNotEmpty()) {
                    Log.d("LogScreen", "üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤: $startDate - $endDate")
                    onFilterApplied(startDate, endDate) // ‚Üê –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞—Ç—ã
                }
            },
            backgroundColor = Color(0xFF4CAF50),
            modifier = Modifier.fillMaxWidth(),
            fontSize = 16
        )
    }
}

@Composable
fun DatePickerCardButton(
    label: String,
    date: String,
    modifier: Modifier = Modifier,
    onDateSelected: (String) -> Unit
) {
    val context = LocalContext.current
    val calendar = Calendar.getInstance()

    val year = date.substring(0, 4).toIntOrNull() ?: calendar.get(Calendar.YEAR)
    val month = date.substring(5, 7).toIntOrNull()?.minus(1) ?: calendar.get(Calendar.MONTH)
    val day = date.substring(8, 10).toIntOrNull() ?: calendar.get(Calendar.DAY_OF_MONTH)

    val datePickerDialog = DatePickerDialog(
        context,
        { _, selectedYear, selectedMonth, selectedDayOfMonth ->
            val formattedDate = String.format(
                Locale.getDefault(),
                "%04d-%02d-%02d",
                selectedYear,
                selectedMonth + 1,
                selectedDayOfMonth
            )
            onDateSelected(formattedDate)
        },
        year, month, day
    )

    CardButton(
        text = if (date.isEmpty()) label else "${label}: ${formatDateForDisplay(date)}",
        onClick = { datePickerDialog.show() },
        fontSize = 13,
        modifier = modifier
    )
}

fun formatDateForDisplay(date: String): String {
    return try {
        val parts = date.split("-")
        if (parts.size >= 3) {
            "${parts[2]}.${parts[1]}"
        } else {
            date
        }
    } catch (e: Exception) {
        date
    }
}
