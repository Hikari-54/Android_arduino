package com.example.bluetooth_andr11.ui.debug

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import com.example.bluetooth_andr11.utils.LogHelper
import kotlinx.coroutines.launch
import java.io.File

@Composable
fun LoggingDiagnosticScreen(
    bluetoothHelper: BluetoothHelper,
    enhancedLocationManager: EnhancedLocationManager,
    onClose: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    var diagnosticResult by remember { mutableStateOf("–ù–∞–∂–º–∏—Ç–µ '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏") }
    var isLoading by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black.copy(alpha = 0.8f)),
        contentAlignment = Alignment.Center
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color(0xFF2D2D2D)
            ),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp)
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                    style = MaterialTheme.typography.titleLarge,
                    color = Color.White,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(20.dp))

                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Button(
                        onClick = {
                            isLoading = true
                            scope.launch {
                                diagnosticResult = performCompleteDiagnostic(
                                    context,
                                    bluetoothHelper,
                                    enhancedLocationManager
                                )
                                isLoading = false
                            }
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF4CAF50)
                        ),
                        enabled = !isLoading
                    ) {
                        Text(if (isLoading) "üîÑ" else "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                    }

                    Button(
                        onClick = {
                            scope.launch {
                                createTestLogs(context, bluetoothHelper, enhancedLocationManager)
                                diagnosticResult =
                                    "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'"
                            }
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF2196F3)
                        )
                    ) {
                        Text("üß™ –¢–µ—Å—Ç")
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Button(
                        onClick = {
                            scope.launch {
                                val cleared = LogHelper.clearOldLogs(context, 0) // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                                diagnosticResult = if (cleared > 0) {
                                    "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ $cleared –∑–∞–ø–∏—Å–µ–π"
                                } else {
                                    "üóëÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                                }
                            }
                        },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFFF5722)
                        )
                    ) {
                        Text("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
                    }

                    Button(
                        onClick = onClose,
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF757575)
                        )
                    ) {
                        Text("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
                    }
                }

                Spacer(modifier = Modifier.height(20.dp))

                // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFF1A1A1A)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(
                        text = diagnosticResult,
                        modifier = Modifier.padding(16.dp),
                        color = Color(0xFFE0E0E0),
                        fontSize = 12.sp,
                        fontFamily = FontFamily.Monospace,
                        textAlign = TextAlign.Start
                    )
                }
            }
        }
    }
}

// üî• –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
private suspend fun performCompleteDiagnostic(
    context: android.content.Context,
    bluetoothHelper: BluetoothHelper,
    enhancedLocationManager: EnhancedLocationManager
): String = buildString {
    appendLine("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===")
    appendLine("–í—Ä–µ–º—è: ${java.text.SimpleDateFormat("HH:mm:ss").format(java.util.Date())}")
    appendLine()

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    appendLine("1Ô∏è‚É£ –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:")
    val logDir = File(context.getExternalFilesDir(null), "logs")
    val logFile = File(logDir, "events_log.txt")

    appendLine("   üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: ${if (logDir.exists()) "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" else "‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}")
    appendLine("   üìÑ –§–∞–π–ª –ª–æ–≥–æ–≤: ${if (logFile.exists()) "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" else "‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}")

    if (logFile.exists()) {
        appendLine("   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${logFile.length()} –±–∞–π—Ç")
        appendLine("   üîí –ü—Ä–∞–≤–∞ —á—Ç–µ–Ω–∏—è: ${if (logFile.canRead()) "‚úÖ" else "‚ùå"}")
        appendLine("   ‚úèÔ∏è –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: ${if (logFile.canWrite()) "‚úÖ" else "‚ùå"}")

        try {
            val lines = logFile.readLines()
            appendLine("   üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${lines.size}")
            if (lines.isNotEmpty()) {
                appendLine("   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: ${lines.lastOrNull()?.take(50)}...")
            }
        } catch (e: Exception) {
            appendLine("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${e.message}")
        }
    }
    appendLine()

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    appendLine("2Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    appendLine("   üì± Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω: ${if (bluetoothHelper.isDeviceConnected) "‚úÖ" else "‚ùå"}")
    appendLine("   üìç GPS –¥–æ—Å—Ç—É–ø–µ–Ω: ${if (enhancedLocationManager.isLocationAvailable()) "‚úÖ" else "‚ùå"}")

    val locationInfo = enhancedLocationManager.getLocationInfo()
    appendLine("   üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${locationInfo.coordinates}")
    appendLine("   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ¬±${locationInfo.accuracy.toInt()}–º")
    appendLine("   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: ${locationInfo.source}")
    appendLine()

    // 3. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
    appendLine("3Ô∏è‚É£ –¢–ï–°–¢ –ó–ê–ü–ò–°–ò:")
    try {
        // –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥
        LogModule.logEvent(context, "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø–∏—Å–∏")
        appendLine("   ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å: –£—Å–ø–µ—à–Ω–æ")

        // –õ–æ–≥ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        LogModule.logEventWithLocation(
            context,
            bluetoothHelper,
            enhancedLocationManager,
            "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"
        )
        appendLine("   ‚úÖ –ó–∞–ø–∏—Å—å —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π: –£—Å–ø–µ—à–Ω–æ")

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥
        LogModule.logCriticalEvent(
            context,
            bluetoothHelper,
            enhancedLocationManager,
            "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"
        )
        appendLine("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å: –£—Å–ø–µ—à–Ω–æ")

    } catch (e: Exception) {
        appendLine("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${e.message}")
    }
    appendLine()

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
    appendLine("4Ô∏è‚É£ –¢–ï–°–¢ –ß–¢–ï–ù–ò–Ø:")
    try {
        val today = java.text.SimpleDateFormat("yyyy-MM-dd").format(java.util.Date())
        val filteredLogs = LogHelper.filterLogEntries(context, today, today)
        appendLine("   ‚úÖ –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤: –ù–∞–π–¥–µ–Ω–æ ${filteredLogs.size} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
        if (filteredLogs.isNotEmpty()) {
            appendLine("   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
            filteredLogs.takeLast(3).forEach { line ->
                appendLine("     ‚Ä¢ ${line.take(80)}...")
            }
        }
    } catch (e: Exception) {
        appendLine("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${e.message}")
    }
    appendLine()

    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    appendLine("5Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    try {
        val stats = LogModule.getLogStatistics(context)
        appendLine("   üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${stats.totalEvents}")
        appendLine("   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${stats.criticalEvents}")
        appendLine("   üåç GPS —Å–æ–±—ã—Ç–∏–π: ${stats.gpsEvents}")
        appendLine("   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${stats.lastEventTime}")
    } catch (e: Exception) {
        appendLine("   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
    }
    appendLine()

    appendLine("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
}

// üî• –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
private suspend fun createTestLogs(
    context: android.content.Context,
    bluetoothHelper: BluetoothHelper,
    enhancedLocationManager: EnhancedLocationManager
) {
    val testEvents = listOf(
        "–¢–ï–°–¢: –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–µ–≤–∞",
        "–¢–ï–°–¢: –°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞ (2.5)",
        "–¢–ï–°–¢: –°—É–º–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞",
        "–¢–ï–°–¢: –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ (<25%)",
        "–¢–ï–°–¢: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 50¬∞C"
    )

    testEvents.forEach { event ->
        LogModule.logEventWithLocation(
            context,
            bluetoothHelper,
            enhancedLocationManager,
            event
        )
        kotlinx.coroutines.delay(100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
    LogModule.logCriticalEvent(
        context,
        bluetoothHelper,
        enhancedLocationManager,
        "–¢–ï–°–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    )
}