package com.example.bluetooth_andr11.ui.state

import android.util.Log
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import com.example.bluetooth_andr11.data.DataManager

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö reactive UI —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ mutableStateOf –æ–±—ä–µ–∫—Ç–∞–º–∏
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 * - –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ dedicated –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
 * - –õ–µ–≥–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –ª–æ–≥–∏–∫–∏ —á–µ—Ä–µ–∑ –º–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
 * - Consistent naming –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:
 * - System States: Bluetooth, GPS, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 * - Device States: –±–∞—Ç–∞—Ä–µ—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
 * - Sensor States: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä, –¥–∞—Ç—á–∏–∫ –•–æ–ª–ª–∞
 * - Location States: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ç–æ—á–Ω–æ—Å—Ç—å, –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
 * - UI States: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
class UIStateManager {

    companion object {
        private const val TAG = "UIStateManager"

        // === –ö–û–ù–°–¢–ê–ù–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò ===

        /** –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ */
        private const val MIN_BATTERY_LEVEL = 0

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ */
        private const val MAX_BATTERY_LEVEL = 100

        /** –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
        private const val DEFAULT_BATTERY = 0
        private const val DEFAULT_COORDINATES = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        private const val DEFAULT_SENSOR_VALUE = "--"

        /** –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞ */
        private val VALID_HALL_STATES = setOf("–û—Ç–∫—Ä—ã—Ç", "–ó–∞–∫—Ä—ã—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "--")

        /** –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */
        private val COORDINATE_PATTERN = Regex("""^-?\d+\.\d+,\s*-?\d+\.\d+$""")
    }

    // === SYSTEM STATES (–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è) ===

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ */
    private val _isBluetoothEnabled = mutableStateOf(false)
    val isBluetoothEnabled: MutableState<Boolean> get() = _isBluetoothEnabled

    /** –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ Arduino —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Bluetooth */
    private val _isDeviceConnected = mutableStateOf(false)
    val isDeviceConnected: MutableState<Boolean> get() = _isDeviceConnected

    /** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Android */
    private val _allPermissionsGranted = mutableStateOf(false)
    val allPermissionsGranted: MutableState<Boolean> get() = _allPermissionsGranted

    /** –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å–ª—É–∂–±—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ */
    private val _isLocationServiceEnabled = mutableStateOf(false)
    val isLocationServiceEnabled: MutableState<Boolean> get() = _isLocationServiceEnabled

    // === DEVICE STATES (–°–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Arduino) ===

    /** –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ Arduino (0-100%) */
    private val _batteryPercent = mutableStateOf(DEFAULT_BATTERY)
    val batteryPercent: MutableState<Int> get() = _batteryPercent

    /** –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Arduino (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π) */
    private val _functionState = mutableStateOf(DEFAULT_SENSOR_VALUE)
    val functionState: MutableState<String> get() = _functionState

    // === SENSOR STATES (–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤) ===

    /** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–∞ */
    private val _temp1 = mutableStateOf(DEFAULT_SENSOR_VALUE)
    val temp1: MutableState<String> get() = _temp1

    /** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–∞ */
    private val _temp2 = mutableStateOf(DEFAULT_SENSOR_VALUE)
    val temp2: MutableState<String> get() = _temp2

    /** –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞ (–û—Ç–∫—Ä—ã—Ç/–ó–∞–∫—Ä—ã—Ç/–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ) */
    private val _hallState = mutableStateOf(DEFAULT_SENSOR_VALUE)
    val hallState: MutableState<String> get() = _hallState

    /** –î–∞–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —É—Ä–æ–≤–Ω—è —Ç—Ä—è—Å–∫–∏ */
    private val _accelerometerData = mutableStateOf(DEFAULT_SENSOR_VALUE)
    val accelerometerData: MutableState<String> get() = _accelerometerData

    // === LOCATION STATES (–°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è) ===

    /** –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "latitude, longitude" */
    private val _coordinates = mutableStateOf(DEFAULT_COORDINATES)
    val coordinates: MutableState<String> get() = _coordinates

    // === UI STATES (–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) ===

    /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ) */
    private val _showDebugPanel = mutableStateOf(false)
    val showDebugPanel: MutableState<Boolean> get() = _showDebugPanel

    // === CONTROL STATES (–°–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è) ===

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –Ω–∞–≥—Ä–µ–≤–∞ */
    private val _isHeatOn = mutableStateOf(false)
    val isHeatOn: MutableState<Boolean> get() = _isHeatOn

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è */
    private val _isCoolOn = mutableStateOf(false)
    val isCoolOn: MutableState<Boolean> get() = _isCoolOn

    /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏ */
    private val _isLightOn = mutableStateOf(false)
    val isLightOn: MutableState<Boolean> get() = _isLightOn

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

    /** –°—á—ë—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */
    @Volatile
    private var stateUpdateCount = 0

    /** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π */
    @Volatile
    private var lastUpdateTime = 0L

    /** –°—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */
    @Volatile
    private var validationErrorCount = 0

    // === –ú–ï–¢–û–î–´ –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
     *
     * @param level –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (0-100)
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateBatteryLevel(level: Int): Boolean {
        return if (level in MIN_BATTERY_LEVEL..MAX_BATTERY_LEVEL) {
            val oldLevel = _batteryPercent.value
            _batteryPercent.value = level

            // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏
            if (kotlin.math.abs(level - oldLevel) >= 5) {
                Log.d(TAG, "üîã –ë–∞—Ç–∞—Ä–µ—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${oldLevel}% ‚Üí ${level}%")
            }

            updateStatistics()
            true
        } else {
            Log.w(
                TAG,
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏: $level (–¥–æ–ø—É—Å—Ç–∏–º–æ: $MIN_BATTERY_LEVEL-$MAX_BATTERY_LEVEL)"
            )
            validationErrorCount++
            false
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞.
     *
     * @param temperature –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateHotTemperature(temperature: String): Boolean {
        return if (isValidTemperatureValue(temperature)) {
            val oldTemp = _temp1.value
            _temp1.value = temperature

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ "--")
            if (oldTemp != DEFAULT_SENSOR_VALUE && oldTemp != temperature) {
                Log.d(TAG, "üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞: $oldTemp ‚Üí $temperature")
            }

            updateStatistics()
            true
        } else {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞: '$temperature'")
            validationErrorCount++
            false
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞.
     *
     * @param temperature –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateColdTemperature(temperature: String): Boolean {
        return if (isValidTemperatureValue(temperature)) {
            val oldTemp = _temp2.value
            _temp2.value = temperature

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ "--")
            if (oldTemp != DEFAULT_SENSOR_VALUE && oldTemp != temperature) {
                Log.d(TAG, "‚ùÑÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞: $oldTemp ‚Üí $temperature")
            }

            updateStatistics()
            true
        } else {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞: '$temperature'")
            validationErrorCount++
            false
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
     *
     * @param state –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateHallState(state: String): Boolean {
        return if (state in VALID_HALL_STATES) {
            val oldState = _hallState.value
            _hallState.value = state

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏
            if (oldState != DEFAULT_SENSOR_VALUE && oldState != state) {
                Log.d(TAG, "üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏: $oldState ‚Üí $state")
            }

            updateStatistics()
            true
        } else {
            Log.w(
                TAG,
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞: '$state' (–¥–æ–ø—É—Å—Ç–∏–º–æ: $VALID_HALL_STATES)"
            )
            validationErrorCount++
            false
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Arduino.
     *
     * @param state –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateFunctionState(state: String): Boolean {
        val oldState = _functionState.value
        _functionState.value = state

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        if (oldState != DEFAULT_SENSOR_VALUE && oldState != state) {
            Log.d(TAG, "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏ Arduino: $oldState ‚Üí $state")
        }

        updateStatistics()
        return true
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞.
     *
     * @param data —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateAccelerometerData(data: String): Boolean {
        val oldData = _accelerometerData.value
        _accelerometerData.value = data

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
        if (oldData != DEFAULT_SENSOR_VALUE &&
            !oldData.startsWith("–í –ø–æ–∫–æ–µ") &&
            data.startsWith("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è")
        ) {
            Log.d(TAG, "üì≥ –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: $oldData ‚Üí $data")
        }

        updateStatistics()
        return true
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞.
     *
     * @param newCoordinates –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "lat, lon"
     * @return true –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    fun updateCoordinates(newCoordinates: String): Boolean {
        return if (isValidCoordinates(newCoordinates)) {
            val oldCoordinates = _coordinates.value
            _coordinates.value = newCoordinates

            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–∏—Å–∫–ª—é—á–∞—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
            if (oldCoordinates != DEFAULT_COORDINATES) {
                Log.d(TAG, "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: $newCoordinates")
            }

            updateStatistics()
            true
        } else {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: '$newCoordinates'")
            validationErrorCount++
            false
        }
    }

    // === –°–ò–°–¢–ï–ú–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (–±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏) ===

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞.
     */
    fun updateBluetoothEnabled(enabled: Boolean) {
        val wasEnabled = _isBluetoothEnabled.value
        _isBluetoothEnabled.value = enabled

        if (wasEnabled != enabled) {
            Log.d(TAG, "üîµ Bluetooth: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}")
            updateStatistics()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
     */
    fun updateDeviceConnected(connected: Boolean) {
        val wasConnected = _isDeviceConnected.value
        _isDeviceConnected.value = connected

        if (wasConnected != connected) {
            Log.d(TAG, "üîó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${if (connected) "–ø–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"}")
            updateStatistics()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     */
    fun updateAllPermissionsGranted(granted: Boolean) {
        val wereGranted = _allPermissionsGranted.value
        _allPermissionsGranted.value = granted

        if (wereGranted != granted) {
            Log.d(TAG, "üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${if (granted) "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}")
            updateStatistics()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–± –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
     */
    fun updateLocationServiceEnabled(enabled: Boolean) {
        val wasEnabled = _isLocationServiceEnabled.value
        _isLocationServiceEnabled.value = enabled

        if (wasEnabled != enabled) {
            Log.d(TAG, "üõ∞Ô∏è GPS: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}")
            updateStatistics()
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏.
     */
    fun toggleDebugPanel() {
        _showDebugPanel.value = !_showDebugPanel.value
        Log.d(TAG, "üîß –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏: ${if (_showDebugPanel.value) "–ø–æ–∫–∞–∑–∞–Ω–∞" else "—Å–∫—Ä—ã—Ç–∞"}")
        updateStatistics()
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–∞–≥—Ä–µ–≤–∞.
     */
    fun updateHeatState(enabled: Boolean) {
        val wasEnabled = _isHeatOn.value
        _isHeatOn.value = enabled

        if (wasEnabled != enabled) {
            Log.d(TAG, "üî• –ù–∞–≥—Ä–µ–≤: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}")
            updateStatistics()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è.
     */
    fun updateCoolState(enabled: Boolean) {
        val wasEnabled = _isCoolOn.value
        _isCoolOn.value = enabled

        if (wasEnabled != enabled) {
            Log.d(TAG, "‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω–æ" else "–≤—ã–∫–ª—é—á–µ–Ω–æ"}")
            updateStatistics()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
     */
    fun updateLightState(enabled: Boolean) {
        val wasEnabled = _isLightOn.value
        _isLightOn.value = enabled

        if (wasEnabled != enabled) {
            Log.d(TAG, "üí° –ü–æ–¥—Å–≤–µ—Ç–∫–∞: ${if (enabled) "–≤–∫–ª—é—á–µ–Ω–∞" else "–≤—ã–∫–ª—é—á–µ–Ω–∞"}")
            updateStatistics()
        }
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í –°–û–°–¢–û–Ø–ù–ò–ô ===

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä UI —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ DataManager.
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É reactive —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
     *
     * @return –æ–±—ä–µ–∫—Ç UIStates —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
     */
    fun createDataManagerUIStates(): DataManager.UIStates {
        return DataManager.UIStates(
            batteryPercent = _batteryPercent,
            temp1 = _temp1,
            temp2 = _temp2,
            hallState = _hallState,
            functionState = _functionState,
            accelerometerData = _accelerometerData,
            isHeatOn = _isHeatOn,
            isCoolOn = _isCoolOn,
            isLightOn = _isLightOn
        )
    }

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—á–∏—Å–ª–æ, "–û—à–∏–±–∫–∞" –∏–ª–∏ "--").
     */
    private fun isValidTemperatureValue(value: String): Boolean {
        return when {
            value == "–û—à–∏–±–∫–∞" -> true
            value == DEFAULT_SENSOR_VALUE -> true
            else -> {
                try {
                    val temp = value.toFloat()
                    temp in -50f..100f // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                } catch (e: NumberFormatException) {
                    false
                }
            }
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—É "lat, lon").
     */
    private fun isValidCoordinates(coordinates: String): Boolean {
        return coordinates == DEFAULT_COORDINATES ||
                coordinates.matches(COORDINATE_PATTERN)
    }

    // === –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π.
     */
    private fun updateStatistics() {
        stateUpdateCount++
        lastUpdateTime = System.currentTimeMillis()
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
     */
    fun resetAllStates() {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö UI —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        _isBluetoothEnabled.value = false
        _isDeviceConnected.value = false
        _allPermissionsGranted.value = false
        _isLocationServiceEnabled.value = false

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _batteryPercent.value = DEFAULT_BATTERY
        _functionState.value = DEFAULT_SENSOR_VALUE

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
        _temp1.value = DEFAULT_SENSOR_VALUE
        _temp2.value = DEFAULT_SENSOR_VALUE
        _hallState.value = DEFAULT_SENSOR_VALUE
        _accelerometerData.value = DEFAULT_SENSOR_VALUE

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        _isHeatOn.value = false
        _isCoolOn.value = false
        _isLightOn.value = false

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        _coordinates.value = DEFAULT_COORDINATES

        // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º (–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π)

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stateUpdateCount = 0
        validationErrorCount = 0
        lastUpdateTime = System.currentTimeMillis()
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ (–ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Arduino).
     */
    fun resetSensorStates() {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤")

        _batteryPercent.value = DEFAULT_BATTERY
        _temp1.value = DEFAULT_SENSOR_VALUE
        _temp2.value = DEFAULT_SENSOR_VALUE
        _hallState.value = DEFAULT_SENSOR_VALUE
        _functionState.value = DEFAULT_SENSOR_VALUE
        _accelerometerData.value = DEFAULT_SENSOR_VALUE

        updateStatistics()
    }

    // === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã UIStateManager –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
     *
     * @return –æ–±—ä–µ–∫—Ç UIStateStatistics —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    fun getStatistics(): UIStateStatistics {
        return UIStateStatistics(
            totalUpdates = stateUpdateCount,
            validationErrors = validationErrorCount,
            lastUpdateTime = lastUpdateTime,
            isSystemReady = isSystemReady(),
            hasActiveData = hasActiveData(),
            successRate = if (stateUpdateCount > 0) {
                ((stateUpdateCount - validationErrorCount) * 100 / stateUpdateCount)
            } else 100
        )
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
     */
    fun isSystemReady(): Boolean {
        return _isBluetoothEnabled.value &&
                _isDeviceConnected.value &&
                _allPermissionsGranted.value &&
                _isLocationServiceEnabled.value
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤.
     */
    fun hasActiveData(): Boolean {
        return _batteryPercent.value > 0 ||
                _temp1.value != DEFAULT_SENSOR_VALUE ||
                _temp2.value != DEFAULT_SENSOR_VALUE ||
                _hallState.value != DEFAULT_SENSOR_VALUE ||
                _coordinates.value != DEFAULT_COORDINATES
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
     */
    fun getStatusReport(): String {
        val stats = getStatistics()
        return "UIStateManager: ${stats.successRate}% —É—Å–ø–µ—à–Ω—ã—Ö | " +
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${stats.totalUpdates} | " +
                "–û—à–∏–±–æ–∫: ${stats.validationErrors} | " +
                "–°–∏—Å—Ç–µ–º–∞: ${if (stats.isSystemReady) "‚úÖ" else "‚ùå"} | " +
                "–î–∞–Ω–Ω—ã–µ: ${if (stats.hasActiveData) "‚úÖ" else "‚ùå"}"
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
     */
    fun getDetailedStateInfo(): String {
        return buildString {
            appendLine("üéõÔ∏è –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø UI –°–û–°–¢–û–Ø–ù–ò–ô:")
            appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            appendLine("  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: $stateUpdateCount")
            appendLine("  ‚Ä¢ –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: $validationErrorCount")
            appendLine(
                "  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${
                    if (lastUpdateTime > 0) java.text.SimpleDateFormat(
                        "HH:mm:ss"
                    ).format(java.util.Date(lastUpdateTime)) else "–ù–µ—Ç"
                }"
            )
            appendLine()
            appendLine("üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
            appendLine("  ‚Ä¢ Bluetooth: ${if (_isBluetoothEnabled.value) "‚úÖ" else "‚ùå"}")
            appendLine("  ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${if (_isDeviceConnected.value) "‚úÖ" else "‚ùå"}")
            appendLine("  ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${if (_allPermissionsGranted.value) "‚úÖ" else "‚ùå"}")
            appendLine("  ‚Ä¢ GPS: ${if (_isLocationServiceEnabled.value) "‚úÖ" else "‚ùå"}")
            appendLine()
            appendLine("üì± –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            appendLine("  ‚Ä¢ –ë–∞—Ç–∞—Ä–µ—è: ${_batteryPercent.value}%")
            appendLine("  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: ${_functionState.value}")
            appendLine()
            appendLine("üå°Ô∏è –î–∞—Ç—á–∏–∫–∏:")
            appendLine("  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 1: ${_temp1.value}")
            appendLine("  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 2: ${_temp2.value}")
            appendLine("  ‚Ä¢ –î–∞—Ç—á–∏–∫ –•–æ–ª–ª–∞: ${_hallState.value}")
            appendLine("  ‚Ä¢ –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: ${_accelerometerData.value}")
            appendLine()
            appendLine("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
            appendLine("  ‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${_coordinates.value}")
            appendLine()
            appendLine("üéÆ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
            appendLine("  ‚Ä¢ –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏: ${if (_showDebugPanel.value) "‚úÖ" else "‚ùå"}")
            appendLine()
            appendLine("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
            appendLine("  ‚Ä¢ –ù–∞–≥—Ä–µ–≤: ${if (_isHeatOn.value) "‚úÖ" else "‚ùå"}")
            appendLine("  ‚Ä¢ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ: ${if (_isCoolOn.value) "‚úÖ" else "‚ùå"}")
            appendLine("  ‚Ä¢ –ü–æ–¥—Å–≤–µ—Ç–∫–∞: ${if (_isLightOn.value) "‚úÖ" else "‚ùå"}")
            appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        }
    }

    // === DATA CLASSES ===

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã UIStateManager –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
     *
     * @param totalUpdates –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
     * @param validationErrors –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param lastUpdateTime –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param isSystemReady –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param hasActiveData –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤
     * @param successRate –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    data class UIStateStatistics(
        val totalUpdates: Int,
        val validationErrors: Int,
        val lastUpdateTime: Long,
        val isSystemReady: Boolean,
        val hasActiveData: Boolean,
        val successRate: Int
    ) {
        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π.
         */
        fun hasIssues(): Boolean {
            return successRate < 95 || validationErrors > 10
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
         */
        fun getLastUpdateAgeSeconds(): Long {
            return if (lastUpdateTime > 0) {
                (System.currentTimeMillis() - lastUpdateTime) / 1000
            } else -1
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
         */
        fun getSummary(): String {
            return "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π: $totalUpdates | –£—Å–ø–µ—à–Ω–æ: $successRate% | " +
                    "–°–∏—Å—Ç–µ–º–∞: ${if (isSystemReady) "–≥–æ—Ç–æ–≤–∞" else "–Ω–µ –≥–æ—Ç–æ–≤–∞"} | " +
                    "–î–∞–Ω–Ω—ã–µ: ${if (hasActiveData) "–µ—Å—Ç—å" else "–Ω–µ—Ç"}"
        }
    }
}