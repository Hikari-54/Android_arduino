package com.example.bluetooth_andr11.ui.control

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Popup
import androidx.compose.ui.window.PopupProperties
import com.example.bluetooth_andr11.BuildConfig
import com.example.bluetooth_andr11.R
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import kotlinx.coroutines.delay

@Composable
fun AppTopBar(
    batteryLevel: Int,
    isBluetoothEnabled: Boolean,
    isDeviceConnected: Boolean,
    allPermissionsGranted: Boolean,
    onPermissionsClick: () -> Unit,
    onBluetoothClick: () -> Unit,
    onDebugClick: () -> Unit = {},
    showDebugButton: Boolean = false,
    onTitleClick: () -> Unit = {},
    bluetoothHelper: BluetoothHelper? = null
) {
    // üî• –õ–û–ì–ò–ö–ê –°–ö–†–´–¢–ò–Ø: —Å–∫—Ä—ã–≤–∞–µ–º Bluetooth –µ—Å–ª–∏ DEBUG + —Å–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    val shouldShowBluetoothButton = remember(bluetoothHelper) {
        if (BuildConfig.DEBUG && bluetoothHelper?.isSimulationEnabled() == true) {
            false // –°–∫—Ä—ã–≤–∞–µ–º –≤ debug —Ä–µ–∂–∏–º–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π
        } else {
            true // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
        }
    }

    // üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ tooltip –±–∞—Ç–∞—Ä–µ–∏
    var showBatteryTooltip by remember { mutableStateOf(false) }

    Box(modifier = Modifier.fillMaxWidth()) {
        // üì± –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color(0xFF252525))
                .padding(horizontal = 16.dp, vertical = 8.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Box(
                modifier = Modifier
                    .clip(RoundedCornerShape(8.dp))
                    .clickable(
                        onClick = onTitleClick,
                        interactionSource = remember { MutableInteractionSource() },
                        indication = null
                    )
                    .padding(horizontal = 12.dp, vertical = 6.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Delivery bag",
                        color = Color.White,
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }

            Row(verticalAlignment = Alignment.CenterVertically) {
                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                if (showDebugButton) {
                    IconButton(onClick = onDebugClick) {
                        Text(
                            text = "üîß", fontSize = 20.sp, color = Color.Yellow
                        )
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                }

                // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
                IconButton(onClick = onPermissionsClick) {
                    Icon(
                        painter = painterResource(
                            if (allPermissionsGranted) R.drawable.lock_check else R.drawable.key_alert
                        ),
                        contentDescription = "Permissions",
                        tint = if (allPermissionsGranted) Color.Green else Color.Red
                    )
                }

                Spacer(modifier = Modifier.width(16.dp))

                // üî• –£–°–õ–û–í–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –∫–Ω–æ–ø–∫–∏ Bluetooth
                if (shouldShowBluetoothButton) {
                    IconButton(onClick = onBluetoothClick) {
                        Icon(
                            painter = painterResource(
                                if (isBluetoothEnabled && isDeviceConnected) R.drawable.bluetooth else R.drawable.bluetooth_off
                            ),
                            contentDescription = "Bluetooth",
                            tint = if (isBluetoothEnabled && isDeviceConnected) Color.Green else Color.Red
                        )
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                }

                // üîã –ë–∞—Ç–∞—Ä–µ—è (–æ–±—ã—á–Ω–∞—è, –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ tooltip)
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.clickable {
                        showBatteryTooltip = !showBatteryTooltip
                    }
                ) {
                    Icon(
                        painter = painterResource(getBatteryIcon(batteryLevel)),
                        contentDescription = "Smart Bag Battery",
                        tint = when {
                            batteryLevel > 50 -> Color.Green
                            batteryLevel > 20 -> Color.Yellow
                            else -> Color.Red
                        }
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "$batteryLevel%",
                        color = Color.White,
                        fontWeight = if (batteryLevel < 20) FontWeight.Bold else FontWeight.Normal
                    )
                }
            }
        }

        // üí¨ Popup tooltip - –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        if (showBatteryTooltip) {
            BatteryTooltipPopup(
                batteryLevel = batteryLevel,
                isDeviceConnected = isDeviceConnected, // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                bluetoothHelper = bluetoothHelper, // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º helper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
                onDismiss = { showBatteryTooltip = false }
            )
        }

        // üîÑ –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ tooltip
        LaunchedEffect(showBatteryTooltip) {
            if (showBatteryTooltip) {
                delay(3000)
                showBatteryTooltip = false
            }
        }
    }
}

/**
 * üí¨ Popup tooltip –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
@Composable
private fun BatteryTooltipPopup(
    batteryLevel: Int,
    isDeviceConnected: Boolean, // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä
    bluetoothHelper: BluetoothHelper?, // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä
    onDismiss: () -> Unit
) {
    val density = LocalDensity.current

    // üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
    val actualConnectionStatus = remember(isDeviceConnected, bluetoothHelper) {
        when {
            bluetoothHelper?.isSimulationEnabled() == true -> "ü§ñ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏"
            isDeviceConnected -> "üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
            else -> "üìµ –û—Ç–∫–ª—é—á–µ–Ω–∞"
        }
    }

    val connectionColor = remember(isDeviceConnected, bluetoothHelper) {
        when {
            bluetoothHelper?.isSimulationEnabled() == true -> Color.Cyan
            isDeviceConnected -> Color.Green
            else -> Color.Red
        }
    }

    Popup(
        alignment = Alignment.TopEnd,
        offset = IntOffset(
            x = with(density) { (-20).dp.roundToPx() },
            y = with(density) { 60.dp.roundToPx() }
        ),
        onDismissRequest = onDismiss,
        properties = PopupProperties(
            dismissOnBackPress = true,
            dismissOnClickOutside = true
        )
    ) {
        Card(
            modifier = Modifier.width(180.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.Black.copy(alpha = 0.95f)
            ),
            shape = RoundedCornerShape(12.dp),
            elevation = CardDefaults.cardElevation(8.dp)
        ) {
            Column(
                modifier = Modifier.padding(12.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "–£–º–Ω–∞—è —Å—É–º–∫–∞",
                    color = Color.White,
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = "–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: $batteryLevel%",
                    color = Color.White,
                    fontSize = 12.sp
                )

                // üìä –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                LinearProgressIndicator(
                    progress = batteryLevel / 100f,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(6.dp)
                        .padding(vertical = 4.dp),
                    color = when {
                        batteryLevel > 50 -> Color.Green
                        batteryLevel > 20 -> Color.Yellow
                        else -> Color.Red
                    }
                )

                // ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ
                if (batteryLevel < 20) {
                    Text(
                        text = "‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥!",
                        color = Color.Red,
                        fontSize = 10.sp,
                        fontWeight = FontWeight.Bold
                    )
                }

                // üí° –ê–ö–¢–£–ê–õ–¨–ù–´–ô —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                Text(
                    text = actualConnectionStatus, // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    color = connectionColor, // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç
                    fontSize = 10.sp
                )
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –±–∞—Ç–∞—Ä–µ–∏
fun getBatteryIcon(batteryLevel: Int): Int {
    return when {
        batteryLevel <= 10 -> R.drawable.battery_10
        batteryLevel <= 30 -> R.drawable.battery_30
        batteryLevel <= 50 -> R.drawable.battery_50
        batteryLevel <= 70 -> R.drawable.battery_70
        else -> R.drawable.battery_90
    }
}