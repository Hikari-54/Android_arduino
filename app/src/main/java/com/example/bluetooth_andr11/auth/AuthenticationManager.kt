package com.example.bluetooth_andr11.auth

import android.content.Context
import android.util.Log
import android.widget.Toast
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.regex.Pattern

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–æ—á–Ω—ã—Ö —Å—É–º–æ–∫ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å—É–º–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID:SB000001"
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—É–º–æ–∫
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID_OK:SB000001"
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ID –Ω–∞ –≤—Ä–µ–º—è BT —Å–µ—Å—Å–∏–∏
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å GPS –ø—Ä–∏–≤—è–∑–∫–æ–π
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–º–µ–Ω—ã —Å—É–º–æ–∫
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç ID: SB000001, SB000002, SB999999 –∏ —Ç.–¥.
 * - –ü—Ä–µ—Ñ–∏–∫—Å: "SB" (Smart Bag)
 * - –ù–æ–º–µ—Ä: 6-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
 *
 * –ü—Ä–æ—Ç–æ–∫–æ–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
 * 1. –°—É–º–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: "ID:SB000001"
 * 2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç ID
 * 3. –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "ID_OK:SB000001" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID
 * 4. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * 5. –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ BT: —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ ID
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
 * - Graceful error handling –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
class AuthenticationManager(
    private val context: Context,
    private val bluetoothHelper: BluetoothHelper,
    private val locationManager: EnhancedLocationManager
) {
    companion object {
        private const val TAG = "AuthenticationManager"

        /** –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã ID –æ—Ç —Å—É–º–∫–∏ */
        private const val ID_COMMAND_PREFIX = "ID:"

        /** –ü—Ä–µ—Ñ–∏–∫—Å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ID */
        private const val ID_CONFIRMATION_PREFIX = "ID_OK:"

        /** –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID —Å—É–º–∫–∏ */
        private val BAG_ID_PATTERN = Pattern.compile("^SB\\d{6}$")

        /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è */
        private const val MIN_ID_MESSAGE_LENGTH = 11 // "ID:SB000001"

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è */
        private const val MAX_ID_MESSAGE_LENGTH = 20
    }

    // === –°–û–°–¢–û–Ø–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===

    /** –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π ID —Å—É–º–∫–∏ (null –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞) */
    @Volatile
    private var currentBagId: String? = null

    /** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
    @Volatile
    private var lastAuthenticationTime: Long = 0

    /** –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
    @Volatile
    private var isAuthenticated: Boolean = false

    /** –°—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */
    private var authenticationAttempts: Int = 0

    /** –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π */
    private var successfulAuthentications: Int = 0

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç —Å—É–º–∫–∏.
     *
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
     * 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     * 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ ID —Å—É–º–∫–∏
     * 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bluetooth
     * 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     * 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     *
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—É–º–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID:SB000001"
     * @return true –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    fun processAuthenticationMessage(message: String): Boolean {
        authenticationAttempts++

        Log.d(TAG, "üîê === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò #$authenticationAttempts ===")
        Log.d(TAG, "üîê –°–æ–æ–±—â–µ–Ω–∏–µ: '$message' (–¥–ª–∏–Ω–∞: ${message.length})")

        try {
            // === –®–ê–ì 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ===
            Log.d(TAG, "üîê –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
            if (!isValidAuthenticationMessage(message)) {
                Log.e(TAG, "‚ùå –®–∞–≥ 1 –ü–†–û–í–ê–õ–ï–ù: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                handleAuthenticationError(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return false
            }
            Log.d(TAG, "‚úÖ –®–∞–≥ 1 –ü–†–û–ô–î–ï–ù: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

            // === –®–ê–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID ===
            Log.d(TAG, "üîê –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
            val bagId = extractBagIdFromMessage(message)
            if (bagId == null) {
                Log.e(TAG, "‚ùå –®–∞–≥ 2 –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID")
                handleAuthenticationError(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return false
            }
            Log.d(TAG, "‚úÖ –®–∞–≥ 2 –ü–†–û–ô–î–ï–ù: ID –∏–∑–≤–ª–µ—á–µ–Ω = '$bagId'")

            // === –®–ê–ì 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ ID ===
            Log.d(TAG, "üîê –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ ID")
            if (!isValidBagId(bagId)) {
                Log.e(TAG, "‚ùå –®–∞–≥ 3 –ü–†–û–í–ê–õ–ï–ù: ID '$bagId' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É")
                handleAuthenticationError(
                    message,
                    "ID —Å—É–º–∫–∏ '$bagId' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"
                )
                return false
            }
            Log.d(TAG, "‚úÖ –®–∞–≥ 3 –ü–†–û–ô–î–ï–ù: ID '$bagId' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É")

            // === –®–ê–ì 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
            Log.d(TAG, "üîê –®–∞–≥ 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            val result = performAuthentication(bagId)

            if (result) {
                Log.i(TAG, "üîê === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê ===")
            } else {
                Log.e(TAG, "üîê === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê ===")
            }

            return result

        } catch (e: Exception) {
            Log.e(TAG, "üí• === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===")
            Log.e(TAG, "üí• Message: '$message'")
            Log.e(TAG, "üí• Exception: ${e.message}")
            Log.e(TAG, "üí• Stack trace: ${e.stackTraceToString()}")
            handleAuthenticationError(message, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}")
            return false
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É–º–∫–∏.
     *
     * @param bagId –≤–∞–ª–∏–¥–Ω—ã–π ID —Å—É–º–∫–∏
     * @return true –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
     */
    private fun performAuthentication(bagId: String): Boolean {
        return try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å—É–º–∫—É
            val confirmationMessage = "$ID_CONFIRMATION_PREFIX$bagId"
            bluetoothHelper.sendCommand(confirmationMessage)

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            synchronized(this) {
                currentBagId = bagId
                isAuthenticated = true
                lastAuthenticationTime = System.currentTimeMillis()
                successfulAuthentications++
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            logAuthenticationEvent(bagId, "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", true)

            Log.i(TAG, "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ID='$bagId', –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            true

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è '$bagId': ${e.message}")
            false
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Bluetooth.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ BT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     */
    fun resetAuthentication() {
        val previousBagId = currentBagId

        synchronized(this) {
            currentBagId = null
            isAuthenticated = false
            lastAuthenticationTime = 0
        }

        if (previousBagId != null) {
            logAuthenticationEvent(
                previousBagId,
                "–°–±—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ BT",
                false
            )
            Log.i(TAG, "üîÑ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è ID='$previousBagId'")
        } else {
            Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (ID –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        }
    }

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø ===

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     */
    private fun isValidAuthenticationMessage(message: String): Boolean {
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")

        val isNotBlank = message.isNotBlank()
        Log.d(TAG, "   ‚Ä¢ –ù–µ –ø—É—Å—Ç–æ–µ: $isNotBlank")

        val startsWithPrefix = message.startsWith(ID_COMMAND_PREFIX)
        Log.d(TAG, "   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '$ID_COMMAND_PREFIX': $startsWithPrefix")

        val lengthOk =
            message.length >= MIN_ID_MESSAGE_LENGTH && message.length <= MAX_ID_MESSAGE_LENGTH
        Log.d(
            TAG,
            "   ‚Ä¢ –î–ª–∏–Ω–∞ (${message.length}) –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [$MIN_ID_MESSAGE_LENGTH-$MAX_ID_MESSAGE_LENGTH]: $lengthOk"
        )

        val result = isNotBlank && startsWithPrefix && lengthOk
        Log.d(TAG, "   ‚Ä¢ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: $result")

        return result
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Å—É–º–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     */
    private fun extractBagIdFromMessage(message: String): String? {
        Log.d(TAG, "üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '$message'")

        return try {
            if (message.startsWith(ID_COMMAND_PREFIX)) {
                val extracted = message.substring(ID_COMMAND_PREFIX.length).trim()
                Log.d(TAG, "‚úÖ ID —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: '$extracted'")
                extracted
            } else {
                Log.e(TAG, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ '$ID_COMMAND_PREFIX'")
                null
            }
        } catch (e: Exception) {
            Log.e(TAG, "üí• –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: ${e.message}")
            Log.e(TAG, "üí• –°–æ–æ–±—â–µ–Ω–∏–µ: '$message'")
            null
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ ID —Å—É–º–∫–∏.
     * –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: SB000001, SB000002, SB999999 –∏ —Ç.–¥.
     */
    private fun isValidBagId(bagId: String): Boolean {
        Log.d(TAG, "üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Å—É–º–∫–∏: '$bagId'")

        val matchesPattern = BAG_ID_PATTERN.matcher(bagId).matches()
        Log.d(TAG, "   ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É '^SB\\d{6}$': $matchesPattern")
        Log.d(TAG, "   ‚Ä¢ –î–ª–∏–Ω–∞: ${bagId.length}")
        Log.d(TAG, "   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'SB': ${bagId.startsWith("SB")}")

        if (bagId.length >= 3) {
            val numberPart = bagId.substring(2)
            Log.d(TAG, "   ‚Ä¢ –ß–∏—Å–ª–æ–≤–∞—è —á–∞—Å—Ç—å: '$numberPart'")
            Log.d(TAG, "   ‚Ä¢ –î–ª–∏–Ω–∞ —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å—Ç–∏: ${numberPart.length}")
            Log.d(TAG, "   ‚Ä¢ –ß–∏—Å–ª–æ–≤–∞—è —á–∞—Å—Ç—å - —á–∏—Å–ª–æ: ${numberPart.all { it.isDigit() }}")
        }

        return matchesPattern
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    private fun handleAuthenticationError(message: String, errorDescription: String) {
        Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $errorDescription (—Å–æ–æ–±—â–µ–Ω–∏–µ: '$message')")

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        CoroutineScope(Dispatchers.Main).launch {
            Toast.makeText(
                context,
                "ID —Å—É–º–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–º–Ω—ã—Ö —Å—É–º–æ–∫",
                Toast.LENGTH_LONG
            ).show()
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        logAuthenticationEvent(
            message,
            "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $errorDescription",
            false
        )
    }

    // === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å GPS –ø—Ä–∏–≤—è–∑–∫–æ–π.
     */
    private fun logAuthenticationEvent(bagId: String, event: String, isSuccess: Boolean) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val logMessage = if (isSuccess) {
                    "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: $event (ID: $bagId)"
                } else {
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $event (–î–∞–Ω–Ω—ã–µ: $bagId)"
                }

                LogModule.logEventWithLocation(
                    context,
                    bluetoothHelper,
                    locationManager,
                    logMessage
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}")
            }
        }
    }

    // === –ì–ï–¢–¢–ï–†–´ –ò –°–¢–ê–¢–£–° ===

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π ID —Å—É–º–∫–∏ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞.
     */
    fun getCurrentBagId(): String? {
        return synchronized(this) { currentBagId }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—É–º–∫–∞.
     */
    fun isCurrentlyAuthenticated(): Boolean {
        return synchronized(this) { isAuthenticated }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     */
    fun getLastAuthenticationTime(): Long {
        return synchronized(this) { lastAuthenticationTime }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
     */
    fun getAuthenticationStatistics(): AuthenticationStatistics {
        return synchronized(this) {
            AuthenticationStatistics(
                totalAttempts = authenticationAttempts,
                successfulAuthentications = successfulAuthentications,
                currentBagId = currentBagId,
                isAuthenticated = isAuthenticated,
                lastAuthenticationTime = lastAuthenticationTime
            )
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     */
    fun getStatusReport(): String {
        val stats = getAuthenticationStatistics()
        return buildString {
            appendLine("=== AUTHENTICATION STATUS ===")
            appendLine("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${if (stats.isAuthenticated) "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞" else "–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"}")
            appendLine("–ê–∫—Ç–∏–≤–Ω—ã–π ID: ${stats.currentBagId ?: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}")
            appendLine("–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${stats.totalAttempts}")
            appendLine("–£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulAuthentications}")
            if (stats.lastAuthenticationTime > 0) {
                appendLine(
                    "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
                        java.text.SimpleDateFormat(
                            "HH:mm:ss",
                            java.util.Locale.getDefault()
                        ).format(stats.lastAuthenticationTime)
                    }"
                )
            }
            appendLine("===============================")
        }
    }

    // === DATA CLASSES ===

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏.
     */
    data class AuthenticationStatistics(
        val totalAttempts: Int,
        val successfulAuthentications: Int,
        val currentBagId: String?,
        val isAuthenticated: Boolean,
        val lastAuthenticationTime: Long
    )
}