package com.example.bluetooth_andr11.data

import android.content.Context
import android.util.Log
import androidx.compose.runtime.MutableState
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import com.example.bluetooth_andr11.monitoring.TemperatureMonitor
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö Arduino –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ reactive UI —Å–æ—Å—Ç–æ—è–Ω–∏–π
 * - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º —Å–ø–∞–º–∞
 * - –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä)
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö Arduino:
 * "batteryPercent,tempHot,tempCold,closedState,state,overload"
 *
 * –ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
 * - "85,25.50,15.20,1,2,0.15" - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * - "90,er,12.30,0,1,2.50" - –æ—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞
 * - "75,45.00,er,1,0,0.05" - –æ—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 * - Graceful handling –æ—à–∏–±–æ–∫ –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
 * - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å UI –ø–æ—Ç–æ–∫–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
class DataManager(
    private val context: Context,
    private val bluetoothHelper: BluetoothHelper,
    private val locationManager: EnhancedLocationManager,
    private val temperatureMonitor: TemperatureMonitor
) {
    companion object {
        private const val TAG = "DataManager"

        // === –ö–û–ù–°–¢–ê–ù–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò ===

        /** –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö Arduino */
        private const val EXPECTED_PARAMETERS_COUNT = 6

        /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ */
        private const val MIN_BATTERY_LEVEL = 0

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ */
        private const val MAX_BATTERY_LEVEL = 100

        /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã */
        private const val MIN_TEMPERATURE = -50f

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã */
        private const val MAX_TEMPERATURE = 100f

        /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ */
        private const val MAX_ACCELEROMETER_VALUE = 20f

        // === –ö–û–ù–°–¢–ê–ù–¢–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

        /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ */
        private const val ACCELEROMETER_LOG_INTERVAL_MS = 2000L

        /** –†–∞–∑–Ω–∏—Ü–∞ –≤ –∑–∞—Ä—è–¥–µ –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π */
        private const val BATTERY_LOG_THRESHOLD = 5
    }

    // === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ===

    /** –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ */
    @Volatile
    private var lastLoggedBatteryLevel = 101

    /** –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏ */
    @Volatile
    private var lastLoggedBagState: String? = null

    /** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ */
    @Volatile
    private var lastAccelerometerLogTime = 0L

    /** –°—á—ë—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */
    @Volatile
    private var invalidDataCount = 0

    /** –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö */
    @Volatile
    private var totalPacketsProcessed = 0

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• ===

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino –∏–ª–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞.
     *
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏:
     * 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ raw –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     * 2. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
     * 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–µ–∑ reactive variables
     * 4. –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
     * 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
     *
     * @param rawData —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ "battery,temp1,temp2,closed,state,overload"
     * @param uiStates –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    fun processArduinoData(rawData: String, uiStates: UIStates) {
        totalPacketsProcessed++

        Log.d(TAG, "üî¥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ #$totalPacketsProcessed: '$rawData'")

        try {
            val cleanData = rawData.trim()
            val parts = cleanData.split(",")

            if (parts.size >= EXPECTED_PARAMETERS_COUNT) {
                Log.d(TAG, "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: ${parts.size} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

                val parsedData = parseDataParts(parts)
                if (parsedData != null) {
                    updateAllUIStates(parsedData, uiStates)
                    forwardToMonitors(parsedData)
                    logSignificantEvents(parsedData)
                } else {
                    handleInvalidData(rawData, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if (parts.size > EXPECTED_PARAMETERS_COUNT) {
                    val extraParams =
                        parts.subList(EXPECTED_PARAMETERS_COUNT, parts.size).joinToString(",")
                    Log.w(TAG, "‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã: $extraParams")
                }

            } else {
                handleInvalidData(
                    rawData,
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ ${parts.size}, –æ–∂–∏–¥–∞–µ—Ç—Å—è $EXPECTED_PARAMETERS_COUNT"
                )
            }
        } catch (e: Exception) {
            handleInvalidData(rawData, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}")
        }
    }

    // === –ü–ê–†–°–ò–ù–ì –ò –í–ê–õ–ò–î–ê–¶–ò–Ø ===

    /**
     * –ü–∞—Ä—Å–∏—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.
     *
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
     * - battery: 0-100 –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * - tempHot/tempCold: float –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ "er" –¥–ª—è –æ—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–∞
     * - closedState: 0 –∏–ª–∏ 1 (–±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
     * - functionState: –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
     * - accelerometer: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ float –∑–Ω–∞—á–µ–Ω–∏–µ
     *
     * @param parts –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
     * @return ParsedArduinoData –∏–ª–∏ null –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
     */
    private fun parseDataParts(parts: List<String>): ParsedArduinoData? {
        return try {
            val battery =
                parts[0].trim().toIntOrNull()?.takeIf { it in MIN_BATTERY_LEVEL..MAX_BATTERY_LEVEL }
            val tempHotString = parts[1].trim()
            val tempColdString = parts[2].trim()
            val closedState = parts[3].trim().toIntOrNull()?.takeIf { it in 0..1 }
            val functionState = parts[4].trim().toIntOrNull()?.takeIf { it >= 0 }
            val accelerometer = parts[5].trim().toFloatOrNull()
                ?.takeIf { it >= 0f && it <= MAX_ACCELEROMETER_VALUE }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            val tempHot = validateTemperature(tempHotString)
            val tempCold = validateTemperature(tempColdString)

            ParsedArduinoData(
                battery = battery,
                tempHot = tempHot,
                tempHotString = tempHotString,
                tempCold = tempCold,
                tempColdString = tempColdString,
                closedState = closedState,
                functionState = functionState,
                accelerometer = accelerometer
            )
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
            null
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–∞.
     *
     * @param tempString —Å—Ç—Ä–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ("er" –∏–ª–∏ —á–∏—Å–ª–æ)
     * @return float –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ null –µ—Å–ª–∏ "er" –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     */
    private fun validateTemperature(tempString: String): Float? {
        return when {
            tempString == "er" -> null // –û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞
            else -> tempString.toFloatOrNull()?.takeIf {
                it in MIN_TEMPERATURE..MAX_TEMPERATURE
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—á—ë—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫.
     */
    private fun handleInvalidData(rawData: String, reason: String) {
        invalidDataCount++
        Log.w(TAG, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ #$invalidDataCount: '$rawData' - $reason")

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 10-—é –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        if (invalidDataCount % 10 == 0) {
            CoroutineScope(Dispatchers.IO).launch {
                try {
                    LogModule.logSystemEvent(
                        context, bluetoothHelper, locationManager,
                        "–ù–∞–∫–æ–ø–ª–µ–Ω–æ $invalidDataCount –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: $reason",
                        "–û–ë–†–ê–ë–û–¢–ö–ê_–î–ê–ù–ù–´–•"
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                }
            }
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI –°–û–°–¢–û–Ø–ù–ò–ô ===

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è UI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param data —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Arduino
     * @param uiStates –æ–±—ä–µ–∫—Ç —Å reactive —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
     */
    private fun updateAllUIStates(data: ParsedArduinoData, uiStates: UIStates) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç–∞—Ä–µ—é
        data.battery?.let { batteryValue ->
            uiStates.batteryPercent.value = batteryValue
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤
        uiStates.temp1.value = when {
            data.tempHotString == "er" -> "–û—à–∏–±–∫–∞"
            data.tempHot != null -> data.tempHot.toString()
            else -> uiStates.temp1.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        uiStates.temp2.value = when {
            data.tempColdString == "er" -> "–û—à–∏–±–∫–∞"
            data.tempCold != null -> data.tempCold.toString()
            else -> uiStates.temp2.value // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏
        data.closedState?.let { closedValue ->
            val newState = when (closedValue) {
                1 -> {
                    Log.d(TAG, "üîí –°—É–º–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                    "–ó–∞–∫—Ä—ã—Ç"
                }

                0 -> {
                    Log.d(TAG, "üîì –°—É–º–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                    "–û—Ç–∫—Ä—ã—Ç"
                }

                else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
            uiStates.hallState.value = newState
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        data.functionState?.let { functionValue ->
            uiStates.functionState.value = when (functionValue) {
                0 -> "–í—Å–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
                1 -> "1 —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
                else -> "$functionValue —Ñ—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ"
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        data.accelerometer?.let { accelerometerValue ->
            updateAccelerometerData(accelerometerValue, uiStates.accelerometerData)
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç—Ä—è—Å–∫–∏.
     *
     * @param value –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
     * @param accelerometerState reactive —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private fun updateAccelerometerData(value: Float, accelerometerState: MutableState<String>) {
        val shakeCategory = when {
            value > 2.5 -> {
                logAccelerometerEvent("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞", value)
                "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞"
            }

            value > 1.0 -> {
                logAccelerometerEvent("–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞", value)
                "–°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞"
            }

            value > 0.5 -> "–°–ª–∞–±–∞—è —Ç—Ä—è—Å–∫–∞"
            else -> "–í –ø–æ–∫–æ–µ"
        }

        accelerometerState.value = "$shakeCategory (${String.format("%.2f", value)})"
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã.
     */
    private fun logAccelerometerEvent(category: String, value: Float) {
        val currentTime = System.currentTimeMillis()
        if (currentTime - lastAccelerometerLogTime > ACCELEROMETER_LOG_INTERVAL_MS) {
            lastAccelerometerLogTime = currentTime

            CoroutineScope(Dispatchers.IO).launch {
                try {
                    LogModule.logSystemEvent(
                        context, bluetoothHelper, locationManager,
                        "$category (${String.format("%.2f", value)})",
                        "–ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†"
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞: ${e.message}")
                }
            }
        }
    }

    // === –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ù–´–• –í –ú–û–ù–ò–¢–û–†–´ ===

    /**
     * –ü–µ—Ä–µ–¥–∞—ë—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
     *
     * @param data —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Arduino
     */
    private fun forwardToMonitors(data: ParsedArduinoData) {
        // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ TemperatureMonitor
        // null –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –æ—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
        temperatureMonitor.processTemperatures(data.tempHot, data.tempCold)
    }

    // === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô ===

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º —Å–ø–∞–º–∞.
     *
     * @param data —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    private fun logSignificantEvents(data: ParsedArduinoData) {
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
        data.battery?.let { batteryValue ->
            logBatteryThresholds(batteryValue)
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏
        data.closedState?.let { closedValue ->
            val newState = if (closedValue == 1) "–ó–∞–∫—Ä—ã—Ç" else "–û—Ç–∫—Ä—ã—Ç"
            logBagStateChange(newState)
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞.
     *
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤: 50%, 30%, 15%, 5%
     *
     * @param batteryValue —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
     */
    private fun logBatteryThresholds(batteryValue: Int) {
        Log.d(
            TAG,
            "üîã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏: —Ç–µ–∫—É—â–∏–π=${batteryValue}%, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π=${lastLoggedBatteryLevel}%"
        )

        // –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ä—è–¥–∞
        val downwardThresholds = listOf(50, 30, 15, 5)

        for (threshold in downwardThresholds) {
            if (batteryValue <= threshold && lastLoggedBatteryLevel > threshold) {
                lastLoggedBatteryLevel = threshold

                val message = when (threshold) {
                    5 -> "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§5%)"
                    15 -> "‚ö†Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§15%)"
                    30 -> "‚ö° –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (‚â§30%)"
                    50 -> "üîã –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –º–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã (‚â§50%)"
                    else -> continue
                }

                Log.d(TAG, "üîã –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–∞—Ç–∞—Ä–µ–∏: $message")

                CoroutineScope(Dispatchers.IO).launch {
                    try {
                        LogModule.logSystemEvent(
                            context, bluetoothHelper, locationManager,
                            message, "–ë–ê–¢–ê–†–ï–Ø"
                        )
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏: ${e.message}")
                    }
                }
                break // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Ä–æ–≥ –∑–∞ —Ä–∞–∑
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏ (–æ—Ç–∫—Ä—ã—Ç–∞/–∑–∞–∫—Ä—ã—Ç–∞).
     *
     * @param newState –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏
     */
    private fun logBagStateChange(newState: String) {
        if (lastLoggedBagState != newState) {
            lastLoggedBagState = newState
            val message = "–°—É–º–∫–∞ ${if (newState == "–ó–∞–∫—Ä—ã—Ç") "–∑–∞–∫—Ä—ã—Ç–∞" else "–æ—Ç–∫—Ä—ã—Ç–∞"}"

            CoroutineScope(Dispatchers.IO).launch {
                try {
                    LogModule.logSystemEvent(
                        context, bluetoothHelper, locationManager,
                        message, "–î–ê–¢–ß–ò–ö_–•–û–õ–õ–ê"
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É–º–∫–∏: ${e.message}")
                }
            }
        }
    }

    // === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏.
     *
     * @return –æ–±—ä–µ–∫—Ç DataProcessingStatistics —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    fun getProcessingStatistics(): DataProcessingStatistics {
        val successRate = if (totalPacketsProcessed > 0) {
            ((totalPacketsProcessed - invalidDataCount).toFloat() / totalPacketsProcessed * 100).toInt()
        } else 100

        return DataProcessingStatistics(
            totalPacketsProcessed = totalPacketsProcessed,
            invalidPacketsCount = invalidDataCount,
            successRate = successRate,
            lastLoggedBatteryLevel = lastLoggedBatteryLevel,
            lastLoggedBagState = lastLoggedBagState ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–µ —Å–∏—Å—Ç–µ–º—ã.
     */
    fun resetStatistics() {
        totalPacketsProcessed = 0
        invalidDataCount = 0
        lastLoggedBatteryLevel = 101
        lastLoggedBagState = null
        lastAccelerometerLogTime = 0L

        Log.d(TAG, "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DataManager —Å–±—Ä–æ—à–µ–Ω–∞")
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
     */
    fun getStatusReport(): String {
        val stats = getProcessingStatistics()
        return "DataManager: ${stats.successRate}% —É—Å–ø–µ—à–Ω—ã—Ö | " +
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalPacketsProcessed} | " +
                "–û—à–∏–±–æ–∫: ${stats.invalidPacketsCount} | " +
                "–ë–∞—Ç–∞—Ä–µ—è: ${stats.lastLoggedBatteryLevel}% | " +
                "–°—É–º–∫–∞: ${stats.lastLoggedBagState}"
    }

    // === DATA CLASSES ===

    /**
     * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Arduino —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
     *
     * @param battery —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ 0-100% –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * @param tempHot —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞ –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * @param tempHotString –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞
     * @param tempCold —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞ –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * @param tempColdString –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞
     * @param closedState —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏ 0/1 –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * @param functionState –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     * @param accelerometer –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
     */
    data class ParsedArduinoData(
        val battery: Int?,
        val tempHot: Float?,
        val tempHotString: String,
        val tempCold: Float?,
        val tempColdString: String,
        val closedState: Int?,
        val functionState: Int?,
        val accelerometer: Float?
    ) {
        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
         */
        fun hasValidData(): Boolean {
            return battery != null || tempHot != null || tempCold != null ||
                    closedState != null || functionState != null || accelerometer != null
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
         */
        fun getSummary(): String {
            return "Battery: ${battery ?: "N/A"}%, " +
                    "TempHot: ${tempHotString}, " +
                    "TempCold: ${tempColdString}, " +
                    "Closed: ${closedState ?: "N/A"}, " +
                    "Functions: ${functionState ?: "N/A"}, " +
                    "Accel: ${accelerometer ?: "N/A"}"
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
         */
        fun hasTemperatureSensorErrors(): Boolean {
            return tempHotString == "er" || tempColdString == "er"
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
     *
     * @param totalPacketsProcessed –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
     * @param invalidPacketsCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
     * @param successRate –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
     * @param lastLoggedBatteryLevel –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏
     * @param lastLoggedBagState –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏
     */
    data class DataProcessingStatistics(
        val totalPacketsProcessed: Int,
        val invalidPacketsCount: Int,
        val successRate: Int,
        val lastLoggedBatteryLevel: Int,
        val lastLoggedBagState: String
    ) {
        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.
         */
        fun hasIssues(): Boolean {
            return successRate < 80 || invalidPacketsCount > 50
        }

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö.
         */
        fun getRecommendations(): List<String> {
            val recommendations = mutableListOf<String>()

            if (successRate < 80) {
                recommendations.add("–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                recommendations.add("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å Bluetooth —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            }

            if (invalidPacketsCount > 50) {
                recommendations.add("–ú–Ω–æ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
                recommendations.add("–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Arduino –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö")
            }

            if (totalPacketsProcessed == 0) {
                recommendations.add("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            }

            return recommendations
        }
    }

    /**
     * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö reactive UI —Å–æ—Å—Ç–æ—è–Ω–∏–π.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É MainActivity –∏ DataManager.
     */
    data class UIStates(
        val batteryPercent: MutableState<Int>,
        val temp1: MutableState<String>,
        val temp2: MutableState<String>,
        val hallState: MutableState<String>,
        val functionState: MutableState<String>,
        val accelerometerData: MutableState<String>
    )
}