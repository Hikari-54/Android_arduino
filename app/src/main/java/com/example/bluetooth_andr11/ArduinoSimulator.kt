package com.example.bluetooth_andr11

import android.util.Log
import java.util.Locale
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.random.Random

class ArduinoSimulator(
    private val onDataReceived: (String) -> Unit
) {
    private var simulationJob: Job? = null
    private var isRunning = false

    // –°–∏–º—É–ª–∏—Ä—É–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Arduino)
    private var batteryPercent = 85          // batteryPercent –≤ Arduino
    private var tempHot = 25.0f              // tempHot (–≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å–µ–∫)
    private var tempCold = 15.0f             // tempCold (–Ω–∏–∂–Ω–∏–π –æ—Ç—Å–µ–∫)
    private var bagClosed = false            // —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–º–∫–∏
    private var isHeatActive = false         // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≥—Ä–µ–≤–∞
    private var coolActive = false           // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
    private var lightActive = false          // —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ç–∞
    private var overload = 0.1f              // overload (–∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä)

    // –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private var currentScenario = SimulationScenario.NORMAL
    private var scenarioStep = 0

    enum class SimulationScenario {
        NORMAL,              // –û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        BATTERY_DRAIN,       // –†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        HEATING_CYCLE,       // –¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞
        COOLING_CYCLE,       // –¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        BAG_OPENING_CLOSING, // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏
        STRONG_SHAKING,      // –°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞
        SENSOR_ERRORS        // –û—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    }

    fun startSimulation() {
        if (isRunning) return

        isRunning = true
        simulationJob = CoroutineScope(Dispatchers.IO).launch {
            Log.d("ArduinoSimulator", "–°–∏–º—É–ª—è—Ü–∏—è Arduino –∑–∞–ø—É—â–µ–Ω–∞")

            while (isRunning) {
                val data = generateData()
                // üî• –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º \n –∫–∞–∫ –¥–µ–ª–∞–µ—Ç Arduino —á–µ—Ä–µ–∑ println
                onDataReceived("$data\n")
                delay(300) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 300–º—Å –∫–∞–∫ –≤ Arduino
            }
        }
    }

    fun stopSimulation() {
        isRunning = false
        simulationJob?.cancel()
        Log.d("ArduinoSimulator", "–°–∏–º—É–ª—è—Ü–∏—è Arduino –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }

    fun setScenario(scenario: SimulationScenario) {
        currentScenario = scenario
        scenarioStep = 0 // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
        Log.d("ArduinoSimulator", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: $scenario")
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Arduino)
    fun handleCommand(command: String) {
        when (command) {
            "H" -> {
                Log.d("ArduinoSimulator", "HEAT ON")
                isHeatActive = true
            }

            "h" -> {
                Log.d("ArduinoSimulator", "HEAT OFF")
                isHeatActive = false
            }

            "C" -> {
                Log.d("ArduinoSimulator", "COOL ON")
                coolActive = true
            }

            "c" -> {
                Log.d("ArduinoSimulator", "COOL OFF")
                coolActive = false
            }

            "L" -> {
                if (!lightActive) {
                    Log.d("ArduinoSimulator", "LIGHT ON")
                    lightActive = true
                } else {
                    Log.d("ArduinoSimulator", "LIGHT —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞")
                }
            }

            "l" -> {
                if (lightActive) {
                    Log.d("ArduinoSimulator", "LIGHT OFF")
                    lightActive = false
                } else {
                    Log.d("ArduinoSimulator", "LIGHT —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞")
                }
            }

            else -> {
                Log.d("ArduinoSimulator", "Unknown command: $command")
            }
        }
    }

    private fun generateData(): String {
        updateSimulationState()

        // 1. Battery percent (0-100)
        val battery = batteryPercent.coerceIn(0, 100)

        // 2. Hot temperature (upper compartment) - –º–æ–∂–µ—Ç –±—ã—Ç—å "er" –ø—Ä–∏ –æ—à–∏–±–∫–µ
        val temp1 = if (currentScenario == SimulationScenario.SENSOR_ERRORS && scenarioStep % 10 < 3) {
            "er"
        } else {
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º US –ª–æ–∫–∞–ª—å (—Ç–æ—á–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            String.format(Locale.US, "%.2f", tempHot)
        }

        // 3. Cold temperature (lower compartment) - –º–æ–∂–µ—Ç –±—ã—Ç—å "er" –ø—Ä–∏ –æ—à–∏–±–∫–µ
        val temp2 = if (currentScenario == SimulationScenario.SENSOR_ERRORS && scenarioStep % 7 < 2) {
            "er"
        } else {
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º US –ª–æ–∫–∞–ª—å (—Ç–æ—á–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            String.format(Locale.US, "%.2f", tempCold)
        }

        // 4. Closed state (0 = open, 1 = closed)
        val closedState = if (bagClosed) 1 else 0

        // 5. State (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
        val currentState = calculateState()

        // 6. Overload (–∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä - —Ä–∞–∑–Ω–∏—Ü–∞ –æ—Ç 1.0g)
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º US –ª–æ–∫–∞–ª—å (—Ç–æ—á–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        val overloadValue = String.format(Locale.US, "%.2f", overload)

        // –§–æ—Ä–º–∞—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Arduino: batteryPercent,tempHot,tempCold,closedState,state,overload
        val result = "$battery,$temp1,$temp2,$closedState,$currentState,$overloadValue"

        Log.d("ArduinoSimulator", "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: $result")
        Log.d("ArduinoSimulator", "üéØ –¢–û–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: '$result' (–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${result.split(",").size})")

        return result
    }

    private fun updateSimulationState() {
        when (currentScenario) {
            SimulationScenario.NORMAL -> updateNormalState()
            SimulationScenario.BATTERY_DRAIN -> updateBatteryDrainState()
            SimulationScenario.HEATING_CYCLE -> updateHeatingCycleState()
            SimulationScenario.COOLING_CYCLE -> updateCoolingCycleState()
            SimulationScenario.BAG_OPENING_CLOSING -> updateBagOpeningClosingState()
            SimulationScenario.STRONG_SHAKING -> updateStrongShakingState()
            SimulationScenario.SENSOR_ERRORS -> updateSensorErrorsState()
        }

        scenarioStep++
    }

    private fun updateNormalState() {
        // –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        if (scenarioStep % 400 == 0) batteryPercent-- // –†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ

        // –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        tempHot += Random.nextFloat() * 0.4f - 0.2f
        tempCold += Random.nextFloat() * 0.3f - 0.15f

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        tempHot = tempHot.coerceIn(20.0f, 30.0f)
        tempCold = tempCold.coerceIn(10.0f, 20.0f)

        // –°–ª—É—á–∞–π–Ω—ã–π overload (–Ω–µ–±–æ–ª—å—à–æ–π)
        overload = Random.nextFloat() * 0.3f

        // –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏ (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ)
        if (Random.nextFloat() < 0.005f) {
            bagClosed = !bagClosed
        }
    }

    private fun updateBatteryDrainState() {
        // –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥ (30000–º—Å / 300–º—Å = 100 —à–∞–≥–æ–≤)
        when {
            scenarioStep < 33 -> batteryPercent = 50 - scenarioStep * 1 // 50% -> 17%
            scenarioStep < 66 -> batteryPercent =
                17 - (scenarioStep - 33) // 17% -> -16% (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—Å—è 0)
            scenarioStep < 100 -> batteryPercent = 0
            else -> {
                batteryPercent = 5 // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
                setScenario(SimulationScenario.NORMAL)
            }
        }

        batteryPercent = batteryPercent.coerceIn(0, 100)

        tempHot += Random.nextFloat() * 0.2f - 0.1f
        tempCold += Random.nextFloat() * 0.2f - 0.1f
        overload = Random.nextFloat() * 0.2f
    }

    private fun updateHeatingCycleState() {
        // –¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞ –∑–∞ 45 —Å–µ–∫—É–Ω–¥ (150 —à–∞–≥–æ–≤)
        when {
            scenarioStep < 33 -> {
                isHeatActive = false
                tempHot = 25.0f + scenarioStep * 0.3f // –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç 25¬∞C -> 35¬∞C
            }

            scenarioStep < 83 -> {
                isHeatActive = true
                // –ë—ã—Å—Ç—Ä—ã–π –Ω–∞–≥—Ä–µ–≤ –¥–æ 55¬∞C
                tempHot = 35.0f + (scenarioStep - 33) * 0.4f
            }

            scenarioStep < 117 -> {
                isHeatActive = true
                // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –æ–∫–æ–ª–æ 55¬∞C
                tempHot = 55.0f + Random.nextFloat() * 4f - 2f
            }

            scenarioStep < 150 -> {
                isHeatActive = false
                // –û—Å—Ç—ã–≤–∞–Ω–∏–µ
                tempHot = (tempHot - 0.8f).coerceAtLeast(25.0f)
            }

            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –ø—Ä–∏ –Ω–∞–≥—Ä–µ–≤–µ
        if (isHeatActive && scenarioStep % 10 == 0) {
            batteryPercent = (batteryPercent - 1).coerceAtLeast(0)
        }

        overload = Random.nextFloat() * 0.3f
    }

    private fun updateCoolingCycleState() {
        // –¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –∑–∞ 45 —Å–µ–∫—É–Ω–¥ (150 —à–∞–≥–æ–≤)
        when {
            scenarioStep < 33 -> {
                coolActive = false
                tempCold = 15.0f - scenarioStep * 0.2f // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ—Å—Ç—ã–≤–∞–Ω–∏–µ 15¬∞C -> 8¬∞C
            }

            scenarioStep < 83 -> {
                coolActive = true
                // –ë—ã—Å—Ç—Ä–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ 2¬∞C
                tempCold = 8.0f - (scenarioStep - 33) * 0.12f
            }

            scenarioStep < 117 -> {
                coolActive = true
                // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –æ–∫–æ–ª–æ 2¬∞C
                tempCold = 2.0f + Random.nextFloat() * 3f - 1.5f
            }

            scenarioStep < 150 -> {
                coolActive = false
                // –ù–∞–≥—Ä–µ–≤–∞–Ω–∏–µ
                tempCold = (tempCold + 0.3f).coerceAtMost(15.0f)
            }

            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –ø—Ä–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–∏
        if (coolActive && scenarioStep % 8 == 0) {
            batteryPercent = (batteryPercent - 1).coerceAtLeast(0)
        }

        overload = Random.nextFloat() * 0.3f
    }

    private fun updateBagOpeningClosingState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞ 40 —Å–µ–∫—É–Ω–¥ (133 —à–∞–≥–∞)
        when {
            scenarioStep % 25 == 0 -> bagClosed = !bagClosed // –ö–∞–∂–¥—ã–µ ~7.5 —Å–µ–∫—É–Ω–¥
        }

        tempHot += Random.nextFloat() * 0.3f - 0.15f
        tempCold += Random.nextFloat() * 0.3f - 0.15f
        overload = Random.nextFloat() * 0.5f

        if (scenarioStep % 200 == 0) batteryPercent--

        if (scenarioStep >= 133) {
            setScenario(SimulationScenario.NORMAL)
        }
    }

    private fun updateStrongShakingState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ –∑–∞ 35 —Å–µ–∫—É–Ω–¥ (117 —à–∞–≥–æ–≤)
        when {
            scenarioStep < 33 -> overload =
                Random.nextFloat() * 1.5f + 2.0f // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è 2.0-3.5
            scenarioStep < 66 -> overload = Random.nextFloat() * 1.0f + 1.0f // –°–∏–ª—å–Ω–∞—è 1.0-2.0
            scenarioStep < 100 -> overload = Random.nextFloat() * 0.8f + 0.3f // –°—Ä–µ–¥–Ω—è—è 0.3-1.1
            scenarioStep < 117 -> overload = Random.nextFloat() * 0.2f // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ 0.0-0.2
            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        tempHot += Random.nextFloat() * 0.4f - 0.2f
        tempCold += Random.nextFloat() * 0.4f - 0.2f

        if (scenarioStep % 67 == 0) batteryPercent-- // –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Ç—Ä—è—Å–∫–µ
    }

    private fun updateSensorErrorsState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤ –∑–∞ 50 —Å–µ–∫—É–Ω–¥ (167 —à–∞–≥–æ–≤)
        // –û—à–∏–±–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ generateData()

        // –î–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏
        if (!(scenarioStep % 10 < 3)) {
            tempHot += Random.nextFloat() * 0.5f - 0.25f
        }
        if (!(scenarioStep % 7 < 2)) {
            tempCold += Random.nextFloat() * 0.5f - 0.25f
        }

        overload = Random.nextFloat() * 0.4f

        if (scenarioStep % 100 == 0) batteryPercent--

        if (scenarioStep >= 167) {
            setScenario(SimulationScenario.NORMAL)
        }
    }

    private fun calculateState(): Int {
        var currentState = 0
        if (isHeatActive) currentState++
        if (coolActive) currentState++
        if (lightActive) currentState++
        return currentState
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    fun setBatteryLevel(level: Int) {
        batteryPercent = level.coerceIn(0, 100)
    }

    fun setTemperatures(upper: Float, lower: Float) {
        tempHot = upper
        tempCold = lower
    }

    fun setBagClosed(closed: Boolean) {
        bagClosed = closed
    }

    fun triggerShake(intensity: Float) {
        overload = intensity
    }
}