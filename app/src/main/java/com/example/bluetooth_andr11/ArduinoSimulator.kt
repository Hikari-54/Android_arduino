package com.example.bluetooth_andr11

import android.util.Log
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.random.Random

class ArduinoSimulator(
    private val onDataReceived: (String) -> Unit
) {
    private var simulationJob: Job? = null
    private var isRunning = false

    // –°–∏–º—É–ª–∏—Ä—É–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private var batteryLevel = 85
    private var upperTemp = 25.0f
    private var lowerTemp = 15.0f
    private var bagClosed = false
    private var heatActive = false
    private var coolActive = false
    private var lightActive = false
    private var shakeLevel = 0.1f

    // –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private var currentScenario = SimulationScenario.NORMAL
    private var scenarioStep = 0

    enum class SimulationScenario {
        NORMAL,              // –û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        BATTERY_DRAIN,       // –†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        HEATING_CYCLE,       // –¶–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞
        COOLING_CYCLE,       // –¶–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        BAG_OPENING_CLOSING, // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏
        STRONG_SHAKING,      // –°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞
        SENSOR_ERRORS        // –û—à–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    }

    fun startSimulation() {
        if (isRunning) return

        isRunning = true
        simulationJob = CoroutineScope(Dispatchers.IO).launch {
            Log.d("ArduinoSimulator", "–°–∏–º—É–ª—è—Ü–∏—è Arduino –∑–∞–ø—É—â–µ–Ω–∞")

            while (isRunning) {
                val data = generateData()
                onDataReceived(data)
                delay(1000) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            }
        }
    }

    fun stopSimulation() {
        isRunning = false
        simulationJob?.cancel()
        Log.d("ArduinoSimulator", "–°–∏–º—É–ª—è—Ü–∏—è Arduino –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    fun setScenario(scenario: SimulationScenario) {
        currentScenario = scenario
        scenarioStep = 0 // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
        Log.d("ArduinoSimulator", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: $scenario")
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    fun handleCommand(command: String) {
        when (command) {
            "H" -> {
                heatActive = true
                Log.d("ArduinoSimulator", "–ù–∞–≥—Ä–µ–≤ –≤–∫–ª—é—á–µ–Ω")
            }

            "h" -> {
                heatActive = false
                Log.d("ArduinoSimulator", "–ù–∞–≥—Ä–µ–≤ –≤—ã–∫–ª—é—á–µ–Ω")
            }

            "C" -> {
                coolActive = true
                Log.d("ArduinoSimulator", "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            }

            "c" -> {
                coolActive = false
                Log.d("ArduinoSimulator", "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
            }

            "L" -> {
                lightActive = true
                Log.d("ArduinoSimulator", "–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω")
            }

            "l" -> {
                lightActive = false
                Log.d("ArduinoSimulator", "–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
            }
        }
    }

    private fun generateData(): String {
        updateSimulationState()

        val battery = batteryLevel.coerceIn(0, 100)
        val temp1 =
            if (currentScenario == SimulationScenario.SENSOR_ERRORS && scenarioStep % 10 < 3) {
                "er"
            } else {
                String.format("%.1f", upperTemp)
            }
        val temp2 =
            if (currentScenario == SimulationScenario.SENSOR_ERRORS && scenarioStep % 7 < 2) {
                "er"
            } else {
                String.format("%.1f", lowerTemp)
            }
        val closed = if (bagClosed) 1 else 0
        val state = calculateState()
        val shake = String.format("%.2f", shakeLevel)

        return "$battery,$temp1,$temp2,$closed,$state,$shake"
    }

    private fun updateSimulationState() {
        when (currentScenario) {
            SimulationScenario.NORMAL -> updateNormalState()
            SimulationScenario.BATTERY_DRAIN -> updateBatteryDrainState()
            SimulationScenario.HEATING_CYCLE -> updateHeatingCycleState()
            SimulationScenario.COOLING_CYCLE -> updateCoolingCycleState()
            SimulationScenario.BAG_OPENING_CLOSING -> updateBagOpeningClosingState()
            SimulationScenario.STRONG_SHAKING -> updateStrongShakingState()
            SimulationScenario.SENSOR_ERRORS -> updateSensorErrorsState()
        }

        scenarioStep++
    }

    private fun updateNormalState() {
        // –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        if (scenarioStep % 120 == 0) batteryLevel--

        // –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        upperTemp += Random.nextFloat() * 0.4f - 0.2f
        lowerTemp += Random.nextFloat() * 0.3f - 0.15f

        // –°–ª—É—á–∞–π–Ω–∞—è —Ç—Ä—è—Å–∫–∞
        shakeLevel = Random.nextFloat() * 0.3f

        // –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É–º–∫–∏ (—Ä–µ–¥–∫–æ)
        if (Random.nextFloat() < 0.01f) {
            bagClosed = !bagClosed
        }
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –∫—Ä–∞—Ç–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    private fun updateBatteryDrainState() {
        // –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
        when {
            scenarioStep < 10 -> batteryLevel = 50 - scenarioStep * 2 // 50% -> 30%
            scenarioStep < 20 -> batteryLevel = 30 - (scenarioStep - 10) * 2 // 30% -> 10%
            scenarioStep < 30 -> batteryLevel = 10 - (scenarioStep - 20) // 10% -> 0%
            else -> {
                batteryLevel = 0
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
                setScenario(SimulationScenario.NORMAL)
            }
        }

        upperTemp += Random.nextFloat() * 0.2f - 0.1f
        lowerTemp += Random.nextFloat() * 0.2f - 0.1f
        shakeLevel = Random.nextFloat() * 0.2f
    }

    private fun updateHeatingCycleState() {
        // –ë—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –Ω–∞–≥—Ä–µ–≤–∞ –∑–∞ 45 —Å–µ–∫—É–Ω–¥
        when {
            scenarioStep < 10 -> {
                heatActive = false
                upperTemp = 25.0f + scenarioStep * 0.5f // –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
            }

            scenarioStep < 25 -> {
                heatActive = true
                upperTemp = 30.0f + (scenarioStep - 10) * 1.5f // –ë—ã—Å—Ç—Ä—ã–π –Ω–∞–≥—Ä–µ–≤ –¥–æ 52¬∞C
            }

            scenarioStep < 35 -> {
                heatActive = true
                upperTemp = 52.0f + Random.nextFloat() * 3f - 1.5f // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è ~52¬∞C
            }

            scenarioStep < 45 -> {
                heatActive = false
                upperTemp = (upperTemp - 1.0f).coerceAtLeast(25.0f) // –û—Å—Ç—ã–≤–∞–Ω–∏–µ
            }

            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        batteryLevel = (batteryLevel - if (heatActive) 0.3f else 0.1f).toInt().coerceAtLeast(0)
        shakeLevel = Random.nextFloat() * 0.3f
    }

    private fun updateCoolingCycleState() {
        // –ë—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –∑–∞ 45 —Å–µ–∫—É–Ω–¥
        when {
            scenarioStep < 10 -> {
                coolActive = false
                lowerTemp = 15.0f - scenarioStep * 0.3f // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ—Å—Ç—ã–≤–∞–Ω–∏–µ
            }

            scenarioStep < 25 -> {
                coolActive = true
                lowerTemp = 12.0f - (scenarioStep - 10) * 0.5f // –ë—ã—Å—Ç—Ä–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ 4¬∞C
            }

            scenarioStep < 35 -> {
                coolActive = true
                lowerTemp = 4.0f + Random.nextFloat() * 2f - 1f // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è ~4¬∞C
            }

            scenarioStep < 45 -> {
                coolActive = false
                lowerTemp = (lowerTemp + 0.3f).coerceAtMost(15.0f) // –ù–∞–≥—Ä–µ–≤–∞–Ω–∏–µ
            }

            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        batteryLevel = (batteryLevel - if (coolActive) 0.4f else 0.1f).toInt().coerceAtLeast(0)
        shakeLevel = Random.nextFloat() * 0.3f
    }

    private fun updateBagOpeningClosingState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞ 40 —Å–µ–∫—É–Ω–¥
        when {
            scenarioStep % 8 == 0 -> bagClosed = !bagClosed // –ö–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
        }

        upperTemp += Random.nextFloat() * 0.3f - 0.15f
        lowerTemp += Random.nextFloat() * 0.3f - 0.15f
        shakeLevel = Random.nextFloat() * 0.5f

        if (scenarioStep % 60 == 0) batteryLevel--

        if (scenarioStep >= 40) {
            setScenario(SimulationScenario.NORMAL)
        }
    }

    private fun updateStrongShakingState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ –∑–∞ 35 —Å–µ–∫—É–Ω–¥
        when {
            scenarioStep < 10 -> shakeLevel = Random.nextFloat() * 1.0f + 2.5f // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è
            scenarioStep < 20 -> shakeLevel = Random.nextFloat() * 0.8f + 1.2f // –°–∏–ª—å–Ω–∞—è
            scenarioStep < 30 -> shakeLevel = Random.nextFloat() * 0.6f + 0.5f // –°–ª–∞–±–∞—è
            scenarioStep < 35 -> shakeLevel = Random.nextFloat() * 0.2f // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
            else -> {
                setScenario(SimulationScenario.NORMAL)
            }
        }

        upperTemp += Random.nextFloat() * 0.4f - 0.2f
        lowerTemp += Random.nextFloat() * 0.4f - 0.2f

        if (scenarioStep % 20 == 0) batteryLevel--
    }

    private fun updateSensorErrorsState() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤ –∑–∞ 50 —Å–µ–∫—É–Ω–¥
        // –û—à–∏–±–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ generateData()
        upperTemp += Random.nextFloat() * 0.5f - 0.25f
        lowerTemp += Random.nextFloat() * 0.5f - 0.25f
        shakeLevel = Random.nextFloat() * 0.4f

        if (scenarioStep % 30 == 0) batteryLevel--

        if (scenarioStep >= 50) {
            setScenario(SimulationScenario.NORMAL)
        }
    }

    private fun calculateState(): Int {
        var state = 0
        if (heatActive) state++
        if (coolActive) state++
        if (lightActive) state++
        return state
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    fun setBatteryLevel(level: Int) {
        batteryLevel = level.coerceIn(0, 100)
    }

    fun setTemperatures(upper: Float, lower: Float) {
        upperTemp = upper
        lowerTemp = lower
    }

    fun setBagClosed(closed: Boolean) {
        bagClosed = closed
    }

    fun triggerShake(intensity: Float) {
        shakeLevel = intensity
    }
}