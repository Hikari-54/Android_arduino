package com.example.bluetooth_andr11.location

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Looper
import android.util.Log
import androidx.compose.runtime.mutableStateOf
import androidx.core.content.ContextCompat
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.Priority

class LocationManager(
    private val context: Context, private val fusedLocationClient: FusedLocationProviderClient
) {
    val locationCoordinates = mutableStateOf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    private var isUpdatingLocation = false
    private var locationCallback: LocationCallback? = null

    init {
        setupLocationCallback()
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        getLastKnownLocation()
    }

    private fun setupLocationCallback() {
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                locationResult.lastLocation?.let { location ->
                    val coordinates = "${location.latitude}, ${location.longitude}"
                    locationCoordinates.value = coordinates
                    Log.d("LocationManager", "–ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: $coordinates")
                }
            }
        }
    }

    // üî• –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    private fun getLastKnownLocation() {
        if (!hasLocationPermission()) {
            Log.w("LocationManager", "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            return
        }

        try {
            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
                location?.let {
                    val coordinates = "${it.latitude}, ${it.longitude}"
                    locationCoordinates.value = coordinates
                    Log.d("LocationManager", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $coordinates")
                }
            }.addOnFailureListener { e ->
                Log.e("LocationManager", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${e.message}")
            }
        } catch (e: SecurityException) {
            Log.e("LocationManager", "SecurityException –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${e.message}")
        }
    }

    private fun createLocationRequest(): LocationRequest {
        return LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY, 30000).apply {
            setMinUpdateIntervalMillis(15000) // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            setMaxUpdateDelayMillis(60000)
        }.build()
    }

    private fun hasLocationPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            context, Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }

    fun startLocationUpdates(onLocationUpdated: (String) -> Unit) {
        if (!hasLocationPermission()) {
            Log.w("LocationManager", "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            return
        }

        val locationRequest = createLocationRequest()

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π callback, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        locationCallback?.let {
            fusedLocationClient.removeLocationUpdates(it)
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π LocationCallback
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                locationResult.lastLocation?.let { location ->
                    val coordinates = "${location.latitude}, ${location.longitude}"
                    locationCoordinates.value = coordinates
                    onLocationUpdated(coordinates)
                    Log.d("LocationManager", "–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $coordinates")
                }
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        try {
            fusedLocationClient.requestLocationUpdates(
                locationRequest, locationCallback!!, Looper.getMainLooper()
            )
            isUpdatingLocation = true
            Log.d("LocationManager", "–ó–∞–ø—É—â–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        } catch (e: SecurityException) {
            Log.e("LocationManager", "SecurityException –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${e.message}")
        }
    }

    fun getCurrentCoordinates(): String {
        val coordinates = locationCoordinates.value
        Log.d("LocationManager", "–ó–∞–ø—Ä–æ—à–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: '$coordinates'")
        return coordinates
    }

    // üî• –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    fun forceLocationUpdate() {
        if (!hasLocationPermission()) return

        try {
            fusedLocationClient.getCurrentLocation(Priority.PRIORITY_HIGH_ACCURACY, null)
                .addOnSuccessListener { location ->
                    location?.let {
                        val coordinates = "${it.latitude}, ${it.longitude}"
                        locationCoordinates.value = coordinates
                        Log.d("LocationManager", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $coordinates")
                    }
                }
                .addOnFailureListener { e ->
                    Log.e("LocationManager", "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${e.message}")
                }
        } catch (e: SecurityException) {
            Log.e("LocationManager", "SecurityException –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${e.message}")
        }
    }

    // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    fun isLocationAvailable(): Boolean {
        return locationCoordinates.value != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
}
