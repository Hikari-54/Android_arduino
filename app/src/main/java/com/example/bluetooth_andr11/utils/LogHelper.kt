package com.example.bluetooth_andr11.utils

import android.content.Context
import android.util.Log
import android.widget.Toast
import java.io.File
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object LogHelper {

    private const val LOG_DIR_NAME = "logs"
    private const val LOG_FILE_NAME = "events_log.txt"

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–µ
    fun filterLogEntries(context: Context, startDate: String, endDate: String): List<String> {
        Log.d("LogHelper", "–§—É–Ω–∫—Ü–∏—è filterLogEntries –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: $startDate - $endDate")

        // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
        val logFile = File(logDir, LOG_FILE_NAME)
        Log.d("LogHelper", "–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É: ${logFile.absolutePath}")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (!logFile.exists()) {
            Log.w("LogHelper", "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${logFile.absolutePath}")
            Toast.makeText(context, "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", Toast.LENGTH_SHORT).show()
            return emptyList()
        }

        // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        Log.d("LogHelper", "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${logFile.length()} –±–∞–π—Ç")
        try {
            val allLines = logFile.readLines()
            Log.d("LogHelper", "–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${allLines.size}")
            if (allLines.isNotEmpty()) {
                Log.d("LogHelper", "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ${allLines.first()}")
                Log.d("LogHelper", "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: ${allLines.last()}")
            }
        } catch (e: Exception) {
            Log.e("LogHelper", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${e.message}")
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
        val start: Date
        val end: Date
        try {
            start = dateFormat.parse("$startDate 00:00:00") ?: return emptyList()
            end = dateFormat.parse("$endDate 23:59:59") ?: return emptyList()
            Log.d(
                "LogHelper",
                "–ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${dateFormat.format(start)} - ${dateFormat.format(end)}"
            )
        } catch (e: ParseException) {
            Log.e("LogHelper", "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç: ${e.message}")
            Toast.makeText(context, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: ${e.message}", Toast.LENGTH_SHORT).show()
            return emptyList()
        }

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ timestamp
        val filteredEntries = mutableListOf<String>()
        var processedLines = 0
        var parsedDates = 0
        var matchedLines = 0

        logFile.forEachLine { line ->
            processedLines++

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
            // –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: "2024-01-01 12:00:00 - —Å–æ–±—ã—Ç–∏–µ @ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            val timestamp = line.substringBefore(" -").trim() // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ "Time: "

            if (timestamp.isNotEmpty() && timestamp.length >= 19) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è datetime
                val logDate = try {
                    dateFormat.parse(timestamp)
                } catch (e: ParseException) {
                    Log.w(
                        "LogHelper",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: '$line', timestamp: '$timestamp'"
                    )
                    null
                }

                if (logDate != null) {
                    parsedDates++
                    if (logDate in start..end) {
                        filteredEntries.add(line)
                        matchedLines++
                    }
                }
            } else {
                Log.w("LogHelper", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –≤ —Å—Ç—Ä–æ–∫–µ: '$line'")
            }
        }

        Log.d("LogHelper", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: $processedLines")
        Log.d("LogHelper", "–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –¥–∞—Ç: $parsedDates")
        Log.d("LogHelper", "–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ: $matchedLines")

        if (filteredEntries.isEmpty()) {
            val message =
                "–ó–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: $processedLines —Å—Ç—Ä–æ–∫, —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –¥–∞—Ç: $parsedDates"
            Toast.makeText(context, message, Toast.LENGTH_LONG).show()
            Log.w("LogHelper", message)
        } else {
            Log.i(
                "LogHelper",
                "–ù–∞–π–¥–µ–Ω–æ ${filteredEntries.size} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ $startDate - $endDate"
            )
        }

        return filteredEntries
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
    fun diagnoseLogFile(context: Context): String {
        val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
        val logFile = File(logDir, LOG_FILE_NAME)

        return buildString {
            appendLine("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì-–§–ê–ô–õ–ê ===")
            appendLine("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${logFile.absolutePath}")
            appendLine("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${logFile.exists()}")

            if (logFile.exists()) {
                appendLine("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${logFile.length()} –±–∞–π—Ç")
                appendLine("–ú–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å: ${logFile.canRead()}")
                appendLine("–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å: ${logFile.canWrite()}")

                try {
                    val lines = logFile.readLines()
                    appendLine("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.size}")

                    if (lines.isNotEmpty()) {
                        appendLine("\n=== –ü–ï–†–í–´–ï 3 –°–¢–†–û–ö–ò ===")
                        lines.take(3).forEachIndexed { index, line ->
                            appendLine("${index + 1}: $line")
                        }

                        appendLine("\n=== –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–¢–†–û–ö–ò ===")
                        lines.takeLast(3).forEachIndexed { index, line ->
                            appendLine("${lines.size - 2 + index}: $line")
                        }

                        // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
                        appendLine("\n=== –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–ê ===")
                        val dateFormat =
                            SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                        var validDates = 0
                        var invalidDates = 0

                        lines.take(10).forEach { line ->
                            val timestamp = line.substringBefore(" -").trim()
                            try {
                                dateFormat.parse(timestamp)
                                validDates++
                            } catch (e: ParseException) {
                                invalidDates++
                                appendLine("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: '$timestamp' –≤ —Å—Ç—Ä–æ–∫–µ: '$line'")
                            }
                        }

                        appendLine("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã: $validDates")
                        appendLine("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã: $invalidDates")
                    } else {
                        appendLine("–§–∞–π–ª –ø—É—Å—Ç!")
                    }
                } catch (e: Exception) {
                    appendLine("–û–®–ò–ë–ö–ê —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.message}")
                }
            } else {
                appendLine("–§–∞–π–ª –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!")
                appendLine("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${logDir.exists()}")
                if (logDir.exists()) {
                    appendLine("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ logs:")
                    logDir.listFiles()?.forEach { file ->
                        appendLine("  - ${file.name} (${file.length()} –±–∞–π—Ç)")
                    } ?: appendLine("  –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                }
            }
        }
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
    fun createTestLog(context: Context): Boolean {
        return try {
            val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
            if (!logDir.exists()) {
                logDir.mkdirs()
            }

            val logFile = File(logDir, LOG_FILE_NAME)
            val timestamp =
                SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())

            logFile.appendText("$timestamp - –¢–ï–°–¢: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ LogHelper\n")

            Log.i("LogHelper", "–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥: ${logFile.absolutePath}")
            true
        } catch (e: Exception) {
            Log.e("LogHelper", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞: ${e.message}")
            false
        }
    }

    // üî• –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    fun clearOldLogs(context: Context, daysToKeep: Int = 30): Int {
        return try {
            val logDir = File(context.getExternalFilesDir(null), LOG_DIR_NAME)
            val logFile = File(logDir, LOG_FILE_NAME)

            if (!logFile.exists()) return 0

            val cutoffTime = System.currentTimeMillis() - (daysToKeep * 24 * 60 * 60 * 1000L)
            val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())

            val lines = logFile.readLines()
            val filteredLines = lines.filter { line ->
                val timestamp = line.substringBefore(" -").trim()
                try {
                    val date = dateFormat.parse(timestamp)
                    date != null && date.time >= cutoffTime
                } catch (e: ParseException) {
                    true // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                }
            }

            val removedCount = lines.size - filteredLines.size

            if (removedCount > 0) {
                logFile.writeText(filteredLines.joinToString("\n") + "\n")
                Log.i("LogHelper", "–£–¥–∞–ª–µ–Ω–æ $removedCount —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ $daysToKeep –¥–Ω–µ–π)")
            }

            removedCount
        } catch (e: Exception) {
            Log.e("LogHelper", "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: ${e.message}")
            0
        }
    }
}