package com.example.bluetooth_andr11.monitoring

import android.content.Context
import android.util.Log
import com.example.bluetooth_andr11.bluetooth.BluetoothHelper
import com.example.bluetooth_andr11.location.EnhancedLocationManager
import com.example.bluetooth_andr11.log.LogModule
import java.io.File

class TemperatureMonitor(
    private val context: Context,
    private val bluetoothHelper: BluetoothHelper,
    private val locationManager: EnhancedLocationManager
) {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private var lastUpperTemp: Int? = null
    private var lastLowerTemp: Int? = null
    private val upperThresholds = mutableSetOf<Int>()
    private val lowerThresholds = mutableSetOf<Int>()

    // –ü—Ä–æ—Å—Ç—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã
    companion object {
        private const val TAG = "TemperatureMonitor"

        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –≥–æ—Ä—è—á–µ–≥–æ –æ—Ç—Å–µ–∫–∞ (–µ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–ø–ª–æ–π)
        private val HOT_FOOD_THRESHOLDS = listOf(40, 50, 60) // –ö–æ–º—Ñ–æ—Ä—Ç, –≥–æ—Ä—è—á–æ, –æ—á–µ–Ω—å –≥–æ—Ä—è—á–æ
        private val HOT_COOLING_THRESHOLDS = listOf(45, 35, 25) // –û—Å—Ç—ã–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –µ–¥—ã

        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞ (–µ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π)
        private val COLD_FOOD_THRESHOLDS = listOf(15, 10, 5) // –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, —Ö–æ–ª–æ–¥–Ω–æ, –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ
        private val COLD_WARMING_THRESHOLDS = listOf(10, 15, 20) // –ù–∞–≥—Ä–µ–≤ —Ö–æ–ª–æ–¥–Ω–æ–π –µ–¥—ã
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    fun processTemperatures(upperTemp: Float?, lowerTemp: Float?) {
        upperTemp?.let { processHotCompartment(it) }
        lowerTemp?.let { processColdCompartment(it) }
    }

    // üî• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ì–û–†–Ø–ß–ï–ì–û –æ—Ç—Å–µ–∫–∞
    private fun processHotCompartment(temp: Float) {
        val tempInt = temp.toInt()
        val previous = lastUpperTemp
        lastUpperTemp = tempInt

        Log.d(TAG, "üî• –ì–æ—Ä—è—á–∏–π –æ—Ç—Å–µ–∫: ${previous}¬∞C ‚Üí ${tempInt}¬∞C")

        if (previous != null) {
            when {
                tempInt > previous -> checkHotFoodHeating(tempInt, previous)
                tempInt < previous -> checkHotFoodCooling(tempInt, previous)
            }
        }
    }

    // ‚ùÑÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –•–û–õ–û–î–ù–û–ì–û –æ—Ç—Å–µ–∫–∞  
    private fun processColdCompartment(temp: Float) {
        val tempInt = temp.toInt()
        val previous = lastLowerTemp
        lastLowerTemp = tempInt

        Log.d(TAG, "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π –æ—Ç—Å–µ–∫: ${previous}¬∞C ‚Üí ${tempInt}¬∞C")

        if (previous != null) {
            when {
                tempInt < previous -> checkColdFoodCooling(tempInt, previous)
                tempInt > previous -> checkColdFoodWarming(tempInt, previous)
            }
        }
    }

    // üî• –ì–æ—Ä—è—á–∞—è –µ–¥–∞: –Ω–∞–≥—Ä–µ–≤
    private fun checkHotFoodHeating(current: Int, previous: Int) {
        HOT_FOOD_THRESHOLDS.forEach { threshold ->
            if (current >= threshold && !upperThresholds.contains(threshold)) {
                upperThresholds.add(threshold)
                val event = createHotFoodEvent(threshold, previous, current, isHeating = true)
                logTemperatureEvent(event)
            }
        }
    }

    // üî• –ì–æ—Ä—è—á–∞—è –µ–¥–∞: –æ—Å—Ç—ã–≤–∞–Ω–∏–µ
    private fun checkHotFoodCooling(current: Int, previous: Int) {
        HOT_COOLING_THRESHOLDS.forEach { threshold ->
            val negativeKey = -threshold
            if (current <= threshold && previous > threshold && !upperThresholds.contains(
                    negativeKey
                )
            ) {
                upperThresholds.add(negativeKey)
                val event = createHotFoodEvent(threshold, previous, current, isHeating = false)
                logTemperatureEvent(event)
            }
        }
    }

    // ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –µ–¥–∞: –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
    private fun checkColdFoodCooling(current: Int, previous: Int) {
        COLD_FOOD_THRESHOLDS.forEach { threshold ->
            if (current <= threshold && !lowerThresholds.contains(threshold)) {
                lowerThresholds.add(threshold)
                val event = createColdFoodEvent(threshold, previous, current, isCooling = true)
                logTemperatureEvent(event)
            }
        }
    }

    // ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –µ–¥–∞: –Ω–∞–≥—Ä–µ–≤
    private fun checkColdFoodWarming(current: Int, previous: Int) {
        COLD_WARMING_THRESHOLDS.forEach { threshold ->
            val negativeKey = -100 - threshold
            if (current >= threshold && previous < threshold && !lowerThresholds.contains(
                    negativeKey
                )
            ) {
                lowerThresholds.add(negativeKey)
                val event = createColdFoodEvent(threshold, previous, current, isCooling = false)
                logTemperatureEvent(event)
            }
        }
    }

    // üî• –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä—è—á–µ–π –µ–¥—ã
    private fun createHotFoodEvent(
        threshold: Int,
        previous: Int,
        current: Int,
        isHeating: Boolean
    ): TemperatureEvent {
        return if (isHeating) {
            when (threshold) {
                40 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –Ω–∞–≥—Ä–µ–ª–∞—Å—å –¥–æ ${threshold}¬∞C - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                50 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –≥–æ—Ä—è—á–∞—è ${threshold}¬∞C - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                60 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –æ—á–µ–Ω—å –≥–æ—Ä—è—á–∞—è ${threshold}¬∞C - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–¥–∞—á–µ",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                else -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨ÜÔ∏è",
                    message = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${current}¬∞C",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )
            }
        } else {
            when (threshold) {
                45 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ –æ—Å—Ç—ã–ª–∞ –¥–æ ${threshold}¬∞C - –µ—â–µ —Ç–µ–ø–ª–∞—è",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                35 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ –æ—Å—Ç—ã–ª–∞ –¥–æ ${threshold}¬∞C - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                25 -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ –æ—Å—Ç—ã–ª–∞ –¥–æ ${threshold}¬∞C - –∫–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                else -> TemperatureEvent(
                    compartment = "–ì–û–†–Ø–ß–ò–ô",
                    icon = "üî•",
                    direction = "‚¨áÔ∏è",
                    message = "–û—Å—Ç—ã–ª–∞ –¥–æ ${current}¬∞C",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )
            }
        }
    }

    // ‚ùÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π –µ–¥—ã
    private fun createColdFoodEvent(
        threshold: Int,
        previous: Int,
        current: Int,
        isCooling: Boolean
    ): TemperatureEvent {
        return if (isCooling) {
            when (threshold) {
                15 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ –æ—Ö–ª–∞–¥–∏–ª–∞—Å—å –¥–æ ${threshold}¬∞C - –ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                10 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ —Ö–æ–ª–æ–¥–Ω–∞—è ${threshold}¬∞C - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                5 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨áÔ∏è",
                    message = "–ï–¥–∞ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–∞—è ${threshold}¬∞C - —Ö–æ—Ä–æ—à–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                else -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨áÔ∏è",
                    message = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${current}¬∞C",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )
            }
        } else {
            when (threshold) {
                10 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –Ω–∞–≥—Ä–µ–ª–∞—Å—å –¥–æ ${threshold}¬∞C - —É–∂–µ –Ω–µ —Ö–æ–ª–æ–¥–Ω–∞—è",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                15 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –Ω–∞–≥—Ä–µ–ª–∞—Å—å –¥–æ ${threshold}¬∞C - –ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                20 -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ï–¥–∞ –Ω–∞–≥—Ä–µ–ª–∞—Å—å –¥–æ ${threshold}¬∞C - –∫–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )

                else -> TemperatureEvent(
                    compartment = "–•–û–õ–û–î–ù–´–ô",
                    icon = "‚ùÑÔ∏è",
                    direction = "‚¨ÜÔ∏è",
                    message = "–ù–∞–≥—Ä–µ–ª–∞—Å—å –¥–æ ${current}¬∞C",
                    details = "–±—ã–ª–æ ${previous}¬∞C"
                )
            }
        }
    }

    // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    private fun logTemperatureEvent(event: TemperatureEvent) {
        val formattedMessage = formatEventMessage(event)
        Log.d(TAG, "üå°Ô∏è –°–û–ë–´–¢–ò–ï: $formattedMessage")

        try {
            writeToLogFile(formattedMessage)
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${e.message}")
            LogModule.logEvent(context, "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: $formattedMessage")
        }
    }

    // üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ, –±–µ–∑ severity)
    private fun formatEventMessage(event: TemperatureEvent): String {
        return "${event.icon} ${event.compartment} –û–¢–°–ï–ö ${event.direction} ${event.message} (${event.details})"
    }

    // üìÅ –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
    private fun writeToLogFile(message: String) {
        val logDir = File(context.getExternalFilesDir(null), "logs")
        if (!logDir.exists()) logDir.mkdirs()

        val logFile = File(logDir, "events_log.txt")
        val timestamp =
            java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", java.util.Locale.getDefault())
                .format(java.util.Date())

        val locationInfo = locationManager.getLocationInfo()
        val coordinates = if (locationInfo.coordinates != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
            "${locationInfo.coordinates} (${locationInfo.source}, ¬±${locationInfo.accuracy.toInt()}–º)"
        } else {
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        }

        val logEntry = "$timestamp - –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: $message @ $coordinates\n"
        logFile.appendText(logEntry)

        Log.d(TAG, "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥: $message")
    }

    // üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fun reset() {
        upperThresholds.clear()
        lowerThresholds.clear()
        lastUpperTemp = null
        lastLowerTemp = null
        Log.d(TAG, "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–±—Ä–æ—à–µ–Ω–æ")
    }

    // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fun getStatistics(): TemperatureStatistics {
        return TemperatureStatistics(
            hotCompartmentTemp = lastUpperTemp,
            coldCompartmentTemp = lastLowerTemp,
            hotEventsCount = upperThresholds.size,
            coldEventsCount = lowerThresholds.size
        )
    }
}

// üìã –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ data –∫–ª–∞—Å—Å—ã (—É–±—Ä–∞–ª–∏ severity)
data class TemperatureEvent(
    val compartment: String,    // –ì–û–†–Ø–ß–ò–ô/–•–û–õ–û–î–ù–´–ô
    val icon: String,          // üî•/‚ùÑÔ∏è
    val direction: String,     // ‚¨ÜÔ∏è/‚¨áÔ∏è
    val message: String,       // –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –µ–¥—ã
    val details: String        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
)

data class TemperatureStatistics(
    val hotCompartmentTemp: Int?,
    val coldCompartmentTemp: Int?,
    val hotEventsCount: Int,
    val coldEventsCount: Int
)
